# Hinode Docs

<!-- markdownlint-disable MD033 -->
<!-- Tagline -->
<p align="center">
    <b>A clean documentation and blog theme for your Hugo site based on Bootstrap 5</b>
    <br />
</p>

<!-- Badges -->
<p align="center">
    <a href="https://gohugo.io">
        <img src="https://img.shields.io/badge/generator-hugo-brightgreen" alt="Hugo website">
    </a>
    <a href="https://app.netlify.com/sites/gethinode-docs/deploys">
        <img src="https://img.shields.io/netlify/c38df4b6-7b7d-4300-a70b-8338b168a8c7" alt="Netlify Status">
    </a>
    <a href="https://stats.uptimerobot.com/xyGVYhLJmV">
        <img src="https://img.shields.io/uptimerobot/status/m793471943-776bdc7331e383e3e8ad8d8f" alt="UptimeRobot Status">
    </a>
    <a href="https://github.com/gethinode/docs/commits/main">
        <img src="https://img.shields.io/github/last-commit/gethinode/docs.svg" alt="Last commit">
    </a>
    <a href="https://github.com/gethinode/docs/issues">
        <img src="https://img.shields.io/github/issues/gethinode/docs.svg" alt="Issues">
    </a>
    <a href="https://github.com/gethinode/docs/pulls">
        <img src="https://img.shields.io/github/issues-pr-raw/gethinode/docs.svg" alt="Pulls">
    </a>
    <a href="https://github.com/gethinode/docs/blob/main/LICENSE">
        <img src="https://img.shields.io/github/license/gethinode/docs" alt="License">
    </a>
</p>
<!-- markdownlint-enable MD033 -->

## About

![Logo](https://raw.githubusercontent.com/gethinode/hinode/main/static/img/logo.png)

Hinode is a clean blog theme for [Hugo][hugo], an open-source static site generator. This repository maintains the documentation site published to https://gethinode.com. Visit the [Hinode template][repository_template] for installation instructions.

<!-- MARKDOWN PUBLIC LINKS -->
[hugo]: https://gohugo.io

<!-- MARKDOWN MAINTAINED LINKS -->
<!-- TODO: add blog link
[blog]: https://markdumay.com
-->

[repository]: https://github.com/gethinode/hinode.git
[repository_template]: https://github.com/gethinode/template.git


---

---
draft: false
outputs:
- xml
url: browserconfig.xml
---

---

---
title: Cookie Policy
description: Cookie policy of gethinode.com
date: 2024-09-19
layout: docs
---
{{% comment %}}<!-- markdownlint-disable MD036 -->{{% /comment %}}
*Effective Date 19-Sep-2024*

## What are cookies?

This Cookie Policy explains what cookies are and how we use them, the types of cookies we use i.e, the information we collect using cookies and how that information is used, and how to manage the cookie settings.

Cookies are small text files that are used to store small pieces of information. They are stored on your device when the website is loaded on your browser. These cookies help us make the website function properly, make it more secure, provide better user experience, and understand how the website performs and to analyze what works and where it needs improvement.

## How do we use cookies?

As most of the online services, our website uses first-party and third-party cookies for several purposes. First-party cookies are mostly necessary for the website to function the right way, and they do not collect any of your personally identifiable data.

The third-party cookies used on our website are mainly for understanding how the website performs, how you interact with our website, keeping our services secure, providing advertisements that are relevant to you, and all in all providing you with a better and improved user experience and help speed up your future interactions with our website.

## Types of Cookies we use

{{< cky-audit >}}

## Manage cookie preferences

{{< cky-banner >}}

You can change your cookie preferences any time by clicking the above button. This will let you revisit the cookie consent banner and change your preferences or withdraw your consent right away.

In addition to this, different browsers provide different methods to block and delete cookies used by websites. You can change the settings of your browser to block/delete the cookies. Listed below are the links to the support documents on how to manage and delete cookies from the major web browsers.

Chrome: https://support.google.com/accounts/answer/32050

Safari: https://support.apple.com/en-in/guide/safari/sfri11471/mac

Firefox: https://support.mozilla.org/en-US/kb/clear-cookies-and-site-data-firefox?redirectslug=delete-cookies-remove-info-websites-stored&redirectlocale=en-US

Internet Explorer: https://support.microsoft.com/en-us/topic/how-to-delete-cookie-files-in-internet-explorer-bca9446f-d873-78de-77ba-d42645fa52fc

If you are using any other web browser, please visit your browser’s official support documents.

*Cookie Policy generated by {{< link "https://www.cookieyes.com" >}}CookieYes - Cookie Policy Generator{{< /link >}}.*


---

---
title: Privacy Policy
description: Privacy policy of gethinode.com
date: 2024-09-19
layout: docs
---
{{% comment %}}<!-- markdownlint-disable MD036 -->{{% /comment %}}
*Effective Date 19-Sep-2024*

This Privacy Policy describes the policies of gethinode.com on the collection, use and disclosure of your information that we collect when you use our website (https://gethinode.com, referred to as the “Service”). By accessing or using the Service, you are consenting to the collection, use and disclosure of your information in accordance with this Privacy Policy. If you do not consent to the same, please do not access or use the Service.

We may modify this Privacy Policy at any time without any prior notice to you and will post the revised Privacy Policy on the Service. The revised Policy will be effective 180 days from when the revised Policy is posted in the Service and your continued access or use of the Service after such time will constitute your acceptance of the revised Privacy Policy. We therefore recommend that you periodically review this page.

## How we share your information

We will not transfer your personal information to any third party without seeking your consent, except in limited circumstances as described
below:

- Analytics

We require such third party’s to use the personal information we transfer to them only for the purpose for which it was transferred and not to retain it for longer than is required for fulfilling the said purpose.

We may also disclose your personal information for the following: (1) to comply with applicable law, regulation, court order or other legal process; (2) to enforce your agreements with us, including this Privacy Policy; or (3) to respond to claims that your use of the Service violates any third-party rights. If the Service or our company is merged or acquired with another company, your information will be one of the assets that is transferred to the new owner.

## Your rights

Depending on the law that applies, you may have a right to access and rectify or erase your personal data or receive a copy of your personal data, restrict or object to the active processing of your data, ask us to share (port) your personal information to another entity,withdraw any consent you provided to us to process your data, a right to lodge a complaint with a statutory authority and such other rights as may be relevant under applicable laws.

Do note that if you do not allow us to collect or process the required personal information or withdraw the consent to process the same for the required purposes, you may not be able to access or use the services for which your information was sought.

## Cookies etc.

To learn more about how we use these and your choices in relation to these tracking technologies, please refer to our {{< link "cookies" >}}Cookie Policy/Settings{{< /link >}}.

## Security

The security of your information is important to us and we will use reasonable security measures to prevent the loss, misuse or unauthorized alteration of your information under our control. However, given the inherent risks, we cannot guarantee absolute security and consequently, we cannot ensure or warrant the security of any information you transmit to us and you do so at your own risk.

## Third party links & use of your information

Our Service may contain links to other websites that are not operated by us. This Privacy Policy does not address the privacy policy and other practices of any third parties, including any third party operating any website or service that may be accessible via a link on the Service. We strongly advise you to review the privacy policy of every site you visit. We have no control over and assume no responsibility for the content, privacy policies or practices of any third party sites or services.

*Privacy Policy generated with {{< link "https://www.cookieyes.com" >}}CookieYes{{< /link >}}.*


---

---
author: Mark Dumay
title: Creating your website has never been easier
description: Focus on your content and let Hinode generate your static website. Use powerful shortcodes to add interactive elements with ease. And best of all - it is open source.
thumbnail: /img/logo_var.svg#logo
actions:
    getstarted:
        url: "docs/getting-started/introduction/"
        title: "Get Started"
        icon: "fas book-open"
        weight: 1
    demo:
        url: "https://demo.gethinode.com"
        title: "Live Demo"
        icon: "fas display"
        outline: true
        weight: 2
---



---

---
title: Docs
redirect: "/docs/"
_build:
  list: false
  render: false
---

---

---
title: Credits
description: Hinode is fully open source and uses several open-source frameworks and libraries.
date: 2023-08-14
aliases:
  - "/docs/about/credits/"
  - "/docs/about/"
  - "/about/"
layout: docs
---

## Team

Hinode is maintained by {{< link repository_owner >}}Mark Dumay{{< /link >}} and several contributors as an open-source repository on {{< link repository >}}GitHub{{< /link >}}. You are more than welcome to contribute. Get involved in the development by {{< link issue_tracker >}}opening an issue{{< /link >}} or submitting a pull request. Read our [contributing guidelines]({{% ref "contribute" %}}) for information on how we develop.

## Core components

Hinode is based on the following core components:

- {{< link hugo >}}Hugo{{< /link >}} is a static HTML and CSS website generator written in the {{< link golang >}}Go language{{< /link >}}. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with {{< link markdown_guide >}}Markdown content{{< /link >}} and templates and renders them into a full HTML website.
- {{< link bootstrap >}}Bootstrap{{< /link >}} is a popular, open-source web development framework. Using a mobile-first approach, it provides several functions and components to simplify the creation of responsive websites.
- {{< link npm >}}npm{{< /link >}} is a software registry that enables the sharing and reuse of both open-source and private software packages. By taking advantage of its version management, software dependencies are easily tracked and updated.
- {{< link flexsearch >}}FlexSearch{{< /link >}} is a flexible search library to enable full text search across your site.
- {{< link fontawesome >}}Font Awesome{{< /link >}} is a popular icon library and toolkit, used on over 200 million sites. The free version provides access to more than 2,000 icons. The toolkit also provides various styling and animation options out of the box.

## Optional components

Hinode supports several opt-in components. In the default configuration, these components are added on a page-by-page basis:

- {{< link katex >}}KaTeX{{< /link >}} is a fast math typesetting library for the web.
- {{< link leaflet >}}Leaflet{{< /link >}} is an open-source JavaScript library for mobile-friendly interactive maps.
- {{< link lottie >}}Lottie{{< /link >}} is a library that parses Adobe After Effects animations exported as JSON with Bodymovin and renders them natively.
- {{< link mermaid >}}Mermaid{{< /link >}} is a diagramming and charting tool that renders Markdown-inspired text definitions to create and modify diagrams dynamically.
- {{< link simple_datatables >}}Simple Datatables{{< /link >}} is a lightweight, extendable, JavaScript HTML table library.

## Themes

Hinode is inspired by the following themes:

- {{< link blist >}}Blist{{< /link >}} is a clean and fast blog theme for your Hugo site using Tailwind CSS.
- {{< link doks >}}Doks{{< /link >}} is a Hugo theme for building secure, fast, and SEO-ready documentation websites, which you can easily update and customize.


---

---
title: Integrations
description: Hinode integrates with several libraries and third-party providers.
date: 2024-10-21
layout: docs
draft: true
---



## Disclaimer

The names and visual logos referenced on this page may include trademarks and otherwise legally protected work. Hinode is not endorsed by or affiliated with any of the organizations or natural persons mentioned. We have been careful to respect the trademark policies and other applicable policies of the original owners. If you believe this page contains errors or incorrect references, please {{< link issue_tracker >}}add an issue to our issue tracker{{< /link >}}.


---

---
title: License
description: Hinode's open-source license for the codebase and documentation.
date: 2024-01-01
layout: docs
aliases:
  - "/docs/about/license/"
  - "/docs/license/"
  - "/license/"
---

## Codebase

The codebase of Hinode is open source under the conditions of the {{< link license >}}MIT license{{< /link >}} and is copyright &copy; 2024 by Mark Dumay. In short, the MIT license allows you to use the Hinode codebase for both personal and commercial use, as long as you include the original license and copyright notice. Licensed works, modifications, and larger works may be distributed under different terms and without source code. No liability or warranty is given.

## Documentation

The documentation of Hinode is licensed under the Creative Commons ({{< link cc_by_nc_4_0 >}}CC BY-NC 4.0{{< /link >}}) license. This includes all files within the repository's `/content` and `/exampleSite/content` folders and their children, as well as the "README" in the repository root. The license allows you to share and adapt the materials, as long as you give appropriate credit and do not use the materials for commercial purposes. No warranties are given.


---

---
title: Icons
description: Configure secure access to icons from Bootstrap and Font Awesome.
date: 2023-08-02
layout: docs
---

Hinode processes the Bootstrap icons to ensure they adhere to the strict [content security policy]({{% relref "server-headers" %}}). In addition, it provides access to the free icons of {{< link fontawesome >}}Font Awesome{{< /link >}}.

## Bootstrap icons

Bootstrap uses various embedded vector images (in {{< abbr SVG >}} format) throughout its Sass source files. Hinode replaces these embedded images with file-based vector images, as the [content security policy]({{% relref "server-headers" %}}) prohibits loading of embedded images. To ensure the images are consistent with the [theme colors]({{% ref "colors" %}}), the images are postprocessed using {{< link hugo_templates >}}Hugo templating{{< /link >}}.

### Build pipeline

Hinodes uses mounted folders to create a flexible virtual file system that is automatically kept up to date. Review the [overview]({{% ref "overview" %}}) for a detailed explanation. The build pipeline of the Bootstrap icons consists of four steps. It is intertwined with the [build process for the stylesheets]({{% ref "styles" %}}).

1. **Override the inline Bootstrap icon definitions**

   Replace the default inline icon definitions within the Bootstrap Sass files with references to local vector images. Use the file `assets/scss/common/_icons.scss` to ensure the definitions take precedence over the default Bootstrap values. For example, the following statement updates the value of the `$form-switch-focus-bg-image`:

   ```scss
   $form-switch-focus-bg-image: url("icons/form-switch-focus-bg-image.svg") !default;
   ```

2. **Export the Sass variables**

   Export the required Sass variables by defining them in the `assets/scss/common/_export.scss` file. Hinode converts the variable names from kebab case to snake case to make them compatible with Hugo's variable naming convention. For example, the css variable `--form-switch-focus-color` is exposed as `.form_switch_focus_color` to the Hugo templates.

   ```scss
   :hinode-theme {
       --form-switch-focus-color: #{$form-switch-focus-color};
   }
   ```

3. **Reference the Sass variables within each icon file**

   Use {{< link hugo_templates >}}Hugo templating{{< /link >}} to reference the Sass variables for fill colors and stroke colors. For example, the file `assets/icons/form-switch-focus-bg-image.svg` defines the fill color as `{{ .form_switch_focus_color }}`. The entire vector definition is as such:

   ```html
   <svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'>
       <circle r='3' fill='{{ .form_switch_focus_color }}'/>
   </svg>
   ```

4. **Process the icon files**

   Add the local icon files to the `assets/icons` folder with a filename as defined in step 1. The partial `partials/head/stylesheet.html` calls the partial `partials/head/icons.html` to process all icon files with the `.svg` extension recursively. The output is stored in the `icons` folder within the output directory (usually `public` when building the site). The icon files are referenced in the main stylesheet automatically.

### Icons definitions

The icons are defined in the file `assets/scss/common/_icons.scss`. The current configuration is the following:

{{< docs name="icons" file="assets/scss/common/_icons.scss" >}}

### Export definitions

The exported variables are defined in the file `assets/scss/common/_export.scss`. The current configuration is the following:

{{< docs name="export" file="assets/scss/common/_export.scss" >}}

## Font Awesome icons

{{< link fontawesome >}}Font Awesome{{< /link >}} provides a collection of icons to be used freely on websites and other media. See the [icons documentation]({{% relref "../content/icons" %}}) in the content section on how to use them to style your website. Hinode uses the {{< abbr CSS >}} files and web fonts of Font Awesome, as the [content security policy]({{% relref "server-headers" %}}) prohibits the inline execution of stylesheets by the JavaScripts of Font Awesome. By default, the CSS files are bundled with the main stylesheet. The web fonts are mounted in the `/static/fonts` folder. The various files are provided by the {{< link repository_mod_fontawesome >}}Font Awesome module on GitHub{{< /link >}}.


---

---
title: Module development
description: Develop your own Hugo modules compatible with Hinode.
date: 2024-08-14
layout: docs
---

{{< release version="v0.16.0" >}}

> [!TIP]
> A {{< link repository_mod_template >}}template repository for Hugo modules that are compatible with Hinode{{< /link >}} is maintained on GitHub. The repository provides a starting point for developing your own modules.

Hinode fully supports {{< link hugo_modules >}}Hugo modules{{< /link >}} to provide a flexible and extensible modular framework. By default, Hinode includes core building blocks for {{< link bootstrap >}}Bootstrap{{< /link >}}, {{< link flexsearch >}}FlexSearch{{< /link >}}, and {{< link fontawesome >}}Font Awesome{{< /link >}}. The following paragraphs describe the coding conventions of Hinode modules, illustrate how to automate your build and release process, and give an overview of common issues and resolutions.

## Conventions

Hinode uses several conventions for the modules it maintains. You are encouraged to use the same conventions, especially when contributing your own module for sharing.

### Module names

The GitHub repositories of modules maintained by Hinode start with the `mod-` prefix. Although this is no strict requirement, you are encouraged to follow the same convention when contributing your own modules.

### Styles

Modules should define a single entrypoint for their stylesheets in `assets/scss/{MODULE}`, replacing `{MODULE}` with the name of the module **without** the `mod-` prefix. Even if the module uses plain {{< abbr CSS >}} files, the entrypoint should have the `.scss` extension to ensure the file is transpiled correctly. The additional source files should be mounted into `assets/scss/modules/{MODULE}/`. You can set the value `showSCSS` to `true` in the `debugging` section of the site's parameters to show which files are processed in which order.

### Scripts

JavaScripts should be mounted in `assets/js/modules/{MODULE}/`. Hinode bundles these files into a single script if the module is a [core module]({{% relref "../configuration/modules" %}}). Be aware that the script files within the module are processed alphabetically, should you have any interdependencies in your scripts. You can set the value `showJS` to `true` in the `debugging` section of the site's parameters to show which files are processed in which order.

## Automation

Hinode modules use GitHub actions to keep dependencies up-to-date and to publish new releases automatically. Review the following sections how to configure dependency upgrades, how to automate Pull Requests merges, and how to publish new releases after each successful merge.

### Dependency upgrades

You can configure {{< link dependabot >}}Dependabot{{< /link >}} or set up a custom GitHub action to automatically upgrade your dependencies. The applicable approach depends whether you use npm packages or Hugo modules as your module source. Review the next two sections how to configure automated dependency upgrades.

#### npm package upgrades

{{< link dependabot >}}Dependabot{{< /link >}} automatically keeps the dependencies and npm packages used in your repository updated to the latest version. The Hinode module template includes a basic configuration that is enabled by default. It checks for any version updates on a daily basis. Additionally, it checks for updates to GitHub actiob every week. The configuration is defined in `.github/dependabot.yml` and includes a commit-message that is used for [release automation]({{% relref "#release-automation" %}}).

```yml
version: 2
updates:
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"
    open-pull-requests-limit: 10
  - package-ecosystem: npm
    directory: "/"
    schedule:
      interval: daily
    commit-message:
      prefix: fix
      include: scope
    versioning-strategy: increase
```

#### Hugo module upgrades

At this moment, {{< link dependabot >}}Dependabot{{< /link >}} has no support for Hugo modules yet (see {{< link dependabot_issue_6860 >}}feature request `#6860`{{< /link >}}). The Hinode module template provides a custom workflow in `.github/workflows/update.yml` to check for available Hugo module upgrades on a daily interval. It creates a Pull Request (PR) from a feature branch when it has found any upgrades. The workflow uses the {{< link create_pr >}}create-pull-request action from Peter Evans{{< /link >}} to ensure the PR includes commit messages that trigger the [semantic-release bot]({{% relref "#release-automation" %}}) (using the `fix` prefix).

```yml
name: Update Hugo Dependencies
on:
  workflow_dispatch:
# TODO: uncomment
#   schedule:
#     - cron: '0 3 * * *' # run daily at 03:00 AM
```

The workflow requires elevated privileges to your module repository. Create a fine-grained Personal Access Token (PAT) first. Set up the token in the `Developer settings` of your **Account** settings on GitHub. The token requires access to your module repository with the following permissions:

- Read and Write access to content (code) and pull requests

When done, head over `action secret` in the `security` section of the repository configuration. Create a new `Repository token` with the name `HUGO_MOD_PR` in your **repository** configuration and paste the PAT as content.

### Automated merges

GitHub's auto-merge feature automatically merges proposed Pull Requests (PRs) when all conditions have been met. This feature is especially helpful to merge dependency upgrades prepared by Dependabot (see the [dependency upgrades]({{% relref "#dependency-upgrades" %}}) section for more details). You are strongly encouraged to set up branch protection first, to prevent PRs from breaking your builds.

#### Automated testing

The Hinode module template provides a basic workflow to test the build. Uncomment the following lines in `.github/workflows/test.yml` to enable automated testing upon each PR or push submitted to the `main` branch. The workflow calls the `test` script defined in the repository's npm `package.json`. By default, it tests on the latest versions of macOS, Windows, and Ubuntu for the latest stable releases of Node.js (currently `v18` and `v20`).

```yml
name: Test
on:
  workflow_dispatch:
  # TODO: uncomment
  # push:
  #   tags:
  #     - v*
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]

[...]
```

#### Branch protection

Head over to `Branches` section within `Code and automation` of your repository configuration on GitHub. Create a new rule for your main branch. Hinode uses the following settings for the modules it maintains:

- Require a pull request before merging
- Require status checks to pass before merging
  - Require branches to be up to date before merging
{.tickmark}

Specify the test you defined previously as required status check. When using Hinode's default test, you would see six different checks (three platforms with two Node versions each).

> [!IMPORTANT]
> GitHub only displays selectable status checks when they have had an initial run, so be sure to run the test first. Also, the status checks are not automatically updated when the test script changes. You will need to manually update the status checks as required.

#### Automated merging

Set `Allow auto-merge` to enabled in the `general` section of your repository configuration. Next, click the button `Enable auto-merge` on any PR to actually enable the feature. Alternatively, you can enable the `.github/workflows/auto-merge.yml` workflow by adjusting the comments:

```yml
name: Dependabot auto-merge
on: pull_request_target

permissions:
  pull-requests: write
  contents: write

jobs:
  review-dependabot-pr:
    runs-on: ubuntu-latest
    # TODO: to enable auto-merge remove first if-statement and uncomment second if-statement
    if: false
    # if: ${{ github.event.pull_request.user.login == 'dependabot[bot]' }}
```

### Release automation

The Hinode module template provides a basic workflow to automate releases. Uncomment the following lines in `.github/workflows/release.yml` to enable automated releases upon each merge to the `main` branch.

```yml
name: Release
on:
  workflow_dispatch:
  # TODO: uncomment
  # push:
  #   branches:
  #     - main
```

The workflow uses the {{< link semantic-release >}}semantic-release bot{{< /link >}} to automate the creation and publication of releases upon each merge to the main branch. The bot updates the repository content, such as new distribution files added by the `postinstall` npm script. It also scans all commit messages and determines the type of release. Finally, it publishes a new release with auto-generated release notes.

Hinode uses the {{< link conventional_commit >}}Conventional Commits{{< /link >}} specification. In brief, add the following prefixes to your commit messages to determine the type of release. You can also run `npx git-cz` from the terminal to help prepare the commit message.

- `feat!:` A breaking change (creates a new major release)
- `feat:` A new feature (creates a new minor release)
- `fix:` A bug fix (creates a new patch release, also triggered by [Dependabot upgrades]({{% relref "#npm-package-upgrades" %}}))
- `chore:` Changes to the build process or auxiliary tools and libraries such as documentation generation (does not trigger a new release)

The workflow requires two secrets within your repository. Add them as `action secret` in the `security` section of the repository configuration.

- `SEMANTIC_RELEASE_GIT`

  The bot requires elevated privileges to your module repository. Create a fine-grained Personal Access Token (PAT) first. Set up the token in the `Developer settings` of your **Account** settings on GitHub. The token requires access to your module repository with the following permissions:

  - Read access to actions, commit statuses, metadata, and pull requests
  - Read and Write access to content (code) and issues

  When done, create a new `Repository token` with the name `SEMANTIC_RELEASE_GIT` in your **repository** configuration and paste the PAT as content.

- `NPM_TOKEN`

  The bot uses npm to automatically update the version defined in `package.json` and `package-lock.json`. You will need to publish your module to npm first. You can use `npm publish` from the command line to authenticate yourself with the npm server and to create a new package if needed. On npm, go to the `Access tokens` menu below the avatar of your personal account.
  
  Click on the button `Generate New Token` and select `Granular Access Token`. Assign read and write permissions to the module package and click on `Generate token`. Next, create create a new `Repository token` with the name `NPM_TOKEN` in your **repository** configuration on GitHub and paste the npm token as content.

## Troubleshooting

Hugo modules have several constraints to work properly. The below overview provides some common challenges and how to overcome them.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< accordion class="accordion-theme accordion-flush" >}}
  {{< accordion-item header="The required distribution files are unavailable" >}}
    Hugo modules use the latest available release on GitHub, or the most recent HEAD of the default branch otherwise. However, not all repositories maintain their distribution files as part of version control or their GitHub release assets. One such example is the {{</* link leaflet >}}Leaflet library{{< /link */>}}. The repository does not include the compiled JavaScript, but only its source files. As a workaround, the {{</* link repository_mod_leaflet >}}Leaflet module{{< /link */>}} downloads the npm package instead and copies the required files in a `postinstall` script.
  {{< /accordion-item >}}
  {{< accordion-item header="The available releases do not adhere to semantic versioning" >}}
    Hugo requires repositories to use a consistent semantic versioning pattern when tagging their releases. In case a repository has changed its pattern, Hugo will not detect the latest version correctly. One such example is the {{</* link fontawesome >}}Font Awesome library{{< /link */>}}. It changed its release pattern from `v4.x.y` to `Release 5.x.y` (notice the drop of the `v` prefix). As a result, Hugo only downloads the old `v4.x.y` release. A workaround is to create a fork for version 6.x only and to use this as a source instead. This requires periodic synchronization of the fork though. Another approach is to use the npm release of Font Awesome instead and to mount the required files. This is the approach taken by the {{</* link repository_mod_fontawesome >}}Font Awesome module{{< /link */>}}.
  {{< /accordion-item >}}
  {{< accordion-item header="The Hugo modules are not updated by Dependabot" >}}
    {{</* link dependabot >}}Dependabot{{< /link */>}} automatically keeps the dependencies and packages used in your repository updated to the latest version. However, the current version does not recognize Hugo modules. Set up a custom workflow instead, such as described in [Hugo module upgrades]({{% relref "#hugo-module-upgrades" %}}).
  {{< /accordion-item >}}
  {{< accordion-item header="The local installation of Hugo modules fails" >}}
    Hugo provides a configuration option to replace a remote module with a local folder to simplify development and testing. For example, the {{</* link repository_mod_flexsearch >}}FlexSearch module{{< /link */>}} uses a module replacement in the file `exampleSite/hugo.toml`. The replacement tells Hugo to use the module code of the parent folder, instead of downloading the remote release assets. However, if the module `mod-flexsearch` uses other Hugo modules itself (so-called transitive dependencies), Hugo will throw an error `Error: failed to load modules`. Vendor your modules with `hugo mod vendor` to fix this issue.

```toml
[module]
    replacements = 'github.com/gethinode/mod-flexsearch -> ../..'
```

  {{< /accordion-item >}}
  {{< accordion-item header="The Hugo modules appear incomplete when installed or updated" >}}
    You might have an issue with your Hugo module cache. Certain operating systems such as macOS have a volatile cache system, that is modified when your machine has restarted or was recently suspended. Try running `hugo mod clean` to clear the Hugo module cache and then rerun `hugo mod get -u`.
  {{< /accordion-item >}}
{{< /accordion >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
title: Overview
description: Configure and customize Hinode to your liking using modules, npm, and mounted folders.
date: 2023-08-14
aliases:
  - "/docs/advanced-settings/"
  - "/advanced-settings/"
layout: docs
---

As a theme for Hugo, Hinode is highly configurable and customizable. Hinode utilizes {{< link hugo_modules >}}Hugo modules{{< /link >}} to provide a flexible and extensible modular framework. In addition, Hinode supports {{< link npm >}}npm{{< /link >}} to automate several tasks related to development and deployment. The below paragraphs explain the key concepts.

## Hugo modules

Hinode fully supports {{< link hugo_modules >}}Hugo modules{{< /link >}} to provide a flexible and extensible modular framework. These modules provide one or more of the seven component types defined in Hugo: `static`, `content`, `layouts`, `data`, `assets`, `i18n`, and `archetypes`. Powered by Go modules, Hugo verifies if a module is up-to-date and downloads the latest release if needed. This approach is compatible with any repository hosted on GitHub and is not exclusive to Hugo modules only.

> [!NOTE]
> Hugo has several requirements for the modules to work correctly in all scenarios. Review the [module development troubleshooting section]({{% relref "module-development#troubleshooting" %}}) to familiarize yourself with them.

Hinode uses Hugo modules to provide a flexible and extensible modular framework. Modules can be fully integrated into the main site or be included on a page-by-page basis. Core modules are fully integrated with the site's stylesheet and bundled JavaScript files. The stylesheet and scripts of optional modules are loaded on a specific page only to minimize overhead. Refer to the [modules]({{% relref "../configuration/modules" %}}) section for more details.

## Mounted folders

Hugo supports the {{< link hugo_mounts >}}mounting of folders{{< /link >}} since version 0.56.0. Hinode takes advantage of this feature to create a virtual file system, combining assets from multiple sources. Many of the predefined Hinode modules use mounted folders to expose relevant content and to standardize the folder structure. Take a look at the configuration of {{< link repository_mod_bootstrap >}}Hinode's Bootstrap module{{< /link >}}. The configuration uses the repository `github.com/twbs/bootstrap` as module source and exposes the SCSS files and bundled JavaScript file. These files are combined with the module's own files defined in the `assets` folder.

> [!IMPORTANT]
> When you add a mount, the default mount for the concerned target root is ignored: be sure to explicitly add it.

```toml
[module]
  [[module.mounts]]
    source = 'assets'
    target = 'assets'
  [[module.imports]]
    path = "github.com/twbs/bootstrap"
  [[module.imports.mounts]]
    source = "dist/js"
    target = "assets/js/modules/bootstrap"
    includeFiles = "*.bundle.js"
  [[module.imports.mounts]]
    source = "scss"
    target = "assets/scss/modules/bootstrap"
```

## npm packages

Hinode supports npm packages in addition to Hugo modules. These packages provide scripts to automate several tasks related to testing and deployment. Several Hinode modules use npm behind the scenes to tacke some of the constraints of Hugo modules (see [module development]({{% relref "module-development" %}}) for more details). Both the {{< link repository >}}main theme{{< /link >}} and {{< link repository_template >}}template{{< /link >}} packages of Hinode are defined in the file `package.json` in the repository root. The extract below defines the key elements of the package configuration. The `name` is a unique identifier to identify the {{< link package_npm >}}package on npm{{< /link >}}. The `version` tag uses {{< link semver >}}semantic versioning{{< /link >}}, consisting of a `MAJOR` version, `MINOR` version, and `PATCH` version.

The other two sections of interest are `devDependencies` and `otherDependencies`. As an Hugo theme, Hinode does not require any packages in production. However, Hinode defines several scripts that simplify or automate several tasks, such as linting, testing, and purging of stylesheets. The Hugo binary is installed as version-controlled dependency too. This ensures the build process is transparent and traceable, which simplifies debugging. Please refer to the [commands]({{% relref "commands" %}}) section to review the various npm commands available.

```yml
{
    "name": "@gethinode/hinode",
    "version": "0.16.0",
    "scripts": {
        [...]
        "lint:markdown": "markdownlint-cli2 \"*.md\" \"content/**/*.md\"",
    },
    [...]
    "devDependencies": {
        [...]
        "hugo-bin": "^0.111.0",
        "markdownlint-cli2": "^0.8.1",
    },
    "hugo-bin": {
        "buildTags": "extended"
    }
}
```


---

---
title: Partial development
description: Develop custom partials and shortcodes following Hinode's coding conventions.
date: 2024-01-03
layout: docs
---

Hinode supports more than 30 shortcodes. Many of these shortcodes wrap an predefined Bootstrap component, such as the {{< link "docs/components/button" />}} or {{< link "docs/components/tooltip" />}}. Custom shortcodes include a {{< link "docs/components/command-prompt" />}}, {{< link "docs/components/image" />}}, and {{< link "docs/components/timeline" />}}. Some of these components are maintained in a separate module, such as the {{< link "docs/components/animation" />}} or {{< link "docs/components/map" />}}. Hinode follows several conventions to standardize and streamline the development of shortcodes and partials. You are encouraged to use the same conventions, especially when contributing your own code for sharing.

## Shared partials

Hugo supports two kinds of reusable components, being partials and shortcodes. A shortcode can be referenced from within content files, such as Markdown. Partials can be referenced by layout files, other partials, and shortcodes too. You cannot reference a shortcode from a partial though. To enable reuse, Hinode has shifted the bulk of the implementation of many of its shortcodes to separate partials. These partials are maintained in the `layouts/partials/assets` folder. The related shortcode then simply references the partial.

As an example, consider the implementation of the {{< link "docs/components/breadcrumb" />}}. Hinode adds a breadcrumb to all pages (except the homepage) if enabled in the {{< link "docs/configuration/navigation#basic-configuration" >}}site parameters{{< /link >}}. The implementation is available in `layouts/partials/assets/breadcrumb.html`. The same component is also exposed as a shortcode, so it can be called from within a content page. The shortcode file `layouts/shortcodes/breadcrumb.html` includes the following statement to invoke the partial. The `page` argument passes the current page context to the underlying partial:

```go-template
{{ partial "assets/breadcrumb.html" (dict "page" .page) }}
```

## Nested shortcodes

Several shortcodes, such as the {{< link "docs/components/accordion" />}} and {{< link "docs/components/carousel" />}}, support the nesting of elements. For example, you can group multiple cards to align their heights. To enhance security, {{< link "docs/content/content-management#mixed-content" >}}Hinode does not process raw HTML content by default{{< /link >}}. However, the parent shortcode `card-group` does need to further process the HTML output generated by the individual cards. To facilitate this, Hinode uses {{< link "hugo_scratch" >}}scratch variables{{< /link >}} to pass trusted output from a child to its parent. These scratch variables are not accessible from within the content page, thus shielding them from any unwanted input.

Take a look at the `card` shortcode. It generates HTML content by invoking the underlying partial. If a parent is available (such as a `card-group` shortcode), it redirects or appends the partial output to the scratch variable `inner`. When no parent is available, the partial output is written to the default output stream instead. The partial output is trusted (note: the actual content processed as input by the `card` partial is **not trusted**) with the `safeHTML` pipeline instruction.

```go-template
{{ $output := partial "assets/card.html" (dict [...]) }}
{{ with .Parent }}
    {{ $current := .Scratch.Get "inner" }}
    {{ if $current }}
        {{ .Scratch.Set "inner" (print $current $output) }}
    {{ else }}
        {{ .Scratch.Set "inner" $output }}
    {{ end }}
{{ else }}
    {{ print $output | safeHTML }}
{{ end }}
```

Next, the parent `card-group` shortcode reads the scratch variable `inner` and passes this as an argument to the `card-group` partial. Each of the child `card` shortcodes should have processed the inner content. If any content remains, the `card-group` shortcode raises a warning and skips this input for further processing.

```go-template
{{ $inner := .Scratch.Get "inner" }}
{{ $input := trim .Inner " \r\n" }}
{{ if $input }}
    {{ $input = replace $input "\n" "\n  " }}
    {{ warnf "Unexpected inner content: %s\r\n      %s" .Position $input }}
{{ end }}

{{ partial "assets/card-group.html" (dict "page" .Page "cards" $inner [...]) }}
```

## Argument validation

{{< release version="0.22.0" >}}

Most shortcodes support multiple arguments to configure their behavior and to refine their appearance. These shortcodes share many of these arguments with an underlying partial. Hinode uses a standardized approach to validate these arguments. All arguments are formally defined in a separate data structure file. Hinode uses the {{< abbr YAML >}} format by default, although several formats are supported. The partial `utilities/IsInvalidArgs.html` (provided by the {{< link "repository_mod_utils" >}}mod-utils module{{< /link >}}) then uses this specification to validate all arguments. Refer to the documentation to review the {{< link "docs/components/args#data-format" >}}supported data format{{< /link >}}.

Let's consider the following example. The {{< link "docs/components/toast" />}} shortcode displays a dismissable message in the bottom-right corner of the screen. We can trigger it by assigning its unique identifier to a button.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button toast="toast-example-1" */>}}Show toast{{</* /button */>}}

{{</* toast id="toast-example-1" header="First title" */>}}This is a toast message{{</* /toast */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

The toast shortcode displays the message `This is a toast message` provided as inner input. Additionally, it supports the following arguments:

{{< args structure="toast" group="shortcode" >}}

The toast shortcode invokes the underlying partial to render the actual HTML output. The partial supports similar arguments, but expects the inner content to be passed as argument `message` instead. The following file formalizes these specifications:

{{< file path="./_vendor/github.com/gethinode/hinode/data/structures/toast.yml" full="false" >}}

The shortcode uses the following code to validate its arguments, excluding the `message` argument that belongs to the `partial` group. When an error occurs, the shortcode logs an error message with a reference to the context `.Position`.

```go-template
{{ if partial "utilities/IsInvalidArgs.html" (dict "structure" "toast" "args" .Params "group" "shortcode") }}
    {{ errorf "Invalid arguments: %s" .Position -}}
    {{ $error = true }}
{{ end }}
```

The underlying partial uses a similar call. Notable differences are the validated arguments (`.` instead of `.Params`) and the `group` (`partial` instead of `shortcode`). Partials are not aware of their context, so a generic error is logged instead.

```go-template
{{ if partial "utilities/IsInvalidArgs.html" (dict "structure" "toast" "args" . "group" "partial") }}
    {{- errorf "partial [assets/toast.html] - Invalid arguments" -}}
    {{ $error = true }}
{{ end }}
```


---

---
title: Scripts
description: Bundle local and external JavaScript files by intent and rendering impact.
date: 2023-10-21
layout: docs
---

> [!IMPORTANT]
> Hinode release {{< release version="v0.27.0" short="true" type="link" >}} has overhauled the build pipeline of scripts and modules. The bundled files now support categorization by intent.

Hinodes bundles JavaScript files to optimize the page loading speed. By utilizing [Hugo modules]({{% ref "overview" %}}), referenced JavaScript files are automatically ingested and version controlled. Since release {{< release version="v0.27.0" short="true" type="link" >}}, Hinode also supports the grouping of scripts by their intent. Review the next sections to familiarize yourself with the build system.

## Types of integrations

Hinodes recognizes three types of integrations for JavaScript files. You can mount these files directly into Hugo's virtual file system, or use modules instead.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< accordion class="accordion-theme accordion-flush" >}}
   {{< accordion-item header="Critical" >}}
      Critical scripts are loaded immediately as part of the page header. The included scripts are considered vital for the initial page to render correctly and are blocking. For example, Hinode includes a script to toggle the site's [color mode]({{% relref "color-modes" %}}). It should be loaded before the page is being displayed to reduce screen flickering.
   {{< /accordion-item >}}
   {{< accordion-item header="Core" >}}
      Core scripts offer functionality that is used throughout the entire site. An example is the {{</* link bootstrap >}}Bootstrap{{< /link */>}} framework, which includes various scripts to provide interactive {{</* abbr UI */>}} elements. Core scripts are lazily loaded as part of the page's body to improve the initial page loading.
  {{< /accordion-item >}}
  {{< accordion-item header="Optional" >}}
      Optional scripts are only included on the pages that require them. An example is the {{</* link leaflet >}}Leaflet{{< /link */>}} module, that renders an interactive map. Optional scripts are lazily loaded similarly to core scripts, unless specified otherwise.
  {{< /accordion-item >}}
{{< /accordion >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Available script categories

In addition to their integration type, you can also bundle scripts by their intent category. You can use this intent category in combination with a {{< link "docs/configuration/cookie-consent" >}}cookie consent manager{{< /link >}} to dynamically load scripts in compliance with privacy regulations. Hinodes supports the following categories. Refer to the {{< link "docs/configuration/cookie-consent#available-categories" >}}cookie consent categories{{< /link >}} for more details.

- necessary
- functional
- analytics
- performance
- advertisement
- other

## Naming conventions

Hinode uses the following naming conventions for each type of script:

| Integration | Basename | Description |
|-----------------|-----------------------------------|-------------|
| **critical** | `critical.bundle` | Critical scripts are bundled by intent category. The target bundle's filename uses `critical.bundle` as basename and the category name as suffix. When the category is `other`, the suffix is omitted. Localized modules trigger a language code extension. |
| **core** | `core.bundle` | Core scripts are bundled similarly as critical scripts. The target bundle's filename uses `core.bundle` as basename. |
| **optional** | `<module name>` | Scripts that are part of an optional module are bundled by their module name and optional category. Similar to core scripts, optional scripts bundles can also receive a language code extension. |

## Integration approaches

Hinodes supports three types of integration approaches. The next paragraphs describe the available approaches in detail.

### JavaScript files

The main Hinode repository includes several scripts maintained within the `assets/js` folder. You can add (or mount) your own scripts to this folder to include them in the build pipeline. Hinode supports the following directories relative to the `assets` mount point:

| Category        | Match (glob pattern)              | Target bundle |
|-----------------|-----------------------------------|-------------|
| `other`         | `js/critical/*.js`                | `/js/critical.bundle.js` |
| `functional`    | `js/critical/functional/**.js`    | `/js/critical.bundle-functional.js` |
| `analytics`     | `js/critical/analytics/**.js`     | `/js/critical.bundle-analytics.js` |
| `performance`   | `js/critical/performance/**.js`   | `/js/critical.bundle-performance.js` |
| `advertisement` | `js/critical/advertisement/**.js` | `/js/critical.bundle-advertisement.js` |
| `core`          | `{js/*.js,js/vendor/**.js}`       | `/js/core.bundle.js` |

### Scripts embedded within a module

> [!NOTE]
> Review the {{< link "module-development" >}}module development guidelines{{< /link >}} to see the detailed mounting requirements for the scripts embedded in a module.

Hinodes uses {{< link "docs/configuration/modules/" >}}modules{{< /link >}} to include features and functionality as needed. This reduces overhead and improves performance. Each module provides a default integration configuration. You can override these settings in your site's parameters. The following example illustrates the default configuration of the {{< link google_analytics >}}Google Analytics{{< /link >}} module. Refer to the {{< link "docs/configuration/modules/#configuring-modules" >}}module configuration {{< /link >}} to see the available settings and values.

```toml
[params.modules.GoogleAnalytics]
  integration = "core"
  state = "async"
  category = "analytics"
```

### External scripts

> [!CAUTION]
> In general, you are encouraged to embed external scripts within a module. This ensures the scripts are bundled together and are version controlled. Only use external links when absolute necessary.

You can also reference an external script by including its url in the module configuration. These external scripts are not bundled but included as reference instead. The module for {{< link cookieyes >}}CookieYes{{< /link >}} uses the following configuration to ensure the cookie script is always loaded first:

```toml
[params.modules.cookieyes]
    integration = "critical"
    url = "https://cdn-cookieyes.com/client_data/{ID redacted}/script.js"
```

## Rendering example

The following example illustrates the files as used by the {{< link "hinode_demo_components" >}}components page on the demo site{{< /link >}}. The integrity hashes have been omitted for clarity.

1. The page implements cookie consent management by {{< link cookieyes >}}CookieYes{{< /link >}} as critical module using an external url.
2. Next, two critical script bundles are included. These scripts use the match patterns `js/critical/functional/**.js` and `js/critical/*.js` respectively.
3. In this example, no core external URLs are used, however, they would be added first in the final part of the page body.
4. Instead, two core bundles are included. The file `js/core.bundle-analytics.en.min.js` uses the script defined in the {{< link google_analytics >}}Google Analytics{{< /link >}} module. The other core file uses a mix of core modules (such as {{< link bootstrap >}}Bootstrap{{< /link >}}, {{< link flexsearch >}}FlexSearch{{< /link >}}, and {{< link fontawesome >}}Font Awesome{{< /link >}}) and scripts defined in the `assets/js` folder (without nesting).
5. Lastly, the page loads {{< link leaflet >}}Leaflet{{< /link >}}, {{< link lottie >}}Lottie{{< /link >}}, and {{< link simple_datatables >}}Simple Datatables{{< /link >}} as optional modules.

```html {hl_lines=[4,7,16,18,22]}
<!doctype html>
<html lang=en class=no-js>
  <head>
    1) External, critical URLs are referenced first
    <script src="https://cdn-cookieyes.com/client_data/{ID redacted}/script.js"></script>

    2) Critical bundle files are included next
    <script src="/js/critical.bundle-functional.js" data-category="functional"></script>
    <script src="/js/critical.bundle.js"></script>
    [...]
  </head>

  <body>
    [...]

    3) External, core URLs are referenced here (N/A in this example)

    4) Core bundle files are referenced near the body closing tag
    <script src=/js/core.bundle-analytics.en.min.js data-category="analytics" async></script>
    <script src=/js/core.bundle.en.min.js async></script>

    5) Optional module file are referenced last
    <script src=/js/leaflet.min.js></script>
    <script src=/js/lottie.min.js></script>
    <script src=/js/simple-datatables.js async></script>
  </body>
</html>
```


---

---
title: Server headers
description: Configure the server headers to refine the content security policy.
date: 2024-10-25
layout: docs
aliases:
  - "/docs/server/"
---

{{< release version="v0.27.0" >}}

Hinode uses strict security policies to ensure the site is {{< link observatory >}}secure by default{{< /link >}}. If you want to include external resources, such as images and videos, you will need to explicitly add these sources to the server headers. If omitted, the browser will refuse to load these resources, resulting in broken links or missing elements. Review the next sections to learn how to configure your policies correctly.

## Defining a custom output format

> [!TIP]
> The {{< link hugo_server >}}server header configuration used by Hugo{{< /link >}} is similar to the configuration supported by Netlify. We can therefore reuse the same template code to configure both environments. This simplifies development and testing, and ensures the local development environment and production environment are comparable.

Since {{< release version="v0.27.0" short="true" type="link" >}}, Hinode includes {{< link "hinode_csp" >}} a module to generate the server headers automatically{{< /link >}}. It uses a feature from Hugo that enables the definition of a {{< link "hugo_custom_output" >}}custom output format{{< /link >}}. The main Hinode repository defines two custom output formats. The first one generates the server headers for a local web server provided by Hugo. The second output format defines a similar configuration for the deployment to Netlify.

Add the following configuration to your main configuration (usually `hugo.toml`). The setting `root = true` ensures the output files are placed in the root of the build folder. Otherwise, Hugo would create a separate output for each one of the defined site languages.

{{< docs name="headers" file="config/_default/hugo.toml" >}}

Next we will link the two output formats `server` and `netlify` to the home page. By default, Hinode also generates an `RSS` and `REDIR` file for the site. See the the chapter about {{< link "server-side-redirection" >}}server-side redirection{{< /link >}} for more information.

{{< docs name="outputs" file="config/_default/hugo.toml" >}}

## Generating the server headers

By default, Hinode includes {{< link "hinode_csp" >}} a module to generate the server headers automatically{{< /link >}}. The module includes two files in the `layouts` folder that hook the two custom outfut formats to the main index page (which is the site's homepage). The two files are named `layouts/index.netlify.toml` and `layouts/index.server.toml`.

Each file calls a custom partial called `assets/server-headers.html`, which is defined in the {{< link "hinode_csp" >}} CSP module{{< /link >}}. Hinode mounts the required files automatically. The partial requires one parameter called `header`, which links the partial to a configuration that we will define in the next paragraph.

```go-template
{{ partial "assets/server-headers.html" (dict "header" (path.BaseName .RelPermalink)) }}
```

## Configuring the default server headers

By default, Hinode generates the server headers using a default policy. Click on the tab below to review the default settings.

{{< file path="./_vendor/github.com/gethinode/hinode/data/server.toml" full="false" >}}

You can merge the generated file with another input file. The supported formats are `JSON`, `TOML`, `YAML`, and `XML`. For example, you could include additional settings for the deployment to Netlify. Include the settings in your `data` folder and add the relative path to the `source` parameter of your header configuration. For example, the following configuration merges the file `data/netlify.toml` with the Netlify server headers. Add the configuration to your site's parameters (e.g. `hugo.toml`).

```toml
[params.headers]
  [params.headers.netlify]
    source = "netlify.toml"
```

## Configuring custom 404 pages

When your site uses multiple languages, you may {{< link hugo_404 >}}run into an issue with your custom `404` page{{< /link >}}. Hugo does not render the `404` page correctly when `defaultContentLanguageInSubdir` is set to `true` in your site configuration (usually `hugo.toml`). You can include the necessary redirects in `data/server.toml`. This will fix the issue for the hugo server and Netlify server. The following example is used by the {{< link hinode_demo >}}Hinode demo site{{< /link >}}, which is available in three languages:

```toml
[[redirects]]
from = '/nl/*'
to = '/nl/404.html'
status = 404

[[redirects]]
from = '/en/*'
to = '/en/404.html'
status = 404

[[redirects]]  # Default language should be last.
from = '/*'
to = '/en/404.html'
status = 404
```

## Merging module policies

Hinode merges the Content Security Policies of each configured module. You can define the policies as regular key-value pairs, using arrays for the directives and domains. The {{< link csp >}}Content Security Policy Quick Reference Guide{{< /link >}} provides an overview of available directives and settings. Hinode includes the following policies by default.

```toml
[params.modules.hinode.csp]
    style-src = ["www.youtube.com"]
    font-src = ["fonts.gstatic.com"]
    frame-src = [
        "player.cloudinary.com",
        "www.youtube-nocookie.com",
        "www.youtube.com"
    ]
    img-src = [
        "data:",
        "*.imgix.net",
        "*.imagekit.io",
        "*.cloudinary.com",
        "i.ytimg.com"
    ]
```

You can define additional policies for each included module to improve the maintainability of your site configuration.  For example, the module Google Analytics adds the following directives:

```toml
[params.modules.GoogleAnalytics.csp]
  script-src = [
      "*.google-analytics.com",
      "*.googletagmanager.com"
  ]
  connect-src = [
      "*.google-analytics.com",
      "*.analytics.google.com",
      "*.googletagmanager.com"
  ]
  img-src = [
      "*.google-analytics.com",
      "*.googletagmanager.com"
  ]
```

## Deploying the generated server headers

When building your Hinode site, Hugo will now automatically generate two additional output files that include the latest server headers. To test them locally, we need to ensure the Hugo servers picks up the right configuration. We will use an npm script to automate this task.

First, we will define a new hugo build command `build:headers` as npm script. It uses a new feature introduced in Hugo v0.124.0 to use {{< link hugo_segments >}}build segmentation{{< /link >}}. This reduces the build time. Add the following configuration to your site configuration:

{{< docs name="segments" file="config/_default/hugo.toml" >}}

As we cannot mount files into the `config` folder or base folder, we need to copy the generated files ourselves. The following script uses the package `cpy-cli` to copy the generated files cross platform.

```json
  "scripts": {
    "build:headers": "hugo --renderSegments headers -d prebuild && cpy prebuild/netlify.toml ./ --flat && cpy prebuild/server.toml config/_default/ --flat",
  },
  "devDependencies": {
    "cpy-cli": "^5.0.0",
  },
```

Test the npm script on your local machine to validate it is working correctly.

{{< command >}}
npm run build:headers
(out)Start building sites ...
(out)hugo v0.134.3
(out)
(out)WARN  Generating server headers: /netlify.toml
(out)WARN  Generating server headers: /server.toml
(out)
(out)                   | EN
(out)-------------------+------
(out)  Pages            |   2
(out)  Paginator pages  |   0  
(out)  Non-page files   |   0  
(out)  Static files     | 114  
(out)  Processed images |   0  
(out)  Aliases          |   0  
(out)  Cleaned          |   0  
(out)
(out)Total in 281 ms
{{< /command >}}

Add the `/prebuild` folder to your `.gitignore` file to prevent polluting your source code repository.


---

---
title: Server-side redirection
description: Enable server-side redirection (Netlify only)
date: 2024-10-09
layout: docs
---

Hugo supports {{< link hugo_alias >}}client-side redirection using aliases{{< /link >}}. In this approach, the browser receives an instruction to redirect to a new URL when visiting the initial page. We can instruct the server to redirect the URL instead, thus safing an additional roundtrip.

Hinode has defined a template in {{< link repository_redir >}}layouts/index.redir{{< /link >}} to automatically generate server-side redirection rules for **Netlify**. When you add the status code `200` to such a rule, the {{< link netlify_rewrite >}}redirection becomes a rewrite{{< /link >}}. In a **rewrite**, the URL in the visitor's address bar remains the same, while the content is fetched from a different location behind the scenes. We will use this mechanism to fetch the content from the branch site.

The below settings creates a file `public/_redirects` when building the site. It is suggested to add these settings to your **production configuration** in `config/production/hugo.toml`. The setting `disableAliases` disables all client-side redirection rules. Instead, the `REDIR` output generates all redirection rules for the server, including rewrites.

```toml
disableAliases = true

[outputFormats.REDIR]
mediaType = "text/netlify"
baseName = "_redirects"
isPlainText = true
notAlternative = true

[mediaTypes."text/netlify"]
delimiter = ""

[outputs]
home = ["HTML", "RSS", "REDIR", "netlify", "server"]
```


---

---
title: Styles
description: Use extensible Sass files to generate the stylesheets for your website.
date: 2024-08-14
layout: docs
---

Hinode uses Sass files to take advantage of variables, maps, and functions to generate the cascading style sheets of the website. By utilizing [Hugo modules]({{% ref "overview" %}}), Bootstrap's source Sass file are automatically ingested and kept up to date.

## Build pipeline

> [!NOTE]
> Hinode has added support for the Dart Sass transpiler in release {{< release version="v0.20.0" short="true" type="link" >}}. The default libsass transpiler has been {{< link hugo_sass >}}deprecated in favor of Dart Sass{{< /link >}}, but is still widely used. Hinode uses the libsass transpiler by default. Review the {{< link "docs/configuration/layout#extended-configuration" >}}build configuration{{< /link >}} on how to change the transpiler being used.

Hinodes uses Hugo modules and mounted folders to create a flexible virtual file system that is automatically kept up to date. Review the [overview]({{% ref "overview" %}}) for a detailed explanation. The build pipeline of the stylesheet consists of six steps.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< nav type="tabs" id="tabs-1" >}}
  {{< nav-item header="libsass" show="true" >}}

1. **Initialize the Sass variables**

   Hugo {{</* link hugo_release_v0_109_0 >}}v0.109.0{{< /link */>}} introduced a convenient way to {{</* link hugo_vars >}}initialize Sass variables from your templates{{< /link */>}}. Hinode initializes several variables in the file `layouts/partials/head/stylesheet.html`. For example, the primary theme color is available as `$primary`.

2. **Define the Sass entrypoint**

   The main entrypoint for the Sass files is defined in `assets/scss/app.scss`. It supports Hugo templating. For example, the snippet below conditionally imports font face definitions when using a local font path.

   ```go-html-template
   {{ if (not (hasPrefix (lower site.Params.style.themeFontPath) "http")) }}
      @import "theme/fonts.scss";
   {{ end }}
   ```

3. **Import the Sass files of core modules**

   Hinode automatically adds the content of each core module's Sass entrypoint to a virtual copy of the `assets/scss/app.scss` file, unless they are referenced in the [excludeSCSS setting]({{%/* relref "../configuration/modules#configuring-modules" */%}}). Hinode expects a file `assets/scss/{MODULE NAME}.scss` for each core module. The referenced files are usually placed in `assets/scss/modules/{MODULE NAME}/`.

4. **Override and expand the Sass configuration**

   The import order of the source files defines which variables and functions to use. In Sass, the first definition of a variable or function takes precedence. For example, to override the setting for the variable `$primary`, it needs to be defined prior to Bootstrap's definition in `_variables.scss`.

5. **Transpile the Sass files**

   The partial `partials/head/stylesheet.html` reads the application entrypoint, configures the `node_modules` folder as import path, and transpiles the stylesheet into a single file `main.css`. In production mode, the output is minified and linked to with a {{</* link hugo_fingerprint >}}fingerprint{{< /link */>}}.

6. **Link to the stylesheet in the base layout**

   Hinode's base layout `layouts/_default/baseof.html` imports the generated stylesheet in the header section of the webpage via the partial `layouts/partials/head/head.html`.

  {{< /nav-item >}}
  {{< nav-item header="dartsass" >}}

1. **Initialize the Sass variables**

   Hugo {{</* link hugo_release_v0_109_0 >}}v0.109.0{{< /link */>}} introduced a convenient way to {{</* link hugo_vars >}}initialize Sass variables from your templates{{< /link */>}}. Hinode initializes several variables in the file `layouts/partials/head/stylesheet.html`. For example, the primary theme color is available as `$primary`.

2. **Define the Sass entrypoint**

   The main entrypoint for the Sass files is defined in `assets/scss/app-dart.scss`. It supports Hugo templating.

3. **Import the Sass files of core modules**

   Hinode automatically adds the content of each core module's Sass entrypoint to a virtual copy of the `assets/scss/app-dart.scss` file, unless they are referenced in the [excludeSCSS setting]({{%/* relref "../configuration/modules#configuring-modules" */%}}). Hinode expects a file `assets/scss/{MODULE NAME}.scss` for each core module. The referenced files are usually placed in `assets/scss/modules/{MODULE NAME}/`.

4. **Override and expand the Sass configuration**

   For backwards compatibility, the various Sass files still use `@import` statements. In this setup, the first definition of a variable or function takes precedence. For example, to override the setting for the variable `$primary`, it needs to be defined prior to Bootstrap's definition in `_variables.scss`.

5. **Transpile the Sass files**

   The partial `partials/head/stylesheet.html` reads the application entrypoint, configures the `node_modules` folder as import path, and transpiles the stylesheet into a single file `main.css`. In production mode, the output is minified and linked to with a {{</* link hugo_fingerprint >}}fingerprint{{< /link */>}}.

6. **Link to the stylesheet in the base layout**

   Hinode's base layout `layouts/_default/baseof.html` imports the generated stylesheet in the header section of the webpage via the partial `layouts/partials/head/head.html`.

  {{< /nav-item >}}
{{< /nav >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Example

The below Sass file defines a skeleton configuration for the main entrypoint. The full configuration is defined in `assets/scss/app.scss` (`libsass`) and `assets/scss/app-dart.scss` (`dartsass`) respectively.

{{< nav type="tabs" id="tabs-2" >}}
  {{< nav-item header="libsass" show="true" >}}

```scss
// 1) Define template variables (linking to Hugo config)
@import "hugo:vars";

// 2) Include default variable overrides
@import "common/variables.scss";

// 3) Import Bootstrap configuration (mounted by core Bootstrap module)
@import "bootstrap.scss";

// 4) Import Hinode theme styles
@import "components/blockquote.scss";

// 5) Import custom theme fonts and styles
@import "theme/fonts.scss";
@import "theme/theme.scss";

// 6) Import Bootstrap utilities API (mounted by core Bootstrap module)
@import "modules/bootstrap/utilities/api";

// 7) Import additional modules
// Process stylesheet entrypoints for each configured module (w/o excludeSCSS)
```

  {{< /nav-item >}}
  {{< nav-item header="dartsass" >}}

```scss
// 1) Define template variables (linking to Hugo config)
@use "hugo:vars" as

// 2) Include default variable overrides
@import "common/variables-dart.scss";

// 3) Import Bootstrap configuration (mounted by core Bootstrap module)
@import "bootstrap-dart.scss";

// 4) Import Hinode theme styles
@import "components/blockquote.scss";

// 5) Import custom theme fonts and styles
@if h.$import-fonts {
    @include meta.load-css(theme/fonts);
}

@import "theme/theme.scss";

// 6) Import Bootstrap utilities API (mounted by core Bootstrap module)
@import "modules/bootstrap/utilities/api";

// 7) Import additional modules
// Process stylesheet entrypoints for each configured module (w/o excludeSCSS)
```  {{< /nav-item >}}
{{< /nav >}}

## Optional module files

Hinode processes the Sass files that are part of an optional module one at a time. The entrypoint of each module is expected to be found in `assets/scss/{MODULE NAME}.scss`. The transpiled output is included on a page-by-page basis.


---

---
author: Mark Dumay
title: Abbr
date: 2023-12-29
description: Use the abbr shortcode to show the long form of an abbrevitation.
layout: docs
icon: fas question
tags: component
---

## Overview

{{< release version="v0.19.0" >}}

Use the abbr shortcode to show the long form of an abbrevitation on hover. The abbreviation data is retrieved from a central data file. By default, the shortcode uses "data/abbr.yaml" with translation support.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* abbr HTML */>}}
{{</* abbr key="html" class="initialism" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports a single unnamed argument, which maps to the `key` argument. When using named parameters, the following arguments are supported:

{{< args structure="abbr" group="shortcode" >}}

## Data format

Define a file in the `data` folder that contains the abbreviation data. The format expects the following attributes:

| Attribute | Required | Description |
|-----------|----------|-------------|
| id        | Yes      | Required key of the abbeviation. Store the key in lower case to ensure it can be matched. |
| long      | Yes      | Required long form of the abbreviation. |

The following snippet defines three entries in `yml` format.

```yml
- id: css
  long: "Cascading Style Sheets"

- id: html
  long: "HyperText Markup Language"

- id: svg
  long: "Scalable Vector Graphics"
```


---

---
author: Mark Dumay
title: Accordion
date: 2023-12-29
description: Use the accordion shortcode to show a group of vertically collapsing and expanding items.
layout: docs
icon: fas chevron-down
tags: component
---

## Overview

Use the `accordion` shortcode to show a group of vertically collapsing and expanding items. Add `accordion-item` inner elements for each accordion item.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* accordion id="accordion-default" */>}}
  {{</* accordion-item header="Accordion Item #1" show="true" */>}}
    This is the first item's accordion body. It supports Markdown content. The item is shown by
    adding the value `show` to the `class` argument.
  {{</* /accordion-item */>}}
  {{</* accordion-item header="Accordion Item #2" */>}}
    This is the second item's accordion body. It too supports Markdown content.
  {{</* /accordion-item */>}}
  {{</* accordion-item header="Accordion Item #3" */>}}
    This is the third item's accordion body.
  {{</* /accordion-item */>}}
{{</* /accordion */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="accordion" group="shortcode" >}}

Add an inner `accordion-item` element for each item of the accordion. The `accordion-item` element supports the following arguments:

{{< args structure="accordion-item" group="shortcode" >}}

## Examples

Change the style of your accordion with class attributes and arguments.

### Flush

Add `.accordion-flush` to remove some borders and rounded corners to render accordions edge-to-edge with their parent container.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* accordion id="accordion-flush" class="accordion-flush" */>}}
  {{</* accordion-item header="Accordion Item #1" */>}}
    This is the first item's accordion body. It supports Markdown content. The item is shown by
    adding the value `show` to the `class` argument.
  {{</* /accordion-item */>}}
  {{</* accordion-item header="Accordion Item #2" */>}}
    This is the second item's accordion body. It too supports Markdown content.
  {{</* /accordion-item */>}}
  {{</* accordion-item header="Accordion Item #3" */>}}
    This is the third item's accordion body.
  {{</* /accordion-item */>}}
{{</* /accordion */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Always open

Set `always-open` to `true` to make accordion items stay open when another item is opened.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* accordion id="accordion-always-open" always-open="true" */>}}
  {{</* accordion-item header="Accordion Item #1" */>}}
    This is the first item's accordion body. It supports Markdown content. The item is shown by
    adding the value `show` to the `class` argument.
  {{</* /accordion-item */>}}
  {{</* accordion-item header="Accordion Item #2" */>}}
    This is the second item's accordion body. It too supports Markdown content.
  {{</* /accordion-item */>}}
  {{</* accordion-item header="Accordion Item #3" */>}}
    This is the third item's accordion body.
  {{</* /accordion-item */>}}
{{</* /accordion */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Alert
date: 2023-12-29
description: Use the alert shortcode to display a contextual feedback message.
layout: docs
icon: fas triangle-exclamation
tags: component
---

## Overview

Use the `alert` shortcode to display a contextual feedback message. The inner content is used as alert text.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* alert color="danger" */>}}
    A simple danger alert—check it out!
{{</* /alert */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="alert" group="shortcode" >}}

## Examples

Change the style of your accordion with arguments.

### Colored alert

As an example, the following shortcodes displays a simple alert for each theme color.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* alert color="primary" */>}}
    A simple primary alert—check it out!
{{</* /alert */>}}

{{</* alert color="secondary" */>}}
    A simple secondary alert—check it out!
{{</* /alert */>}}

{{</* alert color="success" */>}}
    A simple success alert—check it out!
{{</* /alert */>}}

{{</* alert color="danger" */>}}
    A simple danger alert—check it out!
{{</* /alert */>}}

{{</* alert color="warning" */>}}
    A simple warning alert-check it out!
{{</* /alert */>}}

{{</* alert color="info" */>}}
    A simple info alert—check it out!
{{</* /alert */>}}

{{</* alert color="light" */>}}
    A simple light alert—check it out!
{{</* /alert */>}}

{{</* alert color="dark" */>}}
    A simple dark alert—check it out!
{{</* /alert */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Dismissible alert

As an example, the following shortcode displays a dismissible alert.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* alert color="danger" dismissible="true" */>}}
    A dismissible alert—check it out!
{{</* /alert */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Alert with icon

As an example, the following shortcode displays an alert with an icon. The icon is resized to size `2x` and pulled to the left by default.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* alert color="danger" icon="fas triangle-exclamation" */>}}
    An illustrated alert—check it out!
{{</* /alert */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Alert of specific type

As an example, the following shortcode displays an informative alert with an icon.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* alert type="info" */>}}
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation
ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur
sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
est laborum.
{{</* /alert */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

As an example, the following shortcode displays a warning with an icon.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* alert type="danger" */>}}
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation
ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur
sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
est laborum.
{{</* /alert */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Animation
date: 2024-01-02
description: Use the animation shortcode to show an After Effects animation.
layout: docs
icon: fa circle-play
tags: component
modules: ["lottie"]
---

## Overview

{{< release version="v0.20.4" >}}

Use the animation shortcode to show an After Effects animation, powered by {{< link lottie >}}Lottie{{< /link >}}. The Lottie library supports animations that have been exported as JSON with Bodymovin. The animation uses vector graphics and is responsive. The shortcode is a simplified wrapper of the Lottie library that provides basic functionality. As an example, the following shortcode shows an animation that plays when hovering the mouse over it.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* animation data="animation/gatin.json" auto=false hover=true class="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="animation" group="shortcode" >}}

## Configuration

By default, animation support is optional. Be sure to include `lottie` in your [module configuration]({{% relref "../configuration/modules#configuring-modules" %}}) and [page frontmatter]({{% relref "../configuration/modules#enabling-optional-modules" %}}) as needed.

## Examples

Change the behavior of your animation with shortcode arguments.

### Default animation

Assign a valid path to `data` to provide a JSON file that contains the animation as input. The file should be stored in the `static` folder, or in one of its subfolders.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* animation data="animation/gatin.json" class="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Animation on hover

Set `auto` to false and `hover` to true to trigger the animation when hovering the mouse over it.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* animation data="animation/gatin.json" auto=false hover=true class="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Identification

Assign a specific identified to the animation by setting the `id` argument. The following example assigns the id `gatin-animation` to the animation.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* animation id="gatin-animation" data="animation/gatin.json" class="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Args
date: 2024-01-04
description: Use the args shortcode to generates a table of structured arguments.
layout: docs
icon: fas sliders
tags: component
---

## Overview

{{< release version="v0.22.0" >}}

Use the args shortcode to generates a table of structured arguments. The argument definitions are expected to be defined in a data file identified by a provided structure name.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* args "args" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports both unnamed and named arguments.

{{< args "args" >}}

## Data format

{{% comment %}}<!-- TODO: add args data format -->{{% /comment %}}
Define a file in the `data/structures` folder that contains the argument specifications.

### Supported attributes

The format supports the following attributes:

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Name | Required | Description |
|-----------|----------|-------------|
| name | yes | Argument name. |
| type | yes | Data type of the argument, either a primitive or complex type. |
| optional | | Flag to indicate if the argument is optional, defaults to false. |
| default | | Default value when no value is provided. |
| parent  | | Defines if the argument inherits a value from its parent, either `cascade` or `merge`. |
| release | | Points to the version in which the argument was released. See the {{< link "release" />}} shortcode for more details. |
| deprecated | | Points to the version in which the argument was deprecated. See the {{< link "release" />}} shortcode for more details. |
| comment | | Documentation about the argument. |
| options | | Conditional value requirements, pending data type. |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

### Supported primitive types

Several primitives are supported. The validation function uses these to test if the provided argument value conforms to the expected data type.

| Primitive | Description |
|-----------|-------------|
| bool      | Boolean, either `true` or `false`. The validation supports both quoted and unquoted values. Maps to the Hugo type `bool`. |
| string | Free format plain text. Maps to the Hugo type `string`. |
| int       | A whole number, including negative values. Optionally, specify the allowed value range using `options.min` and `options.max`. Maps to the Hugo type `int`. |
| float     | A fractional number, including negative values. Optionally, specify the allowed value range using `options.min` and `options.max`. Maps to the Hugo type `float64`. |
| select    | A single string value from a set of options. Specify the allowed values in `options.values`. Maps to the Hugo type `string`. |
| datetime  | A date with optional time value. |
| url       | A web address to a particular file or page. The address should include the protocol, hostname, and optional file name. Maps to the Hugo type `string`. |
| path      | Path to a local file or directory. By convention, paths that start with `/` are relative to the repository root. When used as source argument, the base directory may be mapped to one of Hugo's mount folders (e.g. `assets`, `data`, `content`, `static`). Windows paths are mapped to Unix-style paths using forward slashes. Maps to the Hugo type `string`. |

### Supported complex types

Any provided type not matching a primitive is considered a complex type. Type confirmation is tested with `printf "%T"`. For example, to validate if the page context is of the correct type, use `*hugolib.pageState`.

{{% comment %}}<!-- TODO: add example -->{{% /comment %}}

### Example file

The following file illustrates the definition of the `card` shortcode and partial.

{{< file path="data/structures/card.yml" full="true" show="false" >}}


---

---
author: Mark Dumay
title: Badge
date: 2023-12-29
description: Use the badge shortcode to enrich headings.
layout: docs
icon: fas envelope-circle-check
tags: component
---

## Overview

{{< release version="v0.19.0" >}}

Badges can be added to headings and buttons. The badge for a button is part of a [custom shortcode]({{% ref "button" %}} "custom shortcode"). The example below illustrates the shortcode for a heading.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
Example heading of size four {{</* badge title="New" */>}}
{.h4}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="badge" group="shortcode" >}}

## Examples

Use the badge shortcode to display a badge for a heading. See the Bootstrap {{< link bs_badge_heading >}}documentation{{< /link >}} for more information.

### Heading badges

Badges scale to match the size of the immediate parent element by using relative font sizing and em units. Use Hugo's {{< link hugo_goldmark >}}curly brackets syntax{{< /link >}} to apply a heading class.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
Heading 1 {{</* badge title="New" */>}}
{.h1}

Heading 2 {{</* badge title="New" */>}}
{.h2}

Heading 3 {{</* badge title="New" */>}}
{.h3}

Heading 4 {{</* badge title="New" */>}}
{.h4}

Heading 5 {{</* badge title="New" */>}}
{.h5}

Heading 6 {{</* badge title="New" */>}}
{.h6}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Colored badges

Set a background color with contrasting foreground color with the `color` argument.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
{{</* badge title="primary" color="primary" */>}}
{{</* badge title="secondary" color="secondary" */>}}
{{</* badge title="success" color="success" */>}}
{{</* badge title="danger" color="danger" */>}}
{{</* badge title="warning" color="warning" */>}}
{{</* badge title="info" color="info" */>}}
{{</* badge title="light" color="light" */>}}
{{</* badge title="dark" color="dark" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Pill badges

Use the `.rounded-pill` utility class to make badges more rounded with a larger `border-radius`.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
{{</* badge title="primary" color="primary" class="rounded-pill" */>}}
{{</* badge title="secondary" color="secondary" class="rounded-pill" */>}}
{{</* badge title="success" color="success" class="rounded-pill" */>}}
{{</* badge title="danger" color="danger" class="rounded-pill" */>}}
{{</* badge title="warning" color="warning" class="rounded-pill" */>}}
{{</* badge title="info" color="info" class="rounded-pill" */>}}
{{</* badge title="light" color="light" class="rounded-pill" */>}}
{{</* badge title="dark" color="dark" class="rounded-pill" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Breadcrumb
date: 2023-12-29
description: Use the breadcrumb shortcode to display the current page’s location within the site's navigational hierarchy.
layout: docs
icon: fas bread-slice
tags: component
---

## Overview

Use the `breadcrumb` shortcode to display the current page’s location within the site's navigational hierarchy. As an example, the following shortcode displays a breadcrumb for the current page.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* breadcrumb path="breadcrumb" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="breadcrumb" group="shortcode" >}}

## Frontmatter configuration

{{< release version="v0.14.1" >}}

Hugo has the option to {{< link hugo_build >}}exclude certain pages from publishing{{< /link >}} using the build options in the page's frontmatter. These pages do not have a permalink, but are still part of the breadcrumb. You can set the optional parameter `redirect` to an alternative path if needed.

The following example is taken from the `content/en/docs/_index.md` page, which is the list page of the `docs` section in the {{< link repository_docs >}}Hinode docs repository{{< /link >}}. The docs section itself is redirected to the page `docs/getting-started/introduction/` using an alias in the frontmatter of the introduction page. The `redirect` parameter in the `_index.md` page instructs the breadcrumb to create a redirect to that same alias.

```yaml
---
title: Docs
redirect: "/docs/"
_build:
  list: false
  render: false
---
```

## Customization

The file `assets/scss/components/_breadcrumb.scss` defines the styling of the _breadcrumb. It adds spacing to avoid the breadcrumb is hidden by the (fixed) [main navigation]({{% relref "navigation#main-navigation" %}}):

{{< docs name="breadcrumb" file="assets/scss/components/_breadcrumb.scss" >}}


---

---
author: Mark Dumay
title: Button Group
date: 2023-12-29
description: Use the button-group shortcode to display a group of buttons.
layout: docs
icon: fas ellipsis
tags: component
---

## Overview

Use the `button-group` shortcode to display a group of buttons. Add inner `<button>` elements for each [button]({{% ref "button" %}} "button"). As an example, the following shortcode displays a group of three buttons.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button-group aria-label="Basic example" */>}}
  {{</* button color="primary" href="#!" */>}}Left{{</* /button */>}}
  {{</* button color="primary" href="#!" */>}}Middle{{</* /button */>}}
  {{</* button color="primary" href="#!" */>}}Right{{</* /button */>}}
{{</* /button-group */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="button-group" group="shortcode" >}}

## Examples

See the [button shortcode documentation]({{% ref "button" %}} "button") for additional styling options.


---

---
author: Mark Dumay
title: Button
date: 2023-12-29
description: Use the button shortcode to display a button with a hyperlink.
layout: docs
icon: fa hand-pointer
tags: component
---

## Overview

Use the `button` shortcode to display a button with a hyperlink. The inner content is used as button title. The button supports an optional badge and tooltip. As an example, the following shortcode displays a tooltip for a dark button with a badge.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button color="secondary" tooltip="Click on the inbox to view your unread messages" href="#!" badge="99+" */>}}
    Inbox
{{</* /button */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="button" group="shortcode" >}}

## Examples

### Stateful buttons

Set the `state` argument to change the appearance and behavior of the button.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button color="primary" href="#!" state="enabled" */>}}Enabled{{</* /button */>}}
{{</* button color="primary" href="#!" state="disabled" */>}}Disabled{{</* /button */>}}
{{</* button color="primary" href="#!" state="active" */>}}Active{{</* /button */>}}
{{</* button color="primary" href="#!" state="inactive" */>}}Inactive{{</* /button */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Sized buttons

Set the `size` argument to resize the button.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button color="primary" href="#!" size="sm" */>}}sm{{</* /button */>}}
{{</* button color="primary" href="#!" size="md" */>}}md{{</* /button */>}}
{{</* button color="primary" href="#!" size="lg" */>}}lg{{</* /button */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Colored buttons

Set the `color` argument to define the background color with a matching title color.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button color="primary" href="#!" size="sm" */>}}primary{{</* /button */>}}
{{</* button color="secondary" href="#!" size="sm" */>}}secondary{{</* /button */>}}
{{</* button color="success" href="#!" size="sm" */>}}success{{</* /button */>}}
{{</* button color="danger" href="#!" size="sm" */>}}danger{{</* /button */>}}
{{</* button color="warning" href="#!" size="sm" */>}}warning{{</* /button */>}}
{{</* button color="info" href="#!" size="sm" */>}}info{{</* /button */>}}
{{</* button color="light" href="#!" size="sm" */>}}light{{</* /button */>}}
{{</* button color="dark" href="#!" size="sm" */>}}dark{{</* /button */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Buttons with a badge

Set the `badge` argument to add a badge to the top right of the button.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button color="secondary" href="#!" badge="99+" */>}}
    Inbox
{{</* /button */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Buttons with an icon

Set the `icon` argument to add an icon to the button. Use `order` to determine the position of the icon relative to the title. Omit the title to show an icon only.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button icon="fab linkedin" cue=false order="first" href="https://linkedin.com" >}}LinkedIn{{< /button */>}}

{{</* button icon="fab linkedin" cue=false order="last" href="https://linkedin.com" >}}LinkedIn{{< /button */>}}

{{</* button icon="fab linkedin" href="https://linkedin.com" /*/>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Use `justify` to adjust the layout of the icon and button title.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button icon="fab linkedin" cue=false class="col-12 col-sm-8 col-md-4 offset-sm-2 offset-md-4" justify="start" href="https://linkedin.com" >}}LinkedIn{{< /button */>}}

{{</* button icon="fab linkedin" cue=false class="col-12 col-sm-8 col-md-4 offset-sm-2 offset-md-4" justify="end" href="https://linkedin.com" >}}LinkedIn{{< /button */>}}

{{</* button icon="fab linkedin" cue=false class="col-12 col-sm-8 col-md-4 offset-sm-2 offset-md-4" justify="center" href="https://linkedin.com" >}}LinkedIn{{< /button */>}}

{{</* button icon="fab linkedin" cue=false class="col-12 col-sm-8 col-md-4 offset-sm-2 offset-md-4" justify="between" href="https://linkedin.com" >}}LinkedIn{{< /button */>}}

{{</* button icon="fab linkedin" cue=false class="col-12 col-sm-8 col-md-4 offset-sm-2 offset-md-4" justify="around" href="https://linkedin.com" >}}LinkedIn{{< /button */>}}

{{</* button icon="fab linkedin" cue=false class="col-12 col-sm-8 col-md-4 offset-sm-2 offset-md-4" justify="evenly" href="https://linkedin.com" >}}LinkedIn{{< /button */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Outlined buttons

Set the `outline` argument to `true` to adjust the style of the button.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button color="primary" href="#!" size="sm" outline="true" */>}}primary{{</* /button */>}}

{{</* button color="secondary" href="#!" size="sm" outline="true" */>}}secondary{{</* /button */>}}

{{</* button color="success" href="#!" size="sm" outline="true" */>}}success{{</* /button */>}}

{{</* button color="danger" href="#!" size="sm" outline="true" */>}}danger{{</* /button */>}}

{{</* button color="warning" href="#!" size="sm" outline="true" */>}}warning{{</* /button */>}}

{{</* button color="info" href="#!" size="sm" outline="true" */>}}info{{</* /button */>}}

{{</* button color="light" href="#!" size="sm" outline="true" */>}}light{{</* /button */>}}

{{</* button color="dark" href="#!" size="sm" outline="true" */>}}dark{{</* /button */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Buttons with a tooltip

Set the `tooltip` argument in conjunction with `placement` to show a tooltip when hovering over the button.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button color="secondary" tooltip="Click on the inbox to view your unread messages" href="#!" placement="top" */>}}
    top
{{</* /button */>}}

{{</* button color="secondary" tooltip="Click on the inbox to view your unread messages" href="#!" placement="bottom" */>}}
    bottom
{{</* /button */>}}

{{</* button color="secondary" tooltip="Click on the inbox to view your unread messages" href="#!" placement="left" */>}}
    left
{{</* /button */>}}

{{</* button color="secondary" tooltip="Click on the inbox to view your unread messages" href="#!" placement="right" */>}}
    right
{{</* /button */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Buttons with a collapsible panel

Reveal or hide a collapsible panel by linking the panel's `id` to the button with the argument `collapse`.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button color="secondary" collapse="collapse-1" */>}}
    Collapse
{{</* /button */>}}

{{</* collapse id="collapse-1" class="p-3 border rounded" */>}}
    Some placeholder content for the collapse component. This panel is *hidden by default* but
    revealed when the user activates the relevant trigger.
{{</* /collapse */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Card Group
date: 2023-12-29
description: Use the card-group shortcode to display a group of cards.
layout: docs
icon: fas grip
tags: component
---

## Overview

{{< release version="v0.18.6" >}}

Use the `card-group` shortcode to display a group of cards. Add inner `<card>` elements for each [card]({{% ref "card" %}} "card"). As an example, the following shortcode displays a group of three cards.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* card-group padding="3" gutter="3" */>}}
    {{</* card title="Bootstrap framework" icon="fab bootstrap" */>}}
        Build fast, responsive sites with Bootstrap 5. Easily customize your site with the
        source Sass files.
    {{</* /card */>}}
    {{</* card title="Full text search" icon="fas magnifying-glass" */>}}
        Search your site with FlexSearch, a full-text search library with zero dependencies.
    {{</* /card */>}}
    {{</* card title="Development tools" icon="fas code" */>}}
        Use Node Package Manager to automate the build process and to keep track of
        dependencies.
    {{</* /card */>}}
{{</* /card-group */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="card-group" group="shortcode" >}}

In addition, the following arguments are passed to the individual cards.

{{< args structure="card" group="shortcode" parent="true" >}}

## Examples

See the [card shortcode documentation]({{% ref "card" %}} "card") for additional styling options.


---

---
author: Mark Dumay
title: Card
date: 2024-08-14
description: Use the card shortcode to display a card that links to a content page.
layout: docs
icon: fa address-card
tags: component
---

## Overview

> [!IMPORTANT]
> Cards support inner content since release {{< release version="v0.18.6" short="true" type="link" >}}. As a result, references to the card shortcode must be closed or self-closed.

Use the `card` shortcode to display a card that links to a content page. When using a rich layout, the card includes a thumbnail (or icon) and a header. As an example, the following shortcode displays a horizontal card that links to the [editing]({{% ref "editing" %}}) guide. It includes a custom header and footer. You can use the {{< link "card-group" >}}card-group shortcode{{< /link >}} to align multiple cards and to position them in a grid.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* card path="/guides/editing" header="publication" footer="tags" orientation="horizontal" class="col-sm-12 col-lg-8 mx-auto" /*/>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args "card" "shortcode" >}}

## Examples

Change the style of your card with class attributes and shortcode arguments.

### Colored cards

Use the `color` argument to set the background color of the card. As an example, the following shortcodes display a plain card for each available color. The cards are embedded in a grid. The final two cards with the color `body` and `body-tertiary` are [color-mode aware]({{% relref "color-modes" %}}).

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* card-group cols="4" gutter="3" */>}}
    {{</* card color="primary" path="/docs/components/button/" header="none" orientation="none" /*/>}}
    {{</* card color="secondary" path="/docs/components/button/" header="none" orientation="none" /*/>}}
    {{</* card color="success" path="/docs/components/button/" header="none" orientation="none" /*/>}}
    {{</* card color="danger" path="/docs/components/button/" header="none" orientation="none" /*/>}}
    {{</* card color="warning" path="/docs/components/button/" header="none" orientation="none" /*/>}}
    {{</* card color="info" path="/docs/components/button/" header="none" orientation="none" /*/>}}
    {{</* card color="light" path="/docs/components/button/" header="none" orientation="none" /*/>}}
    {{</* card color="dark" path="/docs/components/button/" header="none" orientation="none" /*/>}}
    {{</* card color="white" path="/docs/components/button/" header="none" orientation="none" /*/>}}
    {{</* card color="black" path="/docs/components/button/" header="none" orientation="none" /*/>}}
    {{</* card color="body" path="/docs/components/button/" header="none" orientation="none" /*/>}}
    {{</* card color="body-tertiary" path="/docs/components/button/" header="none" orientation="none" /*/>}}
{{</* /card-group */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Custom header

Use the `header` argument to customize the contents of the card.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* card-group cols="4" gutter="3" */>}}
    {{</* card path="/guides/editing" header="full" orientation="none" /*/>}}
    {{</* card path="/guides/editing" header="publication" orientation="none" /*/>}}
    {{</* card path="/guides/editing" header="tags" orientation="none" /*/>}}
    {{</* card path="/guides/editing" header="none" orientation="none" /*/>}}
{{</* /card-group */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Custom footer

Use the `footer` argument to customize the contents of the card.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* card-group cols="4" gutter="3" */>}}
    {{</* card path="/guides/editing" header="none" footer="full" orientation="none" /*/>}}
    {{</* card path="/guides/editing" header="none" footer="publication" orientation="none" /*/>}}
    {{</* card path="/guides/editing" header="none" footer="tags" orientation="none" /*/>}}
    {{</* card path="/guides/editing" header="none" footer="none" orientation="none" /*/>}}
{{</* /card-group */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Image placement

Use the `orientation` argument to customize the placement of the card's thumbnail or icon.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* card path="/guides/editing" header="none" footer="none" orientation="stacked" class="col-sm-12 col-lg-6 mx-auto mb-3" /*/>}}
{{</* card path="/docs/components/button/" header="none" footer="none" orientation="stacked" padding="3" class="col-sm-12 col-lg-6 mx-auto mb-3" /*/>}}
{{</* card path="/guides/editing" header="publication" footer="tags" orientation="horizontal" class="col-sm-12 col-lg-8 mx-auto" /*/>}}
{{</* card path="/docs/components/button/" header="publication" footer="tags" orientation="horizontal" padding="3" class="col-sm-12 col-lg-8 mx-auto" /*/>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Inline content

Use `title`, `thumbnail`, `icon`, and inner content to define the card's content inline.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* card header="none" footer="none" padding="3" class="col-sm-12 col-lg-8 mx-auto mb-3" title="Title" icon="fa address-card" */>}}
    This is the `body` of the card. It supports Markdown.
{{</* /card */>}}

{{</* card header="none" footer="none" padding="3" class="col-sm-12 col-lg-8 mx-auto" title="Title" thumbnail="img/watch.jpg" */>}}
    This is the `body` of the card. It supports Markdown too.
{{</* /card */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Custom styling

Use the `class` argument to customize the styling of the card. The following example applies the style `card-shrink` to apply an animation effect when hovering over the card.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* card path="/docs/components/button/" header="none" footer="none" padding="3" class="col-sm-12 col-lg-8 mx-auto card-shrink" /*/>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

The style is defined in the `theme.scss` file, which is transpiled into the [site's stylesheet]({{% relref "styles" %}}).

{{< docs name="styling" file="./assets/scss/theme/theme.scss" >}}


---

---
author: Mark Dumay
title: Carousel
date: 2024-08-14
description: Use the carousel shortcode to display a carousel of several images.
layout: docs
icon: fas images
tags: component
---

## Overview

{{< release version="v0.7.1" >}}

Use the `carousel` shortcode to display a carousel of several images, with similar behavior as the [image]({{% ref "image" %}} "image"). As an example, the following shortcode displays a centered carousel with three slides, 16x9 aspect ratio, and a relative width of 67% on large screens.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* carousel ratio="16x9" class="col-sm-12 col-lg-8 mx-auto" */>}}
  {{</* img src="img/coffee.jpg" caption="slide 1" */>}}
  {{</* img src="img/phone.jpg" caption="slide 2" */>}}
  {{</* img src="img/dunes.jpg" caption="slide 3" */>}}
{{</* /carousel */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The carousel shortcode supports the following arguments:

{{< args structure="carousel" group="shortcode" >}}

Add an inner `img` element for each slide of the carousel. The `img` element supports the following arguments:

{{< args structure="carousel-item" group="shortcode" >}}

## Examples

Change the ratio and orientation of your carousel with shortcode arguments.

### 1x1 ratio

Set the `ratio` to `1x1` for a square aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* carousel id="carousel-1x1" ratio="1x1" class="col-sm-12 col-lg-6 mx-auto" */>}}
  {{</* img src="img/coffee.jpg" caption="slide 1" */>}}
  {{</* img src="img/phone.jpg" caption="slide 2" */>}}
  {{</* img src="img/dunes.jpg" caption="slide 3" */>}}
{{</* /carousel */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Set the `ratio` to `3x2` for a landscape aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* carousel id="carousel-3x2" ratio="3x2" class="col-sm-12 col-lg-8 mx-auto" */>}}
  {{</* img src="img/coffee.jpg" caption="slide 1" */>}}
  {{</* img src="img/phone.jpg" caption="slide 2" */>}}
  {{</* img src="img/dunes.jpg" caption="slide 3" */>}}
{{</* /carousel */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### 4x3 ratio

Set the `ratio` to `4x3` for a landscape aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* carousel id="carousel-4x3" ratio="4x3" class="col-sm-12 col-lg-8 mx-auto" */>}}
  {{</* img src="img/coffee.jpg" caption="slide 1" */>}}
  {{</* img src="img/phone.jpg" caption="slide 2" */>}}
  {{</* img src="img/dunes.jpg" caption="slide 3" */>}}
{{</* /carousel */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### 16x9 ratio

Set the `ratio` to `16x9` for a landscape aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* carousel id="carousel-16x9" ratio="16x9" class="col-sm-12 col-lg-8 mx-auto" */>}}
  {{</* img src="img/coffee.jpg" caption="slide 1" */>}}
  {{</* img src="img/phone.jpg" caption="slide 2" */>}}
  {{</* img src="img/dunes.jpg" caption="slide 3" */>}}
{{</* /carousel */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### 21x9 ratio

Set the `ratio` to `21x9` for a landscape aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* carousel id="carousel-21x9" ratio="21x9" class="col-sm-12 col-lg-8 mx-auto" */>}}
  {{</* img src="img/coffee.jpg" caption="slide 1" */>}}
  {{</* img src="img/phone.jpg" caption="slide 2" */>}}
  {{</* img src="img/dunes.jpg" caption="slide 3" */>}}
{{</* /carousel */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Original aspect ratio

> [!IMPORTANT]
> The carousel does not crop the images when omitting the aspect ratio. Instead, the images keep their original aspect ratio. Ensure the images have an equal aspect ratio to avoid layout shifting.

Omit the `ratio` to keep the original aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* carousel id="carousel-original" class="col-sm-12 col-lg-8 mx-auto" */>}}
  {{</* img src="img/coffee.jpg" caption="slide 1" */>}}
  {{</* img src="img/coffee.jpg" caption="slide 2" */>}}
  {{</* img src="img/coffee.jpg" caption="slide 3" */>}}
{{</* /carousel */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Set `portrait` to `true` for a portrait aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* carousel id="carousel-portrait-3x2" ratio="3x2" portrait="true" class="col-sm-8 col-lg-6 mx-auto" */>}}
  {{</* img src="img/coffee.jpg" caption="slide 1" */>}}
  {{</* img src="img/phone.jpg" caption="slide 2" */>}}
  {{</* img src="img/dunes.jpg" caption="slide 3" */>}}
{{</* /carousel */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Collapse
date: 2024-08-14
description: Use the collapse shortcode to reveal or hide a panel.
layout: docs
icon: fa eye-slash
tags: component
---

## Overview

Use the `collapse` shortcode to reveal or hide a panel. The panel can contain both HTML code and plain text. Link a button to the panel by assigning it's ID to the `collapse` attribute. As an example, the following shortcode displays a button that, when clicked, triggers a panel to appear or disappear.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button collapse="collapse-1" */>}}
    Trigger panel
{{</* /button */>}}

{{</* collapse id="collapse-1" class="p-3 border rounded" */>}}
    Some placeholder content for the collapse component. This panel is *hidden by default* but
    revealed when the user activates the relevant trigger.
{{</* /collapse */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

> [!IMPORTANT]
> The definition of the default `id` field fails when embedding (multiple) `collapse` shortcodes in an [example]({{% relref "example" %}}). Provide an explicit, unique `id` to prevent cross-interference.

The shortcode supports the following arguments:

{{< args structure="collapse" group="shortcode" >}}

## Remarks

The [nav shortcode]({{% relref "navs-and-tabs" %}}) uses multiple collapse panels under the hood to provide access to a group of tab panes.


---

---
author: Mark Dumay
title: Command Prompt
date: 2023-12-29
description: The command shortcode generates terminal output for either Bash, PowerShell, or SQL shell languages.
layout: docs
icon: fas terminal
tags: component
---

## Overview

{{< release version="v0.5.0" >}}

The `command` shortcode generates terminal output for either `bash`, `powershell`, or `sql` shell languages. The following example generates a block with a default bash command prompt.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* command */>}}
export MY_VAR=123
{{</* /command */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="command" group="shortcode" >}}

## Examples

Change the style and language of your command prompt with shortcode arguments.

### Bash

Specify `user` and `host` to add the user context to the prompt. In addition, use `(out)` to specify an output line and use `\` to denote a line continuation.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* command user="user" host="localhost" */>}}
export MY_VAR=123
echo "hello"
(out)hello
echo one \
two \
three
(out)one two three
echo "goodbye"
(out)goodbye
{{</* /command */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### PowerShell

Set the `shell` argument to `powershell` to generate a PowerShell terminal. Override the `prompt` to add a directory if needed. Use the backtick `` ` `` symbol to denote a line continuation.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* command prompt="PS C:\Users\User>" shell="powershell" */>}}
Write-Host `
'Hello' `
'from' `
'PowerShell!'
(out)Hello from PowerShell!
Write-Host 'Goodbye from PowerShell!'
(out)Goodbye from PowerShell!
{{</* /command */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### SQL

Set the `shell` argument to `sql` to generate a SQL terminal. Use the `(con)` suffix to denote a line continuation.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* command prompt="mysql>" shell="sql" */>}}
set @my_var = 'foo';
set @my_other_var = 'bar';
CREATE TABLE people ((con)
first_name VARCHAR(30) NOT NULL,(con)
last_name VARCHAR(30) NOT NULL(con)
);
(out)Query OK, 0 rows affected (0.09 sec)
insert into people(con)
values ('John', 'Doe');
(out)Query OK, 1 row affected (0.02 sec)
select *(con)
from people(con)
order by last_name;
(out)+------------+-----------+
(out)| first_name | last_name |
(out)+------------+-----------+
(out)| John       | Doe       |
(out)+------------+-----------+
(out)1 row in set (0.00 sec)
{{</* /command */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-ensable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Docs
date: 2024-08-14
description: The docs shortcode captures a code snippet from a supported input file.
layout: docs
icon: fas bookmark
tags: component
---

## Overview

{{< release version="v0.8.0" >}}

The `docs` shortcode captures a code snippet from a `toml` or `scss` input file. It scans for named markers in a local file. The snippet between the two markers is then rendered using syntax highlighting.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* docs name="main" file="config/_default/hugo.toml" id="docs-collapse-1" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

> [!IMPORTANT]
> The definition of the default `id` field fails when embedding (multiple) `docs` shortcodes in an [example]({{% relref "example" %}}). Provide an explicit, unique `id` to prevent cross-interference.

The shortcode supports the following arguments:

{{< args structure="docs" group="shortcode" >}}

## Input files

The `docs` shortcode supports `.toml` and `.scss` file formats. Use a marker to denote the start and end of a code snippet:

- For `.toml` files, use `# toml-docs-start` and `# toml-docs-end` followed by the snippet name
- For `.scss` files, use `// scss-docs-start` and `// scss-docs-end` followed by the snippet name

Click on one the tabs to see a full example of an input file.

{{% comment %}}<!-- markdownlint-disable MD031 -->{{% /comment %}}
{{< nav type="tabs" id="tabs-1" >}}
  {{< nav-item header="toml" show="true" >}}
```toml
# toml-docs-start main
title = "Hinode"
copyright = "Copyright © 2024 Mark Dumay."
enableGitInfo = true
# toml-docs-end main
```
  {{< /nav-item >}}
  {{< nav-item header="scss" >}}
```scss
// scss-docs-start breadcrumb
.breadcrumb {
    padding-top: 0.3 * $navbar-offset;
}
// scss-docs-end breadcrumb
```
  {{< /nav-item >}}
{{< /nav >}}
{{% comment %}}<!-- markdownlint-enable MD031 -->{{% /comment %}}

## Examples

Change the style and language of your code snippet with shortcode arguments.

### Default code snipppet

Use the `name` and `file` arguments to refer to a code snippet of a file. By default, the shortcode uses the site's `basePath` (see [page layout]({{% relref "layout#configuration-3" %}}) for more information).

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* docs name="main" file="config/_default/hugo.toml" id="docs-collapse-2" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Provide a path that starts with `./` to use the path of the repository as base path instead.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* docs name="styling" file="./assets/scss/theme/theme.scss" id="docs-collapse-3" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Collapsed code snipppet

Set `show` to `false` to hide the code snippet on page load. The code is revealed when clicking the tab control.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* docs name="styling" show="false" file="./assets/scss/theme/theme.scss" id="docs-collapse-4" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Code snipppet with filename only

Set `full` to `false` to show the filename only.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* docs name="styling" full="false" file="./assets/scss/theme/theme.scss" id="docs-collapse-5" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Example
date: 2023-12-29
description: The example shortcode displays a code example and renders a preview of the same input.
layout: docs
icon: fa lightbulb
tags: component
---

## Overview

{{< release version="v0.8.0" >}}

The `example` shortcode displays a code example and renders a preview of the same input. The shortcode accepts the {{< link hugo_chroma >}}languages supported by Hugo's highlight function{{< /link >}}.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* command */>}}
export MY_VAR=123
{{</* /command */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="example" group="shortcode" >}}

## Examples

Change the style and language of your code snippet with shortcode arguments.

### Hugo code example

Set the `lang` argument to `hugo` to render a Hugo code example. Be sure to escape the input with `/*` and `*/` delimiters to avoid rendering issues.

#### Preview

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo">}}
{{</* command */>}}
export MY_VAR=123
{{</* /command */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

#### Input

```go-html-template
{{</* example lang="hugo" */>}}
    {{</*/* command */*/>}}
    export MY_VAR=123
    {{</*/* /command */*/>}}
{{</* /example */>}}
```

### Hidden markup

Set `show_markup` to `false` to hide the code input and to display the preview only.

#### Preview

{{< example lang="hugo" show_markup=false >}}
This is a lead paragraph. It stands out from regular paragraphs.
{.lead}
{{< /example >}}

#### Input

```go-html-template
{{</* example show_markup=false */>}}
This is a lead paragraph. It stands out from regular paragraphs.
{.lead}
{{</* /example */>}}
```

### Hidden preview

Set `show_preview` to `false` to hide the output and to display the code input only.

#### Preview

{{< example lang="hugo" show_preview=false >}}
This is a lead paragraph. It stands out from regular paragraphs.
{.lead}
{{< /example >}}

#### Input

```go-html-template
{{</* example show_preview=false */>}}
This is a lead paragraph. It stands out from regular paragraphs.
{.lead}
{{</* /example */>}}
```


---

---
author: Mark Dumay
title: File
date: 2024-08-14
description: The file shortcode prints the full content of any given file with syntax highlighting.
layout: docs
icon: fa file-lines
tags: component
---

## Overview

{{< release version="v0.16.0" >}}

The `file` shortcode prints and highlights the full content of a given input file. It recognizes the {{< link hugo_chroma >}}languages supported by Hugo's highlight function{{< /link >}}.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* file path="./config/_default/languages.toml" id="file-collapse-1" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

> [!IMPORTANT]
> The definition of the default `id` field fails when embedding (multiple) `file` shortcodes in an [example]({{% relref "example" %}}). Provide an explicit, unique `id` to prevent cross-interference.

The shortcode supports the following arguments:

{{< args structure="file" group="shortcode" >}}

## Examples

Change the style and language of your file preview with shortcode arguments.

### Default file preview

Use the `path` argument to print the content of a specific file. By default, the shortcode uses the site's `basePath` (see [page layout]({{% relref "layout#configuration-3" %}}) for more information).

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* file path="config/_default/languages.toml" id="file-collapse-2" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Provide a path that starts with `./` to use the path of the repository as base path instead.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* file path="./config/_default/languages.toml" id="file-collapse-3" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Collapsed file preview

Set `show` to `false` to hide the file content on page load. The content is revealed when clicking the tab control.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* file show="false"  path="./config/_default/languages.toml" id="file-collapse-4" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### File preview with filename only

Set `full` to `false` to show the filename only.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* file full="false" path="./config/_default/languages.toml" id="file-collapse-5" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Syntax highlighting

{{< release version="0.27.6" >}}

Use the {{< link hugo_highlight >}}Hugo syntax highlighting options{{< /link >}} for marking lines in the file. Pass the settings to the `options` argument.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* file full="false" path="./config/_default/languages.toml" id="file-collapse-5"
    options="linenos=table,hl_lines=2-4 6,linenostart=10" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Icon
date: 2024-08-14
description: Use the icon shortcode to add a Font Awesome icon with ease.
layout: docs
icon: fa font-awesome
tags: component
---

## Overview

{{< release version="v0.8.0" >}}

Use the `icon` shortcode to quickly add a Font Awesome icon to your content. You can also use `fa` for regular icons, `fab` for brand icons, and `fas` for solid icons. As an example, the following shortcodes show a square check, a brand logo, a circle check, and a custom icon.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* icon fa square-check */>}}
{{</* fa square-check */>}}
{{</* fab linkedin */>}}
{{</* fas circle-check */>}}
{{</* icon custom activity */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

> [!IMPORTANT]
> When using [inline vector icons]({{% relref "../configuration/modules#configuring-modules" %}}), be sure to use the main name of the icon. The shortcode **does not recognize the aliases** of the icons and will throw an error or warning. For example, use `{{</* fas house */>}}` instead of `{{</* fas home */>}}` to add a house icon.

The shortcode supports both unnamed arguments and named arguments. When using unnamed arguments, all attributes are mapped to the `class` argument, separated by spaces.

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Argument  | Required | Description |
|-----------|----------|-------------|
| class     | Yes | Family, name, and styling of the icon to display. The shortcode expects the following format and order: `{family} {name} {style attributes}`. The shortcode supports the default families of the free version of Font Awesome, including shorthand notation: "fa-solid" ("fas"), "fa-regular" ("fa"), "fa-brands" ("fab"). You can omit the `fa-` prefix of the icon name. Alternatively, you can reference a custom family and icon stored in `assets/svgs/{family}/{icon}.svg`. |
| style     | No | Optional custom style of the icon, e.g. `--fa-animation-duration: 2s;`. Hinode disables inline styles by default, review the [Content Security Policy]({{% relref "server-headers" %}}) for more details. |
| spacing   | No | {{< release version="v0.21.0" short="true" size="sm" inline="true" >}} Optional flag to add a trailing whitespace character to optimize inline rendering, defaults to "true". |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

{{< args structure="icon" group="shortcode" >}}

## Remarks

See the [icons documentation]({{% relref "../content/icons" %}}) in the content section for additional styling options.


---

---
author: Mark Dumay
title: Image
date: 2024-08-17
description: Use the image shortcode to display a responsive image with a specific aspect ratio.
layout: docs
icon: fas image
tags: component
---

## Overview

Use the `image` shortcode to display a responsive image with a specific aspect ratio. The source link can refer to either an image available in the `/assets/img` folder of your site or a public web location. The shortcode renders the image as a so-called {{< link mozilla_image >}}image set{{< /link >}} to optimize the image for different screen sizes and resolutions. Behind the scenes, Hugo renders the images in `WebP` format and stores them in a local folder (`resources` or `public`). The images are processed using the quality setting specified in the `[imaging]` section of the main {{< link hugo_imaging >}}config file{{< /link >}} (defaults to 75). Supported image types are `.png`, `.jpeg`, `.gif`, `.tiff`, `.bmp`, and `.webp`. A fallback image of type `.jpeg` is provided for older browsers.

As an example, the following shortcode displays an image with its original aspect ratio. The image is adjusted for the active color mode. The shortcode processes two images behind the scenes, being `img/responsive-light.png` and `img/responsive-dark.png`. Only the image that matches the current color mode is shown.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="img/responsive.png" mode="true" caption="Image caption" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="image" group="shortcode" >}}

## Examples

Change the style of your card with class attributes and shortcode arguments.

### Aspect ratio

As an example, the following shortcodes display a centered image with various aspect ratios.

Set the `ratio` to `1x1` for a square aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="img/flowers.jpg" ratio="1x1" wrapper="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Set the `ratio` to `3x2` for a landscape aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="img/flowers.jpg" ratio="3x2" wrapper="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Set the `ratio` to `4x3` for a landscape aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="img/flowers.jpg" ratio="4x3" wrapper="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Set the `ratio` to `16x9` for a landscape aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="img/flowers.jpg" ratio="16x9" wrapper="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Set the `ratio` to `21x9` for a landscape aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="img/flowers.jpg" ratio="21x9" wrapper="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Omit the `ratio` to keep the original aspect ratio.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="img/flowers.jpg" wrapper="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Color mode

Set `mode` to `true` to use an image that is color-mode aware. The shortcode processes two images behind the scenes, being `img/responsive-light.png` and `img/responsive-dark.png`. Only the image that matches the current color mode is shown.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="img/responsive.png" mode="true" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Figures

Add a `caption` to transform the image into a figure with caption.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="img/watch.jpg" caption="Figure caption" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Vector images

The shortcode supports vector images of type `.svg` too. The shortcode supports the regular arguments, however, vector images are contained instead of cropped when the `ratio` is set. The next example shows a color-mode-aware vector image. The background is set to a contrasting color to illustrate the ratio behavior.

> [!IMPORTANT]
> Since release {{< release version="v0.26.3" short="true" type="link" >}}, vector images stored in the site's `assets` folder are embedded as inline vector images. Vector images stored in the `static` folder are kept as separate files.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="/img/logo_var.svg#logo" class="img-fluid w-50" wrapper="text-center" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Ins
date: 2024-12-13
description: Use the ins shortcode to underline text.
layout: docs
icon: fas underline
tags: component
---

## Overview

{{< release version="0.27.13" >}}

As an example, the following shortcode displays underlined text.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
This is an {{</* ins */>}}underlined text{{</* /ins */>}}.
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode does not support any arguments.


---

---
author: Mark Dumay
title: Kbd
date: 2023-12-29
description: Use the kbd shortcode to show a keyboard input element.
layout: docs
icon: fa keyboard
tags: component
---

## Overview

{{< release version="v0.19.0" >}}

Use the `kbd` shortcode to show a keyboard input element. As an example, the following shortcodes shows a simple `CTRL-C` command.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
{{</* kbd "CTRL-C" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="kbd" group="shortcode" >}}

## Examples

Set a background color with contrasting foreground color with the `color` argument.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
{{</* kbd title="primary" color="primary" */>}}
{{</* kbd title="secondary" color="secondary" */>}}
{{</* kbd title="success" color="success" */>}}
{{</* kbd title="danger" color="danger" */>}}
{{</* kbd title="warning" color="warning" */>}}
{{</* kbd title="info" color="info" */>}}
{{</* kbd title="light" color="light" */>}}
{{</* kbd title="dark" color="dark" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Link
date: 2024-08-17
description: Use the link shortcode to add a managed link to your page content.
layout: docs
icon: fas link
tags: component
---

## Overview

{{< release version="v0.16.8" >}}

Since Hinode `v0.16.8` you can add a managed link to your page content using a configurable shortcode. Managed links refer to an external URL that is centrally maintained in the site's parameters. The shortcode also supports internal links that refer to a regular page or published asset.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* link mozilla_image /*/>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

> [!IMPORTANT]
> The link shortcode recognizes language-specific pages, identified by a language prefix. For example, use `/fr/about` to link to the French translation of the `about` page. Do **not** use the alias `/fr/a-propos` in this case.

The shortcode supports a single unnamed parameter, or various named parameters. The unnamed parameter is recognized as a url if it starts with `http`, else it is treated as either a named link or **relative** internal reference (in that order). Any inner text is rendered as the link title, otherwise it uses the host name (for external links), link title (for internal links), or anchor name (for any local references containing a `#`). The shortcode supports the following named arguments:

{{< args structure="link" group="shortcode" >}}

## Site configuration

> [!IMPORTANT]
> The `--minify` flag of `hugo` purges HTML whitespace by default. Unfortunately, this also removes the spacing behind the visual cue of external links. Add the following configuration to your main configuration to prevent this:
>
>```toml
>[minify]
>  [minify.tdewolff.html]
>    keepWhitespace = true
>```

You can [configure the behavior of managed links]({{% relref "layout#extended-configuration" %}}) in the `/config/_default/params.toml` file in the `main.externalLinks` section. Manage the named links in the `links` section of the same file:

```toml
[links]
    mozilla_image = "https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images"
```

## Examples

Use either named links or common url's to generate a managed link. If a link name cannot be found, Hinode tries to find the reference relative to the current page instead. The reference may include a cross-reference `#`, although the reference itself is not validated.

Use the `cue` and `tab` arguments to override the default behavior of displaying and opening external links. Omit the link's content to generate a reference to the host (for external links) or the target page's title (for internal links). Lastly, set `case` to false to set the obtained page title to lower case.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}

- {{</* link mozilla_image >}}Named link with default settings{{< /link */>}}
- {{</* link name=mozilla_image cue=false tab=false >}}Named link opening in current tab w/o icon{{< /link */>}}
- {{</* link name=mozilla_image cue=true tab=true >}}Named link opening in new tab with icon{{< /link */>}}
- {{</* link mozilla_image /*/>}}
- {{</* link "https://developer.mozilla.org" >}}External link{{< /link */>}}
- {{</* link "../getting-started/introduction" >}}Internal link with title{{< /link */>}}
- {{</* link "../about/license" >}}Internal link with relative path{{< /link */>}}
- {{</* link "/docs/about/license" >}}Internal link with absolute path{{< /link */>}}
- {{</* link "docs/about/license" >}}Internal link with full path{{< /link */>}}
- {{</* link url="../about/license" case=false /*/>}}
- {{</* link "#arguments" /*/>}}
- {{</* link "image#examples" /*/>}}

{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Map
date: 2024-01-02
description: Use the map shortcode to show an interactive map.
layout: docs
icon: fa map
tags: component
modules: ["leaflet"]
---

## Overview

{{< release version="v0.16.0" >}}

Use the map shortcode to show an interactive map, powered by {{< link leaflet >}}Leaflet{{< /link >}}. The shortcode is a wrapper of the Leaflet library that provides basic functionality. As an example, the following shortcode displays an interactive map of the city of Amsterdam.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
  {{</* map lat=52.377 long=4.90 popup="Amsterdam Central Station" popup-lat=52.378062 popup-long=4.900562 */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="map" group="shortcode" >}}

## Configuration

By default, map support is optional. Be sure to include `leaflet` in your [module configuration]({{% relref "../configuration/modules#configuring-modules" %}}) and [page frontmatter]({{% relref "../configuration/modules#enabling-optional-modules" %}}) as needed.

## Examples

Change the location and style of your map with shortcode arguments.

### Zoom level

Set the `zoom` to a value of `1` to display a world map. The map is centered on Europe by default, adjust the `lat` and `long` values to set a different center.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* map zoom=1 */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Center coordinates

Specify the map center by providing `lat` and `long` values. Add a marker to the map by specifying a `popup` text and `popup-lat` and `popup-long` coordinates. The following example display the city center of Amsterdam and adds a marker for the central train station.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* map lat=52.377 long=4.90 popup="Amsterdam Central Station" popup-lat=52.378062 popup-long=4.900562 */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Identification

Assign a specific identified to the map by setting the `id` argument. The following example displays a map for the city of London with a unique id.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* map id="leaflet-map-london" lat=51.505 long=-0.09 zoom=10 */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Mark
date: 2023-12-29
description: Use the mark shortcode to highlight text.
layout: docs
icon: fas highlighter
tags: component
---

## Overview

{{< release version="v0.19.0" >}}

Use the `mark` shortcode to highlight text. The inner content is used as input.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
Use the mark shortcode to {{</* mark >}}highlight{{< /mark */>}} specific text.
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="mark" group="shortcode" >}}

## Examples

Specify a theme color to define the background color of the highlighted text. As an example, the following shortcodes display a highlight for each theme color.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}

- Use the mark shortcode to {{</* mark color="primary" >}}highlight{{< /mark */>}} specific text.
- Use the mark shortcode to {{</* mark color="secondary" >}}highlight{{< /mark */>}} specific text.
- Use the mark shortcode to {{</* mark color="success" >}}highlight{{< /mark */>}} specific text.
- Use the mark shortcode to {{</* mark color="danger" >}}highlight{{< /mark */>}} specific text.
- Use the mark shortcode to {{</* mark color="warning" >}}highlight{{< /mark */>}} specific text.
- Use the mark shortcode to {{</* mark color="info" >}}highlight{{< /mark */>}} specific text.
- Use the mark shortcode to {{</* mark color="light" >}}highlight{{< /mark */>}} specific text.
- Use the mark shortcode to {{</* mark color="dark" >}}highlight{{< /mark */>}} specific text.

{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Navbar
date: 2024-08-14
description: Use the navbar shortcode to display a navigation header with a toggler.
layout: docs
icon: fas bars
tags: component
---

## Overview

Use the `navbar` shortcode to display a navigation header with a toggler. The menu items are derived from the site's configuration, which defaults to the menus defined under `main`. Nested items are supported at one-level depth. The navigation bar includes a search area and a language switcher if applicable. The items in the navigation header are accentuated if the current page or any of its descendants is active. As an example, the following shortcode displays a navigation header with a body color.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* navbar id="navbar-overview" path="credits" color="body" size="md" search="false" menus="sample" title="Brand" mode="false" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="navbar" group="shortcode" >}}

## Examples

Change the style of your navbar with shortcode arguments.

### Brand text and logo

Set the argument `logo` to an image to add a brand logo to the left of the navbar. The logo moves to the center on smaller screens, pending on the `size` setting.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* navbar id="navbar-logo" logo="/img/logo_icon.svg" path="credits" color="body" size="md" search="false" menus="sample" mode="false" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Set the argument `title` to add a brand text to the left of the navbar. The text moves to the center on smaller screens, pending on the `size` setting.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* navbar id="navbar-title" title="Brand" path="credits" color="body" size="md" search="false" menus="sample" mode="false" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Colored navbar

> [!IMPORTANT]
> To improve color-mode compatibility, the colors `dark` and `light` are no longer supported since {{< release version="v0.14.1" short="true" type="link" >}}. Use the adaptive colors `body` and `body-tertiary` instead, or apply a static `white` or `black` color. The background colors `white` and `black` use `data-bs-theme` to fix the text color. This setting requires [dark mode]({{% relref "layout#extended-configuration" %}}) to be enabled.

Set the `color` argument to define the background color with a matching title color.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* navbar id="navbar-color-1" path="credits" color="primary" size="sm" search="false" menus="sample" mode="false" */>}}
{.mb-3}

{{</* navbar id="navbar-color-2" path="credits" color="secondary" size="sm" search="false" menus="sample" mode="false" */>}}
{.mb-3}

{{</* navbar id="navbar-color-3" path="credits" color="success" size="sm" search="false" menus="sample" mode="false" */>}}
{.mb-3}

{{</* navbar id="navbar-color-4" path="credits" color="danger" size="sm" search="false" menus="sample" mode="false" */>}}
{.mb-3}

{{</* navbar id="navbar-color-5" path="credits" color="warning" size="sm" search="false" menus="sample" mode="false" */>}}
{.mb-3}

{{</* navbar id="navbar-color-6" path="credits" color="info" size="sm" search="false" menus="sample" mode="false" */>}}
{.mb-3}

{{</* navbar id="navbar-color-7" path="credits" color="white" size="sm" search="false" menus="sample" mode="false" */>}}
{.mb-3}

{{</* navbar id="navbar-color-8" path="credits" color="black" size="sm" search="false" menus="sample" mode="false" */>}}
{.mb-3}

{{</* navbar id="navbar-color-9" path="credits" color="body" size="sm" search="false" menus="sample" mode="false" */>}}
{.mb-3}

{{</* navbar id="navbar-color-10" path="credits" color="body-tertiary" size="sm" search="false" menus="sample" mode="false" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Search input

Set the argument `search` to `true` to enable search input.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* navbar id="navbar-search-1" search="true" path="credits" color="body" size="md" menus="sample" mode="false" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Set the argument `search` to `false` to disable search input.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* navbar id="navbar-search-2" search="false" path="credits" color="body" size="md" menus="sample" mode="false" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Mode switcher

> [!IMPORTANT]
> The mode switcher requires [dark mode]({{% relref "layout#extended-configuration" %}}) to be enabled.

Set the argument `mode` to `true` to enable the mode switcher.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* navbar id="navbar-mode-1" mode="true" search="false" path="credits" color="body" size="md" menus="sample" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Set the argument `mode` to `false` to disable the mode switcher.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* navbar id="navbar-mode-2" mode="false" search="false" path="credits" color="body" size="md" menus="sample" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Remarks

See the [navigation documentation]({{% relref "navigation" %}}) for additional configuration options.


---

---
author: Mark Dumay
title: Navs and tabs
date: 2023-12-30
description: Use the nav shortcode to show a group of multiple tab panes.
layout: docs
icon: fa folder
tags: component
---

## Overview

{{< release version="v0.11.8" >}}

Use the `nav` shortcode to show a group of multiple tab panes. Add `nav-item` inner elements for each tab pane.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* nav id="links-1" fade="true" */>}}
  {{</* nav-item header="Nav Item #1" show="true" */>}}
    This is the first item's nav body. It supports Markdown content. The item is shown by adding
    the value `show` to the `class` argument.
  {{</* /nav-item */>}}
  {{</* nav-item header="Nav Item #2" */>}}
    This is the second item's nav body.
  {{</* /nav-item */>}}
  {{</* nav-item header="Nav Item #3" disabled="true" /*/>}}
{{</* /nav */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="nav" group="shortcode" >}}

In addition, the following arguments are passed to the individual navigation items.

{{< args structure="nav-item" group="shortcode" parent="true" >}}

Add an inner `nav-item` element for each item of the tab group. The `nav-item` element supports the following arguments:

{{< args structure="nav-item" group="shortcode" >}}

## Examples

Change the style of your nav with class attributes and arguments.

### Horizontal alignment

By default, navs are left-aligned, but you can easily change them to center or right aligned.

Centered with `.justify-content-center`:

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* nav class="justify-content-center" */>}}
  {{</* nav-item header="Nav Item #1" show="true" /*/>}}
  {{</* nav-item header="Nav Item #2" /*/>}}
  {{</* nav-item header="Nav Item #3" disabled="true" /*/>}}
{{</* /nav */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Right-aligned with `.justify-content-end`:

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* nav class="justify-content-end" */>}}
  {{</* nav-item header="Nav Item #1" show="true" /*/>}}
  {{</* nav-item header="Nav Item #2" /*/>}}
  {{</* nav-item header="Nav Item #3" disabled="true" /*/>}}
{{</* /nav */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Vertical

Stack your navigation by setting `vertical` to `true`.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* nav vertical="true" */>}}
  {{</* nav-item header="Nav Item #1" show="true" */>}}
    This is the first item's nav body. It supports Markdown content. The item is shown by adding
    the value `show` to the `class` argument.
  {{</* /nav-item */>}}
  {{</* nav-item header="Nav Item #2" */>}}
    This is the second item's nav body. It too supports HTML content.
  {{</* /nav-item */>}}
  {{</* nav-item header="Nav Item #3" disabled="true" /*/>}}
{{</* /nav */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Tabs

Takes the basic nav from above and generates a tabbed interface by setting `type` to `tabs`. The inner content of each `nav-item` is rendered within a linked tab pane. The content supports embedded HTML.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* nav type="tabs" id="tabs-1" */>}}
  {{</* nav-item header="Nav Item #1" show="true" */>}}
    This is the first item's nav body. It supports Markdown content. The item is shown by adding
    the value `show` to the `class` argument.
  {{</* /nav-item */>}}
  {{</* nav-item header="Nav Item #2" */>}}
    This is the second item's nav body. It too supports HTML content.
  {{</* /nav-item */>}}
  {{</* nav-item header="Nav Item #3" disabled="true" /*/>}}
{{</* /nav */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Pills

Take that same HTML, but using `pills` instead:

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* nav type="pills" id="pills-1" */>}}
  {{</* nav-item header="Nav Item #1" show="true" */>}}
    This is the first item's nav body. It supports Markdown content. The item is shown by adding
    the value `show` to the `class` argument.
  {{</* /nav-item */>}}
  {{</* nav-item header="Nav Item #2" */>}}
    This is the second item's nav body. It too supports HTML content.
  {{</* /nav-item */>}}
  {{</* nav-item header="Nav Item #3" disabled="true" /*/>}}
{{</* /nav */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Underline

Take that same HTML, but using `underline` instead:

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* nav type="underline" id="underline-1" */>}}
  {{</* nav-item header="Nav Item #1" show="true" */>}}
    This is the first item's nav body. It supports Markdown content. The item is shown by adding
    the value `show` to the `class` argument.
  {{</* /nav-item */>}}
  {{</* nav-item header="Nav Item #2" */>}}
    This is the second item's nav body. It too supports HTML content.
  {{</* /nav-item */>}}
  {{</* nav-item header="Nav Item #3" disabled="true" /*/>}}
{{</* /nav */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Callout

{{< release version="v0.21.0" >}}

Take that same HTML, but using `callout` instead:

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* nav type="callout" id="callout-1" */>}}
  {{</* nav-item header="Nav Item #1" show="true" */>}}
    This is the first item's nav body. It supports Markdown content. The item is shown by adding
    the value `show` to the `class` argument.
  {{</* /nav-item */>}}
  {{</* nav-item header="Nav Item #2" */>}}
    This is the second item's nav body. It too supports HTML content.
  {{</* /nav-item */>}}
  {{</* nav-item header="Nav Item #3" disabled="true" /*/>}}
{{</* /nav */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Fill and justify

To proportionately fill all available space with your `.nav-items`, use `.nav-fill`. Notice that all horizontal space is occupied, but not every nav item has the same width.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* nav type="pills" class="nav-fill" */>}}
  {{</* nav-item header="Nav Item #1" show="true" /*/>}}
  {{</* nav-item header="Much longer nav item #2" /*/>}}
  {{</* nav-item header="Nav Item #3" disabled="true" /*/>}}
{{</* /nav */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

For equal-width elements, use `.nav-justified`. All horizontal space will be occupied by nav links, but unlike the `.nav-fill` above, every nav item will be the same width.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* nav type="pills" class="nav-justified" */>}}
  {{</* nav-item header="Nav Item #1" show="true" /*/>}}
  {{</* nav-item header="Much longer nav item #2" /*/>}}
  {{</* nav-item header="Nav Item #3" disabled="true" /*/>}}
{{</* /nav */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Persona
date: 2023-12-28
description: Use the persona shortcode to display a custom card.
layout: docs
icon: fas address-card
tags: component
---

## Overview

Use the persona shortcode to display a custom card. As an example, the following shortcode displays a persona card with a primary color.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* persona thumbnail="/img/creator-1x1.jpg" title="Creators" color="primary" */>}}
  As a content creator you value your independence. You like to take control of your
  online and offline presence. You want to focus on growing your audience, without
  limitations.

  Hinode gives you the tools to publish your blog in the way that you want. You have
  full ownership and control of your content. That is why content creators choose
  Hinode.
{{</* /persona */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="persona" >}}


---

---
author: Mark Dumay
title: Release
date: 2023-12-30
description: Use the release shortcode to indicate the availability of a specific feature in a tagged release.
layout: docs
icon: fas code-pull-request
tags: component
---

## Overview

{{< release version="v0.14.1" >}}

Since Hinode `v0.14.1` you can indicate the availability of a specific feature. The `release` shortcode renders a button that links to the specific release. Use the state to indicate if the feature is new or deprecated.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* release version="v0.14.1" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="release" group="shortcode" >}}

## Site configuration

Ensure the `release` parameter is set in the [site's configuration]({{% relref "layout#configuration-3" %}}).

## Examples

Change the style of your release button using the available arguments.

### New feature

Indicate a new feature by using default values for the optional arguments.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* release version="v0.14.1" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Deprecated feature

Indicate a deprecated feature by setting `state` to `deprecated`.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* release version="v0.14.1" state="deprecated" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Short feature

Shorten the button title by setting `short` to `true`.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* release version="v0.14.1" short="true" */>}}
{{</* release version="v0.14.1" short="true" state="deprecated" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Spinner
date: 2023-08-14
description: Use the spinner shortcode to indicate the loading state of a component or page.
layout: docs
icon: fas spinner
tags: component
---

## Overview

> [!IMPORTANT]
> The animation effect of this component depends on the `prefers-reduced-motion` media query. See the reduced motion section of {{< link bs_reduced_motion >}}Bootstrap's accessibility documentation{{< /link >}}.

Use the `spinner` shortcode to indicate the loading state of a component or page. The inner content is used as alternative description. As an example, the following shortcode displays a centered spinner.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* spinner color="info" class="text-center" */>}}
Loading...
{{</* /spinner */>}}
{{< /example>}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="spinner" group="shortcode" >}}

## Examples

Change the style of your spinner with shortcode arguments.

### Colored spinner

Set the `color` argument to apply a theme color to the spinner. The following shortcodes display a centered spinner for each available color.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* spinner color="primary" */>}}Loading...{{</* /spinner */>}}
{{</* spinner color="secondary" */>}}Loading...{{</* /spinner */>}}
{{</* spinner color="success" */>}}Loading...{{</* /spinner */>}}
{{</* spinner color="danger" */>}}Loading...{{</* /spinner */>}}
{{</* spinner color="warning" */>}}Loading...{{</* /spinner */>}}
{{</* spinner color="info" */>}}Loading...{{</* /spinner */>}}
{{</* spinner color="light" */>}}Loading...{{</* /spinner */>}}
{{</* spinner color="dark" */>}}Loading...{{</* /spinner */>}}
{{</* spinner color="white" */>}}Loading...{{</* /spinner */>}}
{{</* spinner color="black" */>}}Loading...{{</* /spinner */>}}
{{< /example>}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Growing spinner

Set `grow` to `true` to show a growing spinner.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* spinner grow="true" color="info" class="text-center" */>}}
Loading...
{{</* /spinner */>}}
{{< /example>}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Sub
date: 2023-12-30
description: Use the sub shortcode to display text in subscript.
layout: docs
icon: fas subscript
tags: component
---

## Overview

{{< release version="v0.19.0" >}}

As an example, the following shortcode displays subscript text.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
H{{</* sub 2 */>}}O is a liquid.
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="sub" group="shortcode" >}}


---

---
author: Mark Dumay
title: Sup
date: 2023-12-30
description: Use the sup shortcode to display text in superscript.
layout: docs
icon: fas superscript
tags: component
---

## Overview

{{< release version="v0.19.0" >}}

As an example, the following shortcode displays superscript text.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
2{{</* sup 10 */>}} is 1024.
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="sup" group="shortcode" >}}


---

---
author: Mark Dumay
title: Table
date: 2024-08-14
description: Use the table shortcode to make your Markdown table responsive.
layout: docs
icon: fas table
tags: component
---

## Overview

{{< release version="v0.8.0" >}}

> [!IMPORTANT]
> Bootstrap styling attributes require an explicit class argument as of release {{< release version="v0.22.0" short="true" type="link" >}}. For example, use the following argument to accentuate a table with table-striped: `class="table-striped"`.

Use the table shortcode to make your markdown table responsive. Responsive tables scroll horizontally to improve the layout on smaller screens. The following example illustrates how this works.

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
{{</* table */>}}
| #  | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
|----|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| 1. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 2. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 3. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
{{</* /table */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="table" group="shortcode" >}}

## Remarks

See the [tables documentation]({{% relref "../content/tables" %}}) in the content section for additional styling options.


---

---
author: Mark Dumay
title: Timeline
date: 2024-04-18
description: Use the timeline shortcode to show items ordered on a vertical timelime.
layout: docs
icon: fas timeline fa-rotate-90
tags: component
---

## Overview

{{< release version="v0.15.3" >}}

Use the timeline shortcode to show items ordered on a vertical timelime.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* timeline data="timeline-example" background="dark" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="timeline" group="shortcode" >}}

## Data format

Define a file in the `data` folder that contains the timeline data. The format supports the following attributes:

| Attribute | Required | Description |
|-----------|----------|-------------|
| title     | Yes | Required title of the timeline element. |
| icon      | Yes | Required class and name of a Font Awesome icon to include. The icons use the [icon shorthand notation]({{% relref "../content/icons" %}}). |
| color     | No  | Optional [theme color]({{% relref "colors" %}}) of the timeline element, defaults to `primary`. |
| date      | No  | Optional date of the timeline element, placed below the title. |
| badge     | No  | Optional label of a [pill badge]({{% relref "badge#pill-badges" %}}) placed next to the title. |
| url       | No  | Optional url of the timeline element, added as link to the title when set. The url is joined with the `release` attribute of the [documentation configuration]({{% relref "documentation#basic-configuration" %}}), unless the url is absolute (e.g. starts with `http`). |
| content   | No  | Optional content of the timeline element, supports markdown. |

The following snippet defines a single timeline element in `yml` format.

```yml
- title: Product launch
  icon: fas rocket
  color: primary
  date: 2023-07-03
  badge: v0.15.3
  url: https://github.com/gethinode/hinode/releases/tag/v0.15.3
  content:
    Lorem ipsum dolor sit amet, consectetur adipisicing elit.
```


---

---
author: Mark Dumay
title: Toast
date: 2024-08-14
description: Use the toast shortcode to display a dismissable message in the bottom-right corner of the screen.
layout: docs
icon: fas circle-info
tags: component
---

## Overview

> [!IMPORTANT]
> To support multiple toast messages on the same page, each toast message is explicitly linked to a button using the parameter `id` since release {{< release version="v0.14.3" short="true" type="link" >}}. Hinode wraps the individual toast messages in a container to stack them automatically.

Use the `toast` shortcode to display a dismissable message in the bottom-right corner of the screen. Give the toast a unique `id` and assign this value to the `toast` argument of a button. As an example, the following shortcode displays two buttons that, when clicked, trigger a toast message. The messages are stacked when both buttons are clicked in a short timeframe.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* button toast="toast-example-1" */>}}
    Show toast 1
{{</* /button */>}}

{{</* button toast="toast-example-2" */>}}
    Show toast 2
{{</* /button */>}}

{{</* toast id="toast-example-1" header="First title" */>}}
    This is the first toast message.
{{</* /toast */>}}

{{</* toast id="toast-example-2" header="Second title" */>}}
    This is the second toast message.
{{</* /toast */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

{{< args structure="toast" group="shortcode" >}}

## Configuration

See the message section of the layout configuration to [modify the placement of the toast messages]({{% relref "layout#message-configuration" %}}).


---

---
author: Mark Dumay
title: Tooltip
date: 2023-12-30
description: Use the tooltip shortcode to display a tooltip for a hyperlink.
layout: docs
icon: fa message
tags: component
---

## Overview

Use the `tooltip` shortcode to display a tooltip for a hyperlink. Refer to the [button]({{% ref "#button" %}} "button") on how to display a tooltip for a button instead. The inner content is used as hyperlink text. As an example, the following shortcode displays a tooltip for a colored hyperlink.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* tooltip color="info" title="Tooltip" href="#!" */>}}
    Tooltip demonstration
{{</* /tooltip */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args structure="tooltip" group="shortcode" >}}

## Examples

Change the style of your tooltip with shortcode arguments.

### Colored tooltip

Set `color` to adjust the color of the text element to which the tooltip is applied. As an example, the following shortcodes display a tooltip for each available color.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* tooltip color="primary" title="Tooltip" href="#!" */>}}Primary{{</* /tooltip */>}}&bull;
{{</* tooltip color="secondary" title="Tooltip" class="d-none-dark" href="#!" */>}}Secondary{{</* /tooltip */>}}
{{</* tooltip color="secondary" title="Tooltip" class="d-none-light bg-light" href="#!" */>}}Secondary{{</* /tooltip */>}}&bull;
{{</* tooltip color="success" title="Tooltip" href="#!" */>}}Success{{</* /tooltip */>}}&bull;
{{</* tooltip color="danger" title="Tooltip" href="#!" */>}}Danger{{</* /tooltip */>}}&bull;
{{</* tooltip color="warning" title="Tooltip" href="#!" */>}}Warning{{</* /tooltip */>}}&bull;
{{</* tooltip color="info" title="Tooltip" href="#!" */>}}Info{{</* /tooltip */>}}&bull;
{{</* tooltip color="light" title="Tooltip" class="bg-dark" href="#!" */>}}Light{{</* /tooltip */>}}&bull;
{{</* tooltip color="dark" title="Tooltip" class="d-none-dark" href="#!" */>}}Dark{{</* /tooltip */>}}
{{</* tooltip color="dark" title="Tooltip" class="d-none-light bg-light" href="#!" */>}}Dark{{</* /tooltip */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Placement

Set `placement` to adjust the placement of the tooltip.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* tooltip title="Tooltip" href="#!" placement="top" */>}}Top{{</* /tooltip */>}}&bull;
{{</* tooltip title="Tooltip" href="#!" placement="bottom" */>}}Bottom{{</* /tooltip */>}}&bull;
{{</* tooltip title="Tooltip" href="#!" placement="left" */>}}Left{{</* /tooltip */>}}&bull;
{{</* tooltip title="Tooltip" href="#!" placement="right" */>}}Right{{</* /tooltip */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Video
date: 2024-08-28
aliases:
  - "youtube"
  - "vimeo"
description: Use the video shortcode to embed a responsive video on your site.
layout: docs
icon: fab youtube
tags: component
modules: ["vimeo"]
---

## Overview

> [!IMPORTANT]
> Hinode uses a strict Content Security Policy by default. Be sure your server configuration safe lists your video provider in the `frame-src` configuration, or your video will not show. You can modify the safe list in the {{< link "docs/advanced-settings/server-headers" />}}.

Use the `video` shortcode to embed a responsive video on your site. The shortcode currently supports three providers, being {{< link cloudinary>}}Cloudinary{{< /link >}}, {{< link vimeo>}}Vimeo{{< /link >}}, and {{< link youtube>}}YouTube{{< /link >}}. The last two providers also support shorthand notation. As an example, the following shortcode displays a Hugo quickstart guide:

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* youtube w7Ft2ymGmfc */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Arguments

The shortcode supports the following arguments:

{{< args "video" >}}

## Configuration

Hinode supports {{< link cloudinary>}}Cloudinary{{< /link >}}, {{< link vimeo>}}Vimeo{{< /link >}}, and {{< link youtube>}}YouTube{{< /link >}} as video provider. You can configure these providers in your site parameters. Hinode uses the following configuration by default:

{{< docs name="videos" file="config/_default/params.toml" >}}

## Examples

Embed a responsive video by specifying the hosting provider.

### Video

As an example, the following shortcode displays an Elephants video hosted by Cloudinary. Cloudinary requires both an account name and a public ID of the video. You can provide the account name as shortcode argument, or {{< link "#configuration" >}}configure a default account name{{< /link >}} in the site's parameters.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* video host="cloudinary" account="demo" id="elephants" autoplay=true */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Vimeo

> [!IMPORTANT]
> Since Hinode {{< release version="v0.27.3" short="true" type="link" >}} you need to explicitly add `vimeo` to your page's {{< link "docs/configuration/modules/#enabling-optional-modules" >}}optional modules{{</ link>}} to ensure compliance with the Content Security Policies. When setting {{< link hugo_vimeo_privacy >}}enableDNT{{< /link >}} to true, the Vimeo player will be blocked from tracking any session data, including all cookies and stats.

As an example, the following shortcode displays a Vimeo video. By setting `autotitle` to `true`, Hinode captures the video's title as defined by Vimeo and assigns this to the title of the video frame.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* vimeo id="55073825" autoplay=true autotitle=true */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### YouTube

> [!NOTE]
> In {{< link hugo_youtube_privacy >}}privacy-enhanced mode{{< /link >}}, YouTube will not store information about visitors on your website unless the user plays the embedded video.

As an example, the following shortcode displays a Hugo quickstart guide hosted by YouTube.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* youtube id="w7Ft2ymGmfc" autoplay=true autotitle=true */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
author: Mark Dumay
title: Components
description: Use powerful shortcodes to add interactive elements with ease.
nested: false
aliases:
  - "/docs/components/"
  - "/components/"
---


---

---
title: Analytics
description: Enable analytics for your website to view usage statistics and more.
date: 2024-08-14
layout: docs
---

## Configuration

Hinode supports Google Analytics 4 out-of-the-box. Simply add your Google property (starting with `G-`) to the configuration in `config/_default/hugo.toml`.

```toml
[services]
  [services.googleAnalytics]
    ID = "G-xxxxxxxxxx"
```

## Default behavior

Review the next sections to understand the default behavior when dealing with web analytics.

### Anonymous users

Hinode anonymizes the visitor's IP address when the client sends a Do Not Track request.

### Local development

By default, analytics is disabled when running on a local machine to prevent pollution of the gathered insights. Modify the condition `(not site.IsServer)` as needed.

The file `assets/js/analytics.js` defines the JavaScript template that is ingested into the main bundle.

```go-html-template {hl_lines=2}
{{- $pc := .Site.Config.Privacy.GoogleAnalytics -}}
{{- if (and (not .Site.IsServer) (not $pc.Disable)) -}}
[...]
{{- end -}}
```

The partial `layouts/partials/footer/scripts.html` loads the Google Tag Manager if applicable.

```go-html-template {hl_lines=1}
{{- if and (not site.IsServer) $header -}}
[...]
{{- end -}}
```

## Content Security Policy

{{< link google_analytics_csp >}}Google Analytics requires several Content Security Policies{{< /link >}} to be set in the [server headers]({{% relref "server-headers" %}}). Hinode has enabled access for Google Analytics 4 by default. The following settings are added to `config/_default/server.toml`. Similar settings are defined in the `netlify.toml` file provided in the repository’s root when deploying to {{< link netlify >}}Netlify{{< /link >}}.

```yaml
script-src:  https://*.googletagmanager.com
img-src:     https://*.google-analytics.com https://*.googletagmanager.com
connect-src: https://*.google-analytics.com https://*.analytics.google.com https://*.googletagmanager.com
```


---

---
title: Color modes
description: Add light mode and dark mode support to your website.
date: 2023-08-14
layout: docs
---

## Color modes

{{< release version="v0.9.0" >}}

Hinode supports color modes, or themes, as introduced by Bootstrap `v5.3.0`. By default, the site is rendered in light mode. If dark mode is enabled, a toggler is added to the main navigation. The toggler enables switching between modes, or can be set to `auto`. In the latter mode, the site uses the mode as preferred by the device. Hinode uses data attributes to toggle the site's color mode. Visit the {{< link bs_color_sass >}}Bootstrap documentation{{< /link >}} for more information. You can enable of disable the support for dark mode in the [extended layout configuration]({{% relref "layout#extended-configuration" %}}).

## Display property

Hinode defines two classes to simplify the development of color-mode aware websites. Simply add `.d-none-dark` as class attribute to block the display of an element in dark mode. Vice versa, use `.d-none-light` to block the content from rendering in light mode. The following example illustrates this behavior. Toggle the color mode of the current website to test the behavior.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
I'm visible in {{</* mark >}}light mode{{< /mark */>}} only
{.d-none-dark}

I'm visible in {{</* mark >}}dark mode{{< /mark */>}} only
{.d-none-light}

{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Accessibility

{{< release version="v0.18.0" >}}

Contrast is an important aspect of your site accessibility. The {{< link wcag_contrast >}}WCAG color contrast guidelines{{< /link >}} recommends a minimum contrast ratio of 4.5:1 for most content elements. Defining a color scheme that has sufficient contrast in all color modes can be challenging. Hinode supports two attributes to enhance the contrast ratio of the primary color in dark mode.

The argument `darkModeTint` lightens the primary color with a given percentage, while `darkModeShade` darkens the primary background color. You can adjust these settings in the `style` section of the `site parameters`.

| Setting       | Default | Description |
|---------------|---------|-------------|
| darkModeShade | "20%"   | Darkens the primary background color in dark mode with a given percentage, defaults to 20%. |
| darkModeTint  | "40%"   | Lightens the primary color in dark mode with a given percentage, defaults to 40%. |

## Sass

The helper `color-mode` is available to simplify the development of color-mode aware stylesheets. The following example defines a default background gradient for the colors white and the primary [theme color]({{% relref "colors" %}}). If `$enable-dark-mode` is enabled (see [extended layout configuration]({{% relref "layout#extended-configuration" %}})), the helper `color-mode` inserts an alternative gradient that is applicable to dark mode.

```scss
.gradient-featured {
    background: $white;
    background: linear-gradient(135deg, $white 0%, tint-color($primary, 80%) 100%);
}

@if $enable-dark-mode {
    @include color-mode(dark) {
        .gradient-featured {
            background: $gray-900;
            background: linear-gradient(135deg, $gray-900 0%, shade-color($primary, 60%) 100%);
        }
    }
}
```

The final {{< abbr CSS >}} generated by Hinode looks like this:

```css
.gradient-featured {
    background: #fff;
    background: linear-gradient(135deg, #fff 0%, #f6d7cc 100%);
}

[data-bs-theme="dark"] .gradient-featured {
    background: #212529;
    background: linear-gradient(135deg, #212529 0%, #551700 100%);
}
```


---

---
title: Colors
description: Use Bootstrap's color system to easily adjust your website's colors.
date: 2023-09-02
layout: docs
---

## Theme colors

Hinode uses Bootstrap's color system. You can adjust them in the `/config/_default/params.toml` file in the `style` section.

{{< docs name="theme-colors" file="config/_default/params.toml" >}}

In addition, the background colors `black` and `white` are available too. Below is an overview of the rendered colors.

{{< card-group cols="3" padding="3" gutter="3" wrapper="my-4 p-4" class="border rounded-3" >}}
    {{< card color="primary" >}}primary{{< /card >}}
    {{< card color="secondary" >}}secondary{{< /card >}}
    {{< card color="success" >}}success{{< /card >}}
    {{< card color="danger" >}}danger{{< /card >}}
    {{< card color="warning" >}}warning{{< /card >}}
    {{< card color="info" >}}info{{< /card >}}
    {{< card color="light" >}}light{{< /card >}}
    {{< card color="dark" >}}dark{{< /card >}}
    {{< card color="white" class="text-bg-light" >}}white{{< /card >}}
    {{< card color="black" class="text-white" >}}black{{< /card >}}
{{< /card-group >}}

## Adaptive colors

Several components support background colors that are [color-mode aware]({{% relref "color-modes" %}}). These colors respond to changes when the active theme is adjusted, such as by changing from a light theme to a dark theme. You can apply this color by adding `bg-body` or `bg-body-tertiary` to the class of an HTML element.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
{{</* card-group cols="2" padding="3" gutter="3" wrapper="my-4 p-4" class="border rounded-3" */>}}
    {{</* card class="bg-body text-bg-white" >}}body{{< /card */>}}
    {{</* card class="bg-body-tertiary text-bg-white" >}}body-tertiary{{< /card */>}}
{{</* /card-group */>}}
{{< /example>}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Background colors

Components such as the [timeline]({{% relref "timeline" %}}) support *subtle* background colors. These colors are also [adaptive]({{% relref "#adaptive-colors" %}}). The following background colors are available.

{{< card-group cols="3" padding="3" gutter="3" wrapper="my-4 p-4" class="border rounded-3" >}}
    {{< card class="bg-primary-subtle" >}}bg-primary-subtle{{< /card >}}
    {{< card class="bg-secondary-subtle" >}}bg-secondary-subtle{{< /card >}}
    {{< card class="bg-success-subtle" >}}bg-success-subtle{{< /card >}}
    {{< card class="bg-danger-subtle" >}}bg-danger-subtle{{< /card >}}
    {{< card class="bg-warning-subtle" >}}bg-warning-subtle{{< /card >}}
    {{< card class="bg-info-subtle" >}}bg-info-subtle{{< /card >}}
    {{< card class="bg-light-subtle" >}}bg-light-subtle{{< /card >}}
    {{< card class="bg-dark-subtle" >}}bg-dark-subtle{{< /card >}}
{{< /card-group >}}

## Colored contrasting links

Hinode defines additional classes to render links that contrast with their background. Simply add `link-bg-<color>` to the class of an `a` anchor element. The next example adds a link constrasting with the background color `bg-success`.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
{{</* card class="col-md-2 rounded-3 text-center" color="success" >}}{{< link href="#!" class="link-bg-success" >}}success{{< /link >}}{{< /card */>}}
{{< /example>}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Below grid illustrates the contrasting colors for each background.

{{< card-group cols="3" padding="3" gutter="3" wrapper="my-4 p-4" class="border rounded-3" >}}
    {{< card color="primary" >}}{{< link href="#!" class="link-bg-primary" >}}primary{{< /link >}}{{< /card >}}
    {{< card color="secondary" >}}{{< link href="#!" class="link-bg-secondary" >}}secondary{{< /link >}}{{< /card >}}
    {{< card color="success" >}}{{< link href="#!" class="link-bg-success" >}}success{{< /link >}}{{< /card >}}
    {{< card color="danger" >}}{{< link href="#!" class="link-bg-danger" >}}danger{{< /link >}}{{< /card >}}
    {{< card color="warning" >}}{{< link href="#!" class="link-bg-warning" >}}warning{{< /link >}}{{< /card >}}
    {{< card color="info" >}}{{< link href="#!" class="link-bg-info" >}}info{{< /link >}}{{< /card >}}
    {{< card color="light" >}}{{< link href="#!" class="link-bg-light" >}}light{{< /link >}}{{< /card >}}
    {{< card color="dark" >}}{{< link href="#!" class="link-bg-dark" >}}dark{{< /link >}}{{< /card >}}
    {{< card color="white" class="text-bg-light" >}}{{< link href="#!" class="link-bg-white" >}}white{{< /link >}}{{< /card >}}
    {{< card color="black" class="text-white" >}}{{< link href="#!" class="link-bg-black" >}}black{{< /link >}}{{< /card >}}
    {{< card class="bg-body text-bg-white" >}}{{< link href="#!" class="link-bg-body" >}}body{{< /link >}}{{< /card >}}
    {{< card class="bg-body-tertiary text-bg-white" >}}{{< link href="#!" class="link-bg-body-tertiary" >}}body-tertiary{{< /link >}}{{< /card >}}
{{< /card-group >}}

## Generating helper

The SCSS generator for the colored links is defined in `assets/scss/helpers/_colored-links.scss`.

{{< docs name="colored-links" file="assets/scss/helpers/_colored-links.scss" >}}


---

---
title: Cookie consent
description: Configure cookie consent to comply with regulatory requirements.
date: 2024-10-21
layout: docs
---

{{< release version="v0.27.0" >}}

> [!IMPORTANT]
> The materials on this website are purely informative and represent a personal view; they do not constitute legal or other professional advice. Consult your professional adviser for legal or other advice.

Regulations such as GDPR (in the EU and UK) and CCPA/CPRA (California) require consent from users about the use of cookies. Without prior consent, the website should refrain from storing or accessing any cookies, unless they are absolutely essential. Site owners should also be able to share proof of the consents (consent logging) on request of the authorities. Lastly, certain countries put restrictions on where to geographically store the consent logs.

Since release {{< release version="v0.27.0" short="true" type="link" >}} Hinode provides support to simplify the integration with cookie consent managers. Cookie consent management itself is not offered by Hinode, but should be relatively easy to implement by integrating with a third-party solution using the pointers in this section. Review the next paragraphs to familiarize yourself with the available options and configurations.

## Categorizing scripts

> [!IMPORTANT]
> The available categories and their descriptions are used for illustrative purposes only. It is the responsibility of the site administrator to assign scripts to the correct category.

Modern websites typically use a combination of local storage, session storage, and cookies to collect and store data. Although the various laws and regulations are commonly referred to as cookie law, the legislation is applicable to all kinds of technologies that enable data collection and processing. In practice, we should look into the scripts that interact with these data storages. Assigning a Hinode script (or a script bundle) to a specific category informs users about their intent. Hinodes supports the following categorization of scripts and their intent:

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< accordion class="accordion-theme accordion-flush" >}}
  {{< accordion-item header="necessary" >}}
    Necessary cookies are linked to the site's essential features, which include secure log-in and customizable consent settings. There is no personally identifying information stored by these cookies.
  {{< /accordion-item >}}
  {{< accordion-item header="functional" >}}
    Functional cookies facilitate the performance of specific tasks, such as gathering user comments, disseminating the website's content on social media, and enabling additional third-party capabilities. Hinode uses functional cookies to store the user's preferred language and theme.
  {{< /accordion-item >}}
  {{< accordion-item header="analytics" >}}
    Cookies with analytical functions are employed to comprehend how users engage with the website. These cookies aid in the provision of data on metrics like number of visitors, bounce rate, source of traffic, etc. Hinode provides a module to integrate with {{</* link google_analytics >}}Google Analytics{{< /link */>}} out of the box.
  {{< /accordion-item >}}
  {{< accordion-item header="performance" >}}
    In order to provide users with a better user experience, performance cookies are employed to comprehend and evaluate the website's important performance indicators.
  {{< /accordion-item >}}
  {{< accordion-item header="advertisement" >}}
    Advertisement cookies are used to track the success of ad campaigns and show users personalized advertisements depending on the pages they have previously viewed.
  {{< /accordion-item >}}
  {{< accordion-item header="other" >}}
    Unassigned scripts are categorized as `other` by default. Any cookies used by these scripts should be reviewed and assigned to a specific category by the site administrator. Hinode also assigns scripts to this category that do not necessarily interact with cookies at all.
  {{< /accordion-item >}}
{{< /accordion >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Assigning scripts to a category

Hinodes uses {{< link modules >}}modules{{< /link >}} to include features and functionality as needed. This reduces overhead and improves performance. By assigning a module to an available category, all of the scripts contained within that module are linked to the specified intent. The following example shows the default configuration of the {{< link google_analytics >}}Google Analytics{{< /link >}} module. You can override these settings in your site's parameters.

```toml
[params.modules.GoogleAnalytics]
  integration = "core"
  state = "async"
  category = "analytics"
```

You can also assign regular scripts and external scripts to an intent category. See the {{< link "docs/advanced-settings/scripts" >}}script integration approaches{{< /link >}} for more details.

## Using a template to include scripts

Hinode includes a partial template to render the script references. It is invoked for each generated script bundle (see the {{< link "#understanding-the-naming-conventions" >}}scripts documentation{{< /link >}} for more details). You can use the template to customize the script references. The following variables are available within the template as such:

{{< args structure="script" >}}

Hinode includes a basic script template in `layouts/partials/templates/script.html`. It includes the following code:

{{< file path="./_vendor/github.com/gethinode/hinode/layouts/partials/templates/script.html" full="false" >}}

You can modify this template to your needs. For example, {{< link "cookieyes_script_code" >}}CookieYes supports a custom attribute{{< /link >}} called `data-cookieyes` to categorize the referenced script. You could modify the template to include this custom attribute:

```html {hl_lines=[4]}
[...]

<script src="{{ $args.link }}"
    {{- with $category }} data-cookieyes="cookieyes-{{ . }}"{{ end -}}
    {{- with $args.integrity }}integrity="{{ . }}" crossorigin="anonymous"{{ end }}
    {{- with $args.state }} {{ . | safeHTMLAttr }}{{ end -}}>
</script>
```

## Using API calls

Hinode uses several scripts to access and store the user's preferences, including the selected theme and language. Instead of assigning an entire script or script bundle to a category, you can also use predefined APIs. These APIs will give you fine-grained control on when to invoke a cookie consent check. Use the `get*` and `set*` functions to interact with the local storage and session storage respectively. The `hasConsent()` function is a placeholder that should be hooked to your cookie consent manager of choice.

The available functions are defined in `/assets/js/critical/_cookie.js`:

{{< file path="./_vendor/github.com/gethinode/hinode/assets/js/critical/_cookie.js" full="false" >}}

Pending your cookie consent configuration, the API functions may not be available at all times. The following code illustrates how to test for the availability of the `getLocalStorage()` function:

```js
if (typeof getLocalStorage === "function") {
  [...]
}
```

## Predefined integrations

> [!IMPORTANT]
> You cannot test the CookieYes integration locally, as CookieYes actively validates the domain name of the host. However, you can set up a staging environment when on a paid plan. See the {{< link cookieyes_staging >}}Staging Mode documentation{{< /link >}} for more details.

Hinode provides a reference implementation to integrate with {{< link "cookieyes" >}}CookieYes{{< /link >}}. CookieYes offers various plans, including a free plan for blogs and personal websites. Once signed up, capture the link to your CookieYes banner script. See the installation code in the advanced settings of your CookieYes account. The code is available by clicking the button next to the cookie banner status. The link has the following pattern:

```math {class="mb-4"}
\texttt{https://cdn-cookieyes.com/client\_data/}

\rlap{$
    \underbrace{
        \phantom{\texttt{installation code}}
    }_{\text{replace this}}
$}

\texttt{installation code/script.js}
```

Include the banner script in your site's parameters, replacing the `{installation code}` with the actual value:

```toml
[modules.cookieyes]
    url = "https://cdn-cookieyes.com/client_data/{installation code}/script.js"
```

Next, include the `mod-cookieyes` in your module configuration. Please ensure `mod-cookieyes` is imported before the `hinode` module to ensure the correct script template is initialized. The following snippet illustrates an example configuration for `hugo.toml`.

```toml
[module]
  [[module.imports]]
    path = "github.com/gethinode/mod-cookieyes/v2"
  [[module.imports]]
    path = "github.com/gethinode/hinode"
```

CookieYes requires several directives to be added to your Content Security Policy. See the {{< link cookieyes_csp >}}policy requirements{{< /link >}} as provided by CookieYes for more details. The directives should be added to your {{< link "docs/advanced-settings/server-headers/" >}}server headers{{< /link >}}.


---

---
title: Digital Asset Managers
description: Configure Digital Asset Managers to delegate the transformation of images
date: 2024-10-10
layout: docs
---

{{< release version="v0.24.0 " >}}

Hinodes uses Hugo’s {{< link "../content/images-and-figures" >}}image processing{{< /link>}} to preprocess images on the server side. Hugo uses caching to reduce the build time. Despite the caching techniques, the image processing can take significant time, especially on larger sites. An alternative approach is to use a dedicated Digital Asset Manager. Most managers offer an API to transform images on the fly. The following paragraphs explain how to enable these Digital Asset Managers.

## Configuring a DAM

Hinode supports {{< link cloudinary>}}Cloudinary{{< /link >}}, {{< link imagekit>}}ImageKit.io{{< /link >}}, and {{< link imgix>}}Imgix{{< /link >}} as Digital Asset Manager (DAM). You can configure these managers in your site parameters. Link a DAM to a specific URL by providing a regular expression that matches the domain name of the URL. For example, the `host = cloudinary` matches the image `https://res.cloudinary.com/demo/image/upload/dog.webp` to {{< link cloudinary>}}Cloudinary{{< /link >}}. When no match is found, Hinode uses Hugo's image processing instead. Hinode uses the following configuration by default:

{{< docs name="images" file="config/_default/params.toml" >}}

## Content Security Policy

Hinode has enabled access for Cloudinary, ImageKit.io, and Imgix by default. The following settings are set in the site's parameters (usually `hugo.toml`). See the {{< link "/docs/advanced-settings/server-headers" >}}Content Security Policy{{< /link >}} for more information.

```toml
[params.modules.hinode.csp]
    frame-src = [
        "player.cloudinary.com",
    ]
    img-src = [
        "*.imgix.net",
        "*.imagekit.io",
        "*.cloudinary.com"
    ]
```

## Supported providers

You can include DAM-enabled images and figures using the regular {{< link "../components/image" />}} shortcode. Simply include the image's URL in the `src` attribute. The next paragraphs demonstrate the various available Digital Asset Managers.

### Cloudinary

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="https://res.cloudinary.com/demo/image/upload/dog.webp"
    ratio="1x1" caption="Cloudinary image" wrapper="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### ImageKit.io

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="https://ik.imagekit.io/demo/default-image.jpg"
    ratio="1x1" caption="ImageKit.io image" wrapper="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Imgix

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="https://assets.imgix.net/examples/bluehat.jpg"
    ratio="1x1" caption="imgix image" wrapper="col-6 mx-auto" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Rewriting origin URLs

You can rewrite the URL of the image when using a different origin server. Currently, this feature is supported by the adapter for ImageKit.io. For example, when using Azure Blob Storage as origin, your input URL may look like the following:

```math {class="mb-4"}
\texttt{https://}

\rlap{$
    \underbrace{
        \vphantom{g}
        \phantom{\texttt{account.blob.core.windows.net}}
    }_{\text{origin host}}
$}

\texttt{account.blob.core.windows.net/}

\rlap{$
    \underbrace{
        \vphantom{g}
        \phantom{\texttt{container}}
    }_{\text{container}}
$}

\texttt{container/}

\rlap{$
    \underbrace{
        \phantom{\texttt{dir/filename.jpg}}
    }_{\text{path to asset}}
$}

\texttt{dir/filename.jpg}
```

Adjust your CDN configuration in the site's parameters to include the hostname, account, and container of your origin server. Next, set `rewrite = true` to trigger the adapter to rewrite your origin URL:

```toml
[images]
    [images.imagekit]
        host = "imagekit|windows"
        account = "account"
        container = "container"
        rewrite = true
```

The resulting URL will look like this (notice the container name has been dropped from the URL):

```math
\texttt{https://}

\rlap{$
    \underbrace{
        \phantom{\texttt{ik.imagekit.io}}
    }_{\text{target host}}
$}

\texttt{ik.imagekit.io/}

\rlap{$
    \underbrace{
        \vphantom{g}
        \phantom{\texttt{account}}
    }_{\text{account}}
$}

\texttt{account/}

\rlap{$
    \underbrace{
        \phantom{\texttt{dir/filename.jpg}}
    }_{\text{path to asset}}
$}

\texttt{dir/filename.jpg}
```

## Adding a custom DAM

> [!TIP]
> Configuring an additional Digital Asset Manager? Please consider to contribute your adapter to the open-source community of Hinode. Review the {{< link "../getting-started/contribute/">}}contributing guidelines{{< /link >}} to find out more.

You can configure additional Digital Asset Managers by adding a adapter to the folder `layouts/partials/assets/adapters/`. For example, the adapter for {{< link cloudinary>}}Cloudinary{{< /link >}} is available in `cloudinary.html`. Hinode supports basic image transformations such as adjusting the dimensions and cropping. Hinode passes the following arguments to each recognized adapter:

{{< args structure="image-adapter" group="partial" >}}


---

---
title: Documentation
description: Configure versioned documentation
date: 2023-07-03
layout: docs
---

Hinodes supports the configuration of documentation pages. You can either maintain a single content directory, or add versioned documentation.

## Basic configuration

The configuration of the documentation pages is set in the `docs` section of the site parameters. The following settings are supported:

| Setting      | Default | Description |
|--------------|---------|-------------|
| version      | -       | Default version to use in documentation links, only applicable when no other versions have been defined (see [next paragraph]({{% relref "documentation#versioned-documentation" %}})). |
| basePath     | -       | Base path to use for file references. |
| github       | -       | Repository URL for the docs site, overrides `schema/github` in `config/_default/params.toml`. |
| release      | -       | Release url for the docs site, e.g. `https://github.com/gethinode/hinode/releases/tag/`. This setting is used by the [release shortcode]({{% relref "release" %}}) and [timeline shortcode]({{% relref "timeline" %}}).

The below configuration shows the default configuration set in `config/_default/params.toml`.

{{< docs name="version" file="./config/_default/params.toml" >}}

## Versioned documentation

Use the following extended settings in the `docs` section of the `site parameters` to enable versioned documentation:

| Setting         | Default | Description |
|-----------------|---------|-------------|
| contentPath     | -       | Defines the path (usually a section) relative to the `content` folder that maintains the documentation. Each release is expected to be stored in a separate folder within this folder. For example, the documentation with version `1.0` is expected to be maintained in `content/en/docs/1.0`   (when using English as default language). |
| overview        | -       | If set, adds a version overview link to the version switcher in the main navigation, for example `/docs/versions/`. |
| latest          | -       | Defines the latest available version, used by `checkVersion` to validate if a version is current. |
| checkVersion    | false   | If set, adds an alert to inform your users that they are not looking at the latest version of the available documentation. Specify the latest available version in latest. The alert links to the `latestURL`. |
| latestURL       | -       | Link used by `checkVersion` when a newer version has been detected, e.g. `https://version-demo.gethinode.com/docs/`. |

Add each available version to `[[docs.releases]]`. The releases support the following arguments:

| Setting   | Default | Description |
|-----------|---------|-------------|
| label     | -       | Name of the release version, e.g. `v1.0`. When `url` is empty, the label is used for grouping instead. |
| url       | -       | Local URL of the release, e.g. `/docs/1.0/`. |
| latest    | false   | If set, adds the suffix `latest` to the label in the version switcher. |
| redirect  | -       | If set, generates a server-side rewrite rule. You will need to [configure server-side redirection]({{% relref "server-side-redirection" %}}) too. |


---

---
title: Fonts
description: Configure a specific font to style your website.
date: 2024-02-13
layout: docs
---

Hinode uses a configurable font stack that includes support for Emoji across browsers and devices. Review the configuration settings below on how to update the font.

## Font configuration

Hinode uses a font stack that includes support for Emoji across browsers and devices. You can adjust the main font in the `/config/_default/params.toml` file in the `style` section. You can either use fonts from an external provider or serve them locally. To improve performance, Hinode serves the Inter font locally by default.

{{< docs name="font" file="config/_default/params.toml" >}}

### External fonts

Set the `themeFontPath` to the address of your font provider, such as {{< link google_fonts >}}Google Fonts{{< /link >}}:

```toml
themeFontPath = "https://fonts.googleapis.com/css2?family=Inter:wght@200;300;600&display=swap"
```

Hinode enables support for Google Fonts by default. If you use a different font provider, be sure to adjust the Content Security Policy in the [server configuration]({{% relref "server-headers" %}}). The font-face definitions in the file `assets/scss/fonts.scss` are ignored when using an external font.

### Local fonts

To improve performance, Hinode serves the Inter font locally by default. Set the `themeFontPath` to the following local folder:

```toml
themeFontPath = "/fonts"
```

The font files are retrieved from the folder `static/fonts`. The {{< link webfonts_helper >}}google-webfonts-helper{{< /link >}} from Mario Ranftl is a helpful tool to download the correct font files. It also generates the proper font-face definitions. Copy the definitions to the `assets/scss/theme/fonts.scss` file and download the font files themselves to the `static/fonts` folder.

{{< release version="0.23.0-beta" >}}

You can preload the font to improve loading speed. Select the primary font that is used above the page fold. In the next example, we select the `Inter regular` font of type `woff2` to preload. Hinode uses the font file extension to determine the font type automatically.

```toml
themeFontPreload = "/fonts/inter-v12-latin-regular.woff2"
```

### Using multiple fonts

You can configure multiple fonts and apply them to different elements of your site. For example, you could pair a serif font with a sans serif font to get a more distinct look and feel. The following example configures `Fira Sans` as default font. It then configures `PT Serif` font to headings and display headings specifically.

Define the font stack in `params.toml`, separating the family names by a comma:

```toml
[style]
    themeFont = "Fira Sans, PT Serif"
    themeFontPath = "/fonts" # local path
```

Use the {{< link webfonts_helper >}}google-webfonts-helper{{< /link >}} to download the two fonts. Copy the font files to your local `static/fonts` directory. Put the font face definitions in a new file `assets/scss/theme/fonts.scss`.

Hinode now uses `Fira Sans` as default font for the entire site, as it is the first font in our custom font stack. We can then use a small stylesheet configuration to apply the serif font to our headings and display headings. Create a new file `assets/scss/theme/theme.scss` and apply the following style configuration:

```scss
h1, h2, h3, h4, h5, h6, .display-1, .display-2, .display-3, .display-4, .display-5, .display-6 {
    font-family: 'PT Serif';
}
```

## Customization

The font stack is defined in the `assets/scss/common/_variables.scss` file. The variable `$themeFont` is initialized to the value in the [font configuration](#font-configuration).

{{< docs name="font" file="assets/scss/common/_variables.scss" >}}


---

---
title: Languages
description: Configure multiple languages to enable multilingual sites.
date: 2024-09-11
layout: docs
---

{{< release version="v0.6.0" >}}

Hinode supports Hugo's {{< link hugo_lang >}}multilingual mode{{< /link >}} to create websites with multiple languages side by side. The next paragraphs explain how to configure multiple languages, how to provide content translations, and how to define multilingual messages and keywords.

## Language configuration

> [!IMPORTANT]
> By default, Hinode removes special characters from page descriptions to improve readability. Your language may include specific diacritics or other characters that should not be removed. Refine the {{< link "modules#configuring-modules" >}}module configuration{{< /link >}} to adjust or bypass the default character filter (`utils.filter`).

Define the languages available to your site in the main site configuration. The below configuration shows the default configuration set in `config/_default/languages.toml` for the English language.

{{< docs name="lang-main" file="config/_default/languages.toml" >}}

The default behavior is set in `config/_default/hugo.toml`. For example, you can set the `defaultContentLanguageInSubdir` to `false` to remove the language slug `/en` from your site entirely.

{{< docs name="language" file="config/_default/hugo.toml" >}}

## Site configuration

> [!IMPORTANT]
> You may need to adjust the mount configuration pending on the setup of your site. The Hinode theme mounts the folder `content` by default, which includes a basic site index defined in `_index.md`. Override this file or disable the `content` mount entirely (usually defined in `config/_default/hugo.toml`) if you encounter any issues.

You need to the define the menu and social media buttons for each configured language. You can use the file `config/_default/menus/menus.en.toml` as starting point for the menu configuration. The same file also defines the available social media buttons and their labels. More information is available in the {{< link "/docs/configuration/navigation/#main-navigation" >}}main navigation configuration{{< /link >}}.

The labels of the social media footer are defined in `config/_default/languages.toml` by default. Add the `title` and `caption` parameters for each defined language code:

```toml
[en]
    [en.params.social]
        title = "Follow me"
        caption = "The latest news"
```

## Content translation

Hugo supports multiple ways to define translated content. Hinode uses an approach to define translations in separate directories for each language. In the default settings, content for the English language is defined in the folder `content/en`. It is recommended to use the same filename for each page translation. This enables Hugo to recognize if a page translation is available. Hinode links to this translation in the main navigation bar.

For example, consider the `About` page. It is available in both English and Dutch. The content files are defined in `content/en/about.md` and `content/nl/about.md`. Hugo now recognizes the page is available in two languages. To translate the URL for the Dutch page, a `slug` is defined the page's frontmatter:

```yml
---
slug: "over-mij"
---
```

The English page is available by navigating to `/en/about` and the Dutch translation is available on `/nl/over-mij`. The [main navigation]({{% ref "navigation#main-navigation" %}}) item shows a language switcher for both translations.

## Internationalization

Hinode uses Hugo's {{< link hugo_i18n >}}internationalization function{{< /link >}} to translate keywords and messages. Translations are available in English, Dutch, and German. For example, the translation for the word `about` in the Dutch language is defined in `i18n/nl.yaml` (strictly speaking, it translates to `about me`).

```yml
# Content
- id: about
  translation: "Over mij"
```


---

---
title: Layout
description: Hinode uses a grid-based, responsive design for the home page, single pages and list pages.
date: 2024-09-04
layout: docs
---

Hinode uses Bootstrap's {{< link bs_grid >}}grid system{{< /link >}} and {{< link bs_breakpoints >}}breakpoints{{< /link >}} to create a responsive layout across devices or viewport sizes. All pages follow the same base layout, which includes headers and footers. The next paragraphs explain the layout styles in more detail.

## Base layout

The base layout defines a page skeleton of which all other pages are derived. It consists of four major sections, being a header, body, social footer, and bottom footer. It also loads sytlesheets, scripts, and generates the metadata. The header includes the [main navigation]({{% ref "navigation#main-navigation" %}}) and can be optionally fixed to the top. The width of the base layout is maximized to 1320 pixels (see the `container-xxl` setting of the {{< link bs_container >}}Bootstrap containers{{< /link >}}). The height is set to a least 100% of the viewport, to ensure the footer is always aligned to the bottom on the page.

### Example

The following diagram illustrates the conceptual base design:

{{< card-group color="info" cols="1" padding="3" class="text-center bg-opacity-10 text-body" wrapper="border rounded-3 my-4 p-4" >}}
    {{< card >}}Header .col-12 *(optionally fixed)*{{< /card >}}
    {{< card >}}
Body .col-12 .flex-fill

*vertically expands to fill viewport*
    {{< /card >}}
    {{< card >}}Social .col-12{{< /card >}}
    {{< card >}}Footer .col-12{{< /card >}}
{{< /card-group >}}

### Configuration

Hinode uses several settings from Hugo's {{< link hugo_config >}}main configuration{{< /link >}}. Several extensions are defined in the {{< link hugo_config_dir >}}custom site parameters{{< /link >}} and {{< link hugo_lang_config >}}language-specific configuration{{< /link >}}.

#### Main configuration

The base layout uses the {{< link hugo_config >}}main configuration{{< /link >}} of Hugo. The settings below are actively used by Hinode:

| Setting       | Default | Description |
|---------------|---------|-------------|
| title         | -       | Title of the website, joined with the separator and title of the current page. |
| copyright     | -       | Copyright notice added to the page footer. |
| enableGitInfo | -       | Enables git information, which is used by [documentation pages]({{% relref "content-management#documentation-layout" %}}). |

The below configuration shows the default configuration set in `config/_default/hugo.toml`.

{{< docs name="main" file="config/_default/hugo.toml" >}}

#### Extended configuration

> [!IMPORTANT]
> The `--minify` flag of `hugo` purges HTML whitespace by default. Unfortunately, this also removes the spacing behind the visual cue of external links. When setting `externalLinks.cue` to `true`, be sure to add the following configuration to your main configuration to suppress the removal of whitespace:
>
> ```toml
> [minify]
>   [minify.tdewolff.html]
>     keepWhitespace = true
> ```

Hinode uses the following extended settings in the `main` section of the `site parameters`:

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Setting            | Default           | Description |
|--------------------|-------------------|-------------|
| separator          | "-"               | Separator to join the website title and page title. |
| description        | -                 | Short description of the website that is added to the page metadata. |
| enableDarkMode     | true              | Enables switcher for [light mode and dark mode]({{% relref "color-modes" %}}). |
| modes              | ["light", "dark"] | Supported color modes, used as identifier for color-mode aware images. |
| endorse            | true              | By default, the theme adds a link to Hinode in the page's footer. You can disable it by setting `endorse` to `false`, but we would appreciate it if you leave it enabled. |
| footerBelowFold    | false             | If set, pushes the footer including social links to below the page fold. |
| loading            | "eager"           | {{< release version="v0.21.0" short="true" size="sm" inline="true" >}} Sets the default loading behavior of images below the page fold. Supported values are either "eager" (default) or "lazy". In practice, Hinode can only determine if an image is below the page fold when `fullCover` is set to true and the current page is a list page or the homepage. The [image shortcode documentation]({{% relref "image" %}}) provides more details.|
| canonifyAssetsURLs | false             | If set, makes permalinks to site assets (favicons, images, scripts, and stylesheets) absolute instead of relative. |
| breakpoint         | "md"              | {{< release version="v0.21.7" short="true" size="sm" inline="true" >}} Breakpoint for single pages and list pages to start showing the sidebar navigation and table of content panel. Card groups use the same breakpoint to decide how many columns to display in the current viewport. |
| externalLinks.cue  | false             | If set, adds a visual cue `{{< icon class="fas up-right-from-square fa-2xs" spacing=false >}}` as suffix to [managed external links]({{% relref "links-and-cross-references#managed-links" %}}). |
| externalLinks.tab  | false             | If set, opens [managed external links]({{% relref "links-and-cross-references#managed-links" %}}) in a new browser tab using the HTML attributes `target="_blank" rel= "noopener noreferrer"`. |
| build.transpiler   | "libsass"         | {{< release version="v0.20.0" short="true" size="sm" inline="true" >}} Defines the Sass transpiler to be used, either "libsass" (default) or "dartsass". The Dart Sass transpiler requires {{< link hugo_sass >}}installation of a separate binary on your machine{{< /link >}}. This includes any production servers used for {{< abbr "CI/CD" >}} automation and deployment.|
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

The below configuration shows the default configuration set in `config/_default/params.toml`.

{{< docs name="main" file="config/_default/params.toml" >}}

#### Message configuration

{{< release version="v0.14.4" >}}

You can show informative messages using the [toast shortcode]({{% relref "toast" %}}). By default, toast messages are displayed in the bottom right of the viewport. Hinode vertically stacks multiple toast messages automatically. Adjust the configuration by adjusting `messages` in the `site parameters`. The following arguments are supported:

| Setting         | Default        | Description |
|-----------------|----------------|-------------|
| placement       | "bottom-right" | Optional position of the toast messages relative to the viewport: "top-left", "top-center","top-right", "middle-left", "middle-center", "middle-right", "bottom-left", "bottom-center", or "bottom-right" (default). |

The below configuration shows the default configuration set in `config/_default/params.toml`.

{{< docs name="messages" file="config/_default/params.toml" >}}

#### Social sharing configuration

{{< release version="v0.14.3" >}}

Hinode can optionally add buttons to share a post via available social media. Use the following extended settings in the `sharing` section of the `site parameters` to configure these buttons:

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Setting         | Default       | Description |
|-----------------|---------------|-------------|
| enabled         | false         | Define if social sharing should be enabled for all single pages. You can override this setting by adding `sharing: false` to the individual page's frontmatter.
| sort            | "weight"      | Sorting key to be used, either `name` or `weight`. You can also reference a custom key defined in the provider configuration. |
| reverse         | false         | Flag to indicate if the sorting of the social sharing buttons should be reversed, defaults to false. |
| webshare        | false         | Flag to indicate if native sharing provided by the Operating System should be enabled (via the web share API). If set and {{< link caniuse_webshare >}}supported by the browser{{< /link >}}, an additional button is added. |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

Add each available provider to `[[sharing.providers]]`. The providers support the following arguments:

| Setting   | Default | Description |
|-----------|---------|-------------|
| name      | -       | Name of the provider, added as assistive title to improve accessibility. |
| url       | -       | Parameterized URL of the social media provider. The `url` supports the parameters `{url}` and `{title}`. The `{url}` is replaced with the page's permalink, and `{title}` with the page's title. |
| icon      | -       | Shorthand notation of the [Font Awesome icon]({{% relref "../content/icons" %}}) to be used as button, e.g. `fab linkedin`. |
| weight    | -       | Weight of the social sharing button, to be used as sorting key. |
| clipboard | false   | If set, the defined url is copied to the clipboard instead of being opened. A [toast message]({{% relref "toast" %}}) is shown to inform the user. |

The below configuration shows the default configuration set in `config/_default/params.toml`.

{{< docs name="sharing" file="config/_default/params.toml" >}}

#### Language-specific configuration

Hinode supports {{< link hugo_lang_config >}}multilingual content{{< /link >}}. The following parameters are used in the site's footer, header, and meta data. Refer to the [languages]({{% ref "languages" %}}) section to review the various configuration options to enable multilingual content.

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Section | Setting       | Default | Description |
|---------|---------------|---------|-------------|
| head    | tagline       | -       | Tagline used on the site's title for the home page. |
| feature | link          | -       | {{< release version="v0.18.0" short="true" state="deprecated" size="sm" inline="true" >}} Modify `content/{LANG}/_index.md` directly (`{LANG}` is optional, pending on your [language settings]({{% relref "languages" %}})). |
| feature | caption       | "About" | {{< release version="v0.18.0" short="true" state="deprecated" size="sm" inline="true" >}} See `feature.link`. |
| social  | title         | -       | Title displayed in the site's social footer. |
| social  | caption       | -       | Caption displayed in the site's social footer. |
| footer  | license       | -       | License displayed on the site's footer. |
| footer  | socialTitle   | -       | {{< release version="v0.18.0" short="true" state="deprecated" size="sm" inline="true" >}} Use `social.title` instead. |
| footer  | socialCaption | -       | {{< release version="v0.18.0" short="true" state="deprecated" size="sm" inline="true" >}} Use `social.caption` instead. |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

The below configuration shows the default configuration set in `config/_default/languages.toml` for the English language.

{{< docs name="lang-param" file="config/_default/languages.toml" >}}

## Home page

The home page introduces a feature section and several [configurable sections]({{% relref "#page-sections" %}}). The default home page of Hinode displays the three most recent blog posts and projects, each rendered as cards in a separate section. A button that links to the related list page is added below each group. The feature section can optionally cover the entire viewscreen.

### Example

The following diagram illustrates the conceptual layout of the home page:

{{< card-group color="body-tertiary" cols="1" padding="3" class="text-center bg-opacity-10 text-body" wrapper="border rounded-3 my-4 p-4" >}}
    {{< card >}}Header .col-12{{< /card >}}
    {{< card color="info" >}}
Feature .col-12 .flex-fill

*vertically expands to fill viewport*
    {{< /card >}}
    {{< card color="info" >}}Section 1 .col-12{{< /card >}}
    {{< card color="info" >}}Section 2 .col-12{{< /card >}}
    {{< card color="info" >}}Section ... .col-12{{< /card >}}
    {{< card >}}Social .col-12{{< /card >}}
    {{< card >}}Footer .col-12{{< /card >}}
{{< /card-group >}}

### Configuration

The configuration of the home page is set in the `home` section of the `site parameters`. The following settings are supported:

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Setting             | Default           | Description |
|---------------------|-------------------|-------------|
| sections            | All root sections | Sections to include on the home page, e.g. `["blog", "projects"]` - defaults to {{< link hugo_sections >}}all root sections.{{< /link >}} |
| featurePhoto        | -                 | {{< release version="v0.18.0" short="true" state="deprecated" size="sm" inline="true" >}} Use `thumbnail` of the homepage (e.g. `content/_index.md`) instead. |
| fullCover           | false             | Flag to indicate if the feature element should cover the entire front page. |
| style               | -                 | Optional class attributes to add to the main `<div>` element of the base page. Applies to the homepage only.        |
| feature.orientation | "stacked"         | {{< release version="v0.21.0" short="true" size="sm" inline="true" >}} Orientation of the featured section, either "stacked" (default) or "horizontal". |
| feature.color       | -                 | {{< release version="v0.21.0" short="true" size="sm" inline="true" >}} Optional background color of the featured section, used in conjunction with `style.themeOpacity` in the site's parameters. |
| feature.width       | 6                 | {{< release version="v0.21.0" short="true" size="sm" inline="true" >}} Optional column width of the main featured section, supported values are 1 - 12. |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

The below configuration shows the default configuration set in `config/_default/params.toml`. The `sections` are commented out, meaning all root sections are enabled by default.

{{< docs name="home" file="config/_default/params.toml" >}}

## List pages

> [!NOTE]
> List pages support {{< link hugo_content_view >}}content view templates{{< /link >}} since release {{< release version="v0.21.0" short="true" type="link" >}}. Set the `type` in the page's frontmatter.

List pages define one [configurable section]({{% relref "#page-sections" %}}) for the available content within the page bundle. By default, list pages display the most recent nine items as card group. If the section contains more items, a paginator is added below the card group. Adjust the setting `pagerSize` in the {{< link hugo_pagination >}}main configuration{{< /link >}} as needed.

### Example

The following diagram illustrates the conceptual layout of a list page:

{{< card-group color="body-tertiary" cols="1" padding="3" class="text-center bg-opacity-10 text-body" wrapper="border rounded-3 my-4 p-4" >}}
    {{< card >}}Header .col-12{{< /card >}}
    {{< card color="info" >}}
Section .col-12

*optional paginator*
    {{< /card >}}
    {{< card >}}Social .col-12{{< /card >}}
    {{< card >}}Footer .col-12{{< /card >}}
{{< /card-group >}}

### Configuration

The list page uses the [configuration of a single section]({{% relref "#configuration-4" %}}).

## Single pages

> [!IMPORTANT]
> Single pages support {{< link hugo_content_view >}}content view templates{{< /link >}} since release {{< release version="v0.21.0" short="true" type="link" >}}. Set the `type` in the page's frontmatter. The `type` parameter replaces the previous `layout` parameter.

Single pages follow the base layout but introduce two columns next to the body content. The left column shows a [sidebar navigation]({{% ref "navigation#sidebar-navigation" %}}) if applicable and is left empty otherwise. The right column shows a [table of contents]({{% ref "navigation#table-of-contents" %}}) for the current page if applicable. On smaller viewscreens, the sidebar navigation folds into an offcanvas element, whilst the table of contents is hidden. On medium-sized screens the sidebar navigation takes precedence over the table of contents. The following diagram illustrates the base layout (note: this may best be viewed on a larger screen).

{{< card-group color="body-tertiary" cols="auto" padding="3" class="text-center bg-opacity-10 text-body d-fluid" wrapper="border rounded-3 my-4 p-4" >}}
    {{< card class="col-12" >}}Header .col-12{{< /card >}}
    {{< card color="info" class="col-12 col-lg-2 flex-grow-1 d-none d-lg-block" >}}
Sidebar

*sticky*
    {{< /card >}}
    {{< card color="info" class="col-12 col-lg-6 mx-lg-4" >}}
Body .col-8 .flex-fill

*expands to fill viewport*
    {{< /card >}}
    {{< card color="info" class="col-12 col-lg-2 flex-grow-1 d-none d-lg-block" >}}
TOC

*sticky*
    {{< /card >}}
    {{< card class="col-12" >}}Social .col-12{{< /card >}}
    {{< card class="col-12" >}}Footer .col-12{{< /card >}}
{{< /card-group >}}

Single pages support three optional layout types, which can be configured in the page's frontmatter. The next paragraphs describe each layout type in more detail. These layout types apply to the body section of the base layout.

### Default layout

By default, single pages, such as a blog page, include multiple elements, such as a rich header, thumbnail, body, and footer. The following diagram illustrates the default layout of a single page.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< card-group color="info" cols="1" padding="3" class="text-center bg-opacity-10 text-body" wrapper="border rounded-3 my-4 p-4" >}}
    {{< card >}}
**Page header**

Metadata

Tags

Description

{{</* fas image */>}} Thumbnail
    {{< /card >}}
    {{< card >}}**Page content**{{< /card >}}
    {{< card >}}
**Page footer**

Navigation links
    {{< /card >}}
{{< /card-group >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Documentation layout

Documentation pages use a more straightforward, simplified layout compared to the default layout. Configure the following setting to the page's frontmatter to apply the documentation layout:

```yml
---
type: docs
---
```

The following diagram illustrates the documentation layout of a single page.

{{< card-group color="info" cols="1" padding="3" class="text-center bg-opacity-10 text-body" wrapper="border rounded-3 my-4 p-4" >}}
    {{< card >}}
**Page header**

Description
    {{< /card >}}
    {{< card >}}**Page content**{{< /card >}}
    {{< card >}}
**Page footer**

Git metadata
    {{< /card >}}
{{< /card-group >}}

### Minimal layout

Pages with a minimal layout are similar to documentation pages, but do not include a footer at all. Configure the following setting to the page's frontmatter to apply the minimal layout:

```yml
---
type: minimal
---
```

The following diagram illustrates the minimal layout of a single page.

{{< card-group color="info" cols="1" padding="3" class="text-center bg-opacity-10 text-body" wrapper="border rounded-3 my-4 p-4" >}}
    {{< card >}}
**Page header**

Description
    {{< /card >}}
    {{< card >}}**Page content**{{< /card >}}
{{< /card-group >}}

### Configuration

Please refer to the [content management section]({{% relref "content-management#single-pages" %}}) to review the elements available in the page's frontmatter. You can also set the default behavior by page type in the `pages` section of the site parameters. For example, the following configuration hides the modification date of all news articles, unless overridden in the page's frontmatter.

```toml
[pages]
    [pages.news]
        metadata = "original"
```

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Setting      | Default              | Description |
|--------------|----------------------|-------------|
| metadata     | "full"               | {{< release version="v0.21.2" short="true" size="sm" inline="true" >}} Defines the metadata to include in the header of a single page type. Supported values are "full" (default), "original", and "none". In the default configuration, the header includes metadata elements for the original publication date, modification date (if applicable), reading time, and word count. When set to `original`, the modification date is always omitted. Set `metadata` to `none` to suppress all metadata elements. |
| sharing         | true              | {{< release version="v0.21.2" short="true" size="sm" inline="true" >}} Optional flag to indicate if a single page should include sharing options (when the {{< link "#social-sharing-configuration" >}}social sharing configuration{{< /link >}} is enabled). |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

The configuration of the **documentation pages** is set in the `docs` section of the site parameters. The following settings are supported:

| Setting      | Default | Description |
|--------------|---------|-------------|
| version      | -       | Default version to use in documentation links. |
| basePath     | -       | Base path to use for file references. |
| github       | -       | Repository URL for the docs site, overrides `schema/github` in  `config/_default/params.toml`. |
| release      | -       | Release url for the docs site, e.g. `https://github.com/gethinode/hinode/releases/tag/`. This setting is used by the [release shortcode]({{% relref "release" %}}).

The below configuration shows the default configuration set in `config/_default/params.toml`.

{{< docs name="version" file="./config/_default/params.toml" >}}

## Page sections

Both the home page and the list page use one or more page sections to display a sorted list of items. The lists can contain either [regular pages  or page snippets]({{% relref "content-organization" %}}). The next paragraphs describe the three available layout types.

### Card layout

The card layout displays a group of cards in a grid. The default setting is to show nine items at a time. You can adjust these settings in the [page section configuration]({{% relref "#configuration-4" %}}), including the style of the cards themselves. Refer to the [card shortcode documentation]({{% relref "card" %}}) to review the available card styles. The next diagram illustrates a typical card layout.

{{< card-group color="info" cols="3" padding="3" gutter="3" class="text-center bg-opacity-10 text-body" wrapper="border rounded-3 my-4 p-4" >}}
    {{< card >}}Item 1{{< /card >}}
    {{< card >}}Item 2{{< /card >}}
    {{< card >}}Item 3{{< /card >}}
    {{< card >}}Item 4{{< /card >}}
    {{< card >}}Item 5{{< /card >}}
    {{< card >}}Item 6{{< /card >}}
    {{< card >}}Item 7{{< /card >}}
    {{< card >}}Item 8{{< /card >}}
    {{< card >}}Item 9{{< /card >}}
{{< /card-group >}}

### List layout

The list layout shows the page bundle's items as a vertical list. The thumbnail alternates between being left-aligned and right-aligned for each row. Remove the `description` from the page's frontmatter to display the full content instead of the description. The content of the item is displayed next to the thumbnail.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< card-group color="info" cols="2" padding="3" gutter="3" responsive=false class="text-center bg-opacity-10 text-body" wrapper="border rounded-3 my-4 p-4" >}}
    {{< card >}}{{</* fas image */>}}{{< /card >}}
    {{< card >}}Item 1{{< /card >}}
    {{< card >}}Item 2{{< /card >}}
    {{< card >}}{{</* fas image */>}}{{< /card >}}
    {{< card >}}{{</* fas image */>}}{{< /card >}}
    {{< card >}}Item 3{{< /card >}}
{{< /card-group >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Nav layout

The nav layout shows a nav element where each tab pane represents a single item of the page bundle. Remove the `description` from the page's frontmatter to display the full content instead of the description. The tab pane shows the content of the selected item.

{{< card-group color="info" cols="auto" padding="3" class="text-center bg-opacity-10 text-body" wrapper="border rounded-3 my-4 p-4" >}}
    {{< card class="col-7" >}}**Item 1** | Item 2 | Item 3{{< /card >}}
    {{< card class="col-12" >}}Content .col-12{{< /card >}}
{{< /card-group >}}

### Configuration

The configuration of each section is set in the `sections` setting of the `site parameters`. The entire configuration is fully optional and uses default settings if omitted. The following settings are supported per section:

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Setting      | Default              | Description |
|--------------|----------------------|-------------|
| title        | ""                   | Title of the section on the home page. It overrides the title of the page bundle. On list pages, the title defined in the page bundle's frontmatter is used instead. When using a multi-lingual site, make sure to properly translate this setting. |
| reference    | "More {{section}}"   | {{< release version="v0.18.0" short="true" size="sm" inline="true" >}} Caption of the button that links to the section's associated list page (if applicable). By default, the title is set to "More {{section}}", where `{{section}}` is the section title in plural. When using a multi-lingual site, make sure to properly translate this setting. |
| layout       | "card"               | Layout of the section, either "card" (default), "list", or "nav". |
| sort         | "date"               | Sorting key to be used, based on a frontmatter parameter. Examples are "date" (default), "lastmod", "weight", or "title". You can also use custom parameters, as long as they are defined in the page's frontmatter. |
| reverse      | true                 | Flag to indicate the sorting of the section content should be reversed, defaults to true. |
| nested       | true                 | Flag to indicate the content should be listed recursively for the entire {{< link hugo_sections >}}section{{< /link >}}. You can override this setting for individual branch bundles by adding `nested` to the page's frontmatter. |
| background   | -                    | Theme color of the section background, either "primary", "secondary", "success", "danger", "warning", "info", "light", "dark", "white", "black", "body", or "body-tertiary". By default, no color is specified. The background expands across the entire viewport (thus is not constrained to the page's maximum width of 1320 pixels). |
| color        | -                    | Theme color of the section elements, either "primary", "secondary", "success", "danger", "warning", "info", "light", "dark", "white", "black", "body", or "body-tertiary". By default, no color is specified. |
| style        | "border-0 card-zoom" | Optional styling attributes added to selection elements, e.g. "border-0" to remove the borders. |
| wrap         | false                | {{< release version="v0.21.0" short="true" size="sm" inline="true" >}} Optional flag to enable word wrapping of tab titles, defaults to false. |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

The `card` layout supports the following additional arguments:

| Setting      | Default      | Description |
|--------------|--------------|-------------|
| cols         | 3            | Number of columns to display in the card group, should be a value between 1 and 5. The default value is 3. |
| padding      | "auto"       | Padding of the content, either "0", "1", "2", "3", "4", "5", or "auto" (default). |
| header       | "full"       | Header components of the card, displayed in small caps. Supported values are "full" (default), "publication", "tags", and "none". |
| footer       | "none"       | Footer components of the card, displayed in small caps. Supported values are "full", "publication", "tags", and "none" (default). |
| orientation  | "stacked"    | Placement of the thumbnail, either "stacked" (default), "horizontal", or "none". |
| homepage     | 3            | Maximum number of items to display on the home page (if defined in the [configuration](#configuration-1)), defaults to 3. |
| separator    | false        | Flag to indicate a horizontal line should be added between items on small screens. |

The `nav` layout supports the following additional arguments:

| Setting      | Default      | Description |
|--------------|--------------|-------------|
| type         | "pills"      | Optional type of the tab group, either "tabs", "pills" (default), or "underline". |
| vertical     | "false"      | Optional flag to show vertical tabs instead of horizontal tabs (default). |
| class        | ""           | Optional class attribute of the tab group, e.g. “nav-fill”. |
| pane         | "none"       | Optional style of the panes, either "none" (default) or "persona". |
| width        | 100          | Optional responsive width of the tab group, either 50 or 100 (default). |

The below configuration shows an example configuration of the [guides available on this site]({{% relref "guides" %}}). The configuration is set in `config/_default/params.toml`.

{{< docs name="sections" file="./config/_default/params.toml" >}}


---

---
title: Metadata
description: 
date: 2023-01-18
layout: docs
---

{{% comment %}}<!-- TODO: expand -->{{% /comment %}}


---

---
title: Modules
description: Customize and extend Hinode with Hugo modules.
date: 2024-10-21
layout: docs
---

{{< release version="v0.16.0" >}}

Hinode supports {{< link hugo_modules >}}Hugo modules{{< /link >}} to provide a flexible and extensible modular framework. By default, Hinode includes core building blocks for {{< link bootstrap >}}Bootstrap{{< /link >}}, {{< link flexsearch >}}FlexSearch{{< /link >}}, and {{< link fontawesome >}}Font Awesome{{< /link >}}. The following paragraphs explain how to customize the module configuration.

## Importing modules

By default, the Hinode template imports Hinode as module itself. In this approach, the modules that Hinode includes are imported as transitive modules. Adjust the `module` section in your site's configuration file `config/_default/hugo.toml` to import or adjust the required modules. Visit the Hugo documentation to {{< link hugo_module_config >}}review all available configuration settings{{< /link >}}. You can {{< link hugo_module_config_import >}}disable individual modules{{< /link >}} by setting `disable` to `true`.

```toml
  [[module.imports]]
    path = "github.com/gethinode/hinode"
```

The main repository of Hinode imports the following modules by default.

{{< docs name="modules" file="config/_default/hugo.toml" >}}

## Configuring modules

> [!NOTE]
Hinode uses the default configuration defined in each referenced module since release {{< release version="v0.24.0" short="true" type="link" >}}. You can override these settings in your site parameters.

You can choose to either fully integrate compatible modules or to include them on a page-by-page basis. For example, you might only want to display an interactive map on a few pages. In this case, you could choose to include the `leaflet` module on an opt-in basis. This ensures the page size is minimized. On the other hand, as `bootstrap` is used on every single page, it makes sense to include it as a core module.

For core modules, Hinode bundles the provided [stylesheet files]({{% relref "styles" %}}) and [JavaScript files]({{% relref "scripts" %}}) into the main stylesheet and core script bundles. For optional modules, Hinode prepares separate stylesheet files and JavaScript files for each individual module. The configuration order of the core modules is important: **the first module is processed before the next modules**.

> [!NOTE]
> Hugo uses two different algorithms to merge the filesystems, depending on the file type:
>
> - For `i18n` and `data` files, Hugo merges deeply using the translation ID and data key inside the files.
> - For `static`, `layouts` (templates), and `archetypes` files, these are merged on file level, so the left-most file will be chosen.

Adjust the `modules` section in your site's parameter configuration file `config/_default/params.toml` to configure the various modules. Modules can include files for each of the following folders: `archetypes`, `assets`, `content`, `data`, `i18n`, `layouts`, `static`. Modules can also have their own configuration files. Each module needs to be imported as well ([see the previous paragraph]({{% relref "#configuring-modules" %}})).

{{< release version="v0.24.0" >}}

The following table provides an overview of the available settings for each module. Omit the `mod-` prefix of the module's name.

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Setting         | Default       | Description |
|-----------------|---------------|-------------|
| integration     | optional      | Module integration, either `core` or `optional`. Core modules are fully integrated with the Hinode site, including stylesheets and Javascript bundles. The modules are processed in order of priority, with the first module taking precedence. Optional modules are only included on those pages that reference the module in the frontmatter. Hinode includes the following core modules by default: ["bootstrap", "flexsearch", "fontawesome"]. |
| excludeSCSS     | false | Excludes the module from the stylesheet processing pipeline. Use this setting to get more control of when and where to include the module's stylesheet. For example, the Bootstrap stylesheet is imported by the main stylesheet after initializing the theme variables, but before the custom component styles. |
| disableTemplate | false         | Excludes all scripts files from processing as Hugo template. The scripts are bundled as-is instead. This only applies to optional modules. |
| localize        | false         | {{< release version="v0.25.0" short="true" size="sm" inline="true" >}} Triggers the creation of a language-specific bundle file. The language code is appended as suffix to the base name. For example, the English version of `js/main.bundle.js` becomes `js/main.bundle.en.js`. |
| category        | other         | {{< release version="v0.27.0" short="true" size="sm" inline="true" >}} Assigns the module's scripts to a category used for cookie consent. Available values are `necessary`, `functional`, `analytics`, `performance`, `advertisement`, and `other`. See {{< link "cookie-consent" />}} for more details. |
| local           | false         | {{< release version="v0.27.0" short="true" size="sm" inline="true" >}} Includes an external URL in local mode too. By default, external scripts are only included in the built site. |
| url             |               | {{< release version="0.27.0" short="true" size="sm" inline="true" >}} Optional url for an external link. If set, the link is included in the page header or page body, pending `integration` type. See the {{< link "/docs/advanced-settings/scripts" >}}scripts documentation{{< /link >}} for more information. |
{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}

For example, Bootstrap uses the following configuration in its module configuration:

```toml
[params.modules.bootstrap]
  integration = "core"
  excludeSCSS = true
```

## Configuring module-specific extensions

Several modules support additional, module-specific configurations. Review them in the next paragraphs.

### CookieYes

{{< release version="v0.27.0" >}}

The `cookieyes` module requires the following settings:

| Setting                   | Default | Description |
|---------------------------|---------|-------------|
| cookieyes.local           | false   | Trigger to force include the CookieYes scripts, bypassing other settings. Use this setting for debugging and testing only. |
| cookieyes.url             |         | Link to your personalized CookieYes script. See the installation code in the advanced settings of your CookieYes account. The code is available by clicking the button next to the cookie banner status. The link has the following pattern: `https://cdn-cookieyes.com/client_data/{installation code}/script.js`. |

### Font Awesome

{{< release version="v0.17.0" >}}

The `fontawesome` module supports the following additional settings:

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Setting                 | Default | Description |
|-------------------------|---------|-------------|
| fontawesome.embed       | true    | {{< release version="v0.26.3" short="true" size="sm" inline="true" >}} If set, generates a symbol map with embedded vector images. Only works in conjunction with `inline`. Include the symbol map with the partial `assets/symbols.html` (requires the current page context). |
| fontawesome.inline      | true    | If set, uses inline vector images instead of web fonts. Both methods support Font Awesome styling and animation. However, when using vector images you cannot use aliases. Instead, use the default name of the icon. |
| fontawesome.debug       | true    | If set, prints the original code `<i class="[...]" style=[...]></i>` as comments next to the inline vector image. |
| fontawesome.skipMissing | false   | If set, displays a warning when an icon cannot be found. The missing icon is replaced with a dummy. By default, Hinode exits with an error when an icon is missing. |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

### Google Analytics

{{< release version="v0.27.0" >}}

> [!NOTE]
> By convention, Hinode uses kebab case as naming convention for module names. However, the module name in the site parameters is renamed to `GoogleAnalytics` to align with Hugo's privacy settings.

Set you `G-tag` in your site configuration (usually `hugo.toml`) in the following section:

```toml
[services]
  [services.googleAnalytics]
    ID = "G-xxxxxxxxxx"
```

You can modify the privacy configuration in the following section:

```toml
[privacy]
  [privacy.googleAnalytics]
    disable = false
    respectDoNotTrack = false
```

The `google-analytics` module supports the following additional settings:

| Setting                   | Default | Description |
|---------------------------|---------|-------------|
| GoogleAnalytics.local     | false   | Trigger to force include the analytics scripts, bypassing other settings. Use this setting for debugging and testing only. |

### Utils

{{< release version="v0.22.5" >}}

The `utils` module supports the following additional settings:

| Setting                 | Default | Description |
|-------------------------|---------|-------------|
| utils.filter      | `[^0-9A-Za-zŽžÀ-ÿ ;.,\/'’"]` | Defines the regular expression for characters to remove from page descriptions. These page descriptions are used to define card content and metadata for search indexes. Adjust the filter to define which characters to support. You may need to adjust these settings to support specific diacritical letters. |
| utils.raw         | false | Flag to indicate page descriptions should be returned as-is. In this setting, the filter is ignored. |

## Enabling optional modules

You can enable an optional module for a specific page by setting the following value in the page's frontmatter:

```yml
---
modules: ["leaflet"]
---
```


---

---
title: Navigation
description: Help the user navigate your website using configurable navigation elements.
date: 2024-08-14
layout: docs
---

Hinode supports several types of navigation that utilize Bootstrap elements. The main navigation is positioned on the top of the screen and includes a search input element. An optional secondary navigation is available as sidebar. Next to these navigation items, pages may optionally include a breadcrumb to indicate the current page's location within the site's navigational hierarchy. Finally, pages may also include a table of contents element that is linked to the scroll position of the current page.

## Basic configuration

The basic configuration of the navigation elements is set in the `navigation` section of the site parameters. The following settings are supported:

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Setting     | Default | Description |
|-------------|---------|-------------|
| anchor      | -       | Flag indicating to display anchor links on hovering a heading. |
| logo        | -       | Address of the brand logo image, e.g. "/img/logo_embedded.svg". The vector image file is expected to be present in your local `static/img` folder. |
| color       | -       | [Theme color]({{% ref "colors" %}}) of the navigation bar. Set the style to set the correct contrast of the menu items. The navigation bar is transparent when no color is set, but is set to the body color when scrolling to enhance the contrast. |
| style       | "light" | Style of the navigation bar, either "light" or "dark". It changes the colors of the menu items accordingly.  |
| fixed       | false   | Flag indicating to keep the navigation bar fixed at the top of the screen. |
| overlay     | false   | {{< release version="v0.23.0" short="true" size="sm" inline="true" >}} Flag indicating to render the navigation bar as overlay on top of the page body. In this state, the navigation is transparent and the page body starts at the top of the viewport. The navigation becomes opaque when scrolling and is set to the specified theme `color`. |
| overlayMode | "dark"  | {{< release version="v0.23.0" short="true" size="sm" inline="true" >}} Style of the navigation bar when `overlay` is set, either “light” or “dark”. |
| horizontal | false   | {{< release version="v0.21.0" short="true" size="sm" inline="true" >}} Flag indicating the second level navigation should render horizontally. By default, the navbar uses regular dropdown menus instead. |
| offset      | "3em"   | Applies an {{< link bs_navbar_placement >}}offset to main elements{{< /link >}} when `fixed` is set to true. |
| size        | "md"    | Optional breakpoint of the navbar toggler, either "xs", "sm", "md" (default), "lg", or "xl". |
| search      | true    | Flag indicating to include a search input. |
| breadcrumb  | false   | Flag indicating to add breadcrumb navigation to the top of any single page. List pages are excluded. |
| toc         | true    | Flag indicating to enable table of contents globally. Individual pages can override this setting in the frontmatter using the value `includeToc`. |
| sidebar     | true    | Flag indicating to enable sidebar navigation globally. If set, a sidebar is displayed when applicable. |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

The below configuration shows the default configuration set in `config/_default/params.toml`.

{{< docs name="navigation" file="config/_default/params.toml" >}}

## Main navigation

The main navigation uses {{< link hugo_menus >}}Hugo's menu system{{< /link >}} to generate a responsive navigation bar at the top of the page. The navigation bar uses a breakpoint to add a toggler for smaller screens. A language switcher is added automatically if your site supports multiple languages. The language switcher links to the currently translated page if available.

### Menus

The navigation bar uses {{< link hugo_menus >}}Hugo's menu system{{< /link >}} to generate the menu items. The navigation supports nesting at one level deep. Hinode supports three additional parameters:

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Argument  | Required | Description |
|-----------|----------|-------------|
| alias     | No       | If set, the active menu item is linked to the specific menu entry instead of being derived from the target URL. |
| button    | No       | {{< release version="v0.24.10" short="true" size="sm" inline="true" >}} If set, renders the menu item as a (small) button. |
| spacing   | No       | {{< release version="v0.24.10" short="true" size="sm" inline="true" >}} If set, inserts a spacer. All prior menu items are left aligned, whilst the remaining menu items and right aligned. |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

The following example defines an example menu configuration called `sample` (the main configuration is called `main`).

{{< docs name="sample-navigation" file="./config/_default/menus/menus.en.toml" >}}

### Example

The example below illustrates the navigation bar based on the sample configuration defined in the previous paragraph. The `About` and `About (no alias)` menu entries illustrate the behavior of the `alias` parameter. The `GitHub` menu entry shows an icon to indicate it is an external link and opens in a new window.

{{< navbar path="guides" color="body-tertiary" size="sm" search="false" menus="alias" title="Sample" >}}

### Versioning

The main navigation supports versioning too. When configured, a drop-down menu containing the available versions is automatically added. See the [documentation configuration]({{% relref "documentation" %}}) for more details.

### Customization

Hinode includes a navigation bar at the top of the screen by default. You can modify the configuration in the `layouts/_default/baseof.html` file. The navigation bar is also available as [shortcode]({{% ref "navbar" %}}).

The following variables are available to modify the styling of the horizontal navigation. You can override them in `assets/scss/theme/_variables.scss`.

{{< docs name="horizontal-nav" file="assets/scss/common/_variables.scss" >}}

## Sidebar navigation

Hinode supports optional sidebar navigation. It is intended to be used as companion to the main navigation and is typically used in content-heavy sections, such as documentation pages. On smaller screens, the sidebar is replaced with an {{< link bs_offcanvas >}}offcanvas element{{< /link >}}. In this case, the main navigation receives an additional toggler on the left of the screen.

### Menus

> [!IMPORTANT]
> The sidebar recognizes multilingual data files. Add the language code as suffix to your data file. For example, `data/blog.en.yml` defines the sidebar menu of the English translation of the blog section.

Inspired by Bootstrap's documentation site, Hinode uses a separate configuration file for the sidebar menus. A sidebar can be configured for each main section of the site. For example, the sidebar menu of the `docs` section is defined in `data/docs.yml`. The sidebar menu supports group items and single page items. You can optionally provide an internal or external link for the destination page (see the {{< link "docs/components/link" >}}link shortcode{{< /link >}} for its behavior). By default, Hinode derives the destination from the menu item. The below example defines a group section called `Getting started` with three siblings. A single page `About` is added next. The latter redirects to an external website.

```yml
- title: Getting started
  pages:
    - title: Introduction
    - title: Commands
    - title: Contribute
- title: About
  link: https://example.com
```

Menu items can be nested within each other. The below example defines three content pages at the relative path `A/B/C`. The navigation path should be similar to the slug of the individual pages.

```yml
- title: A
  pages:
    - title: B
      pages:
        - title: C
          pages:
            - title: First
            - title: Second
            - title: Third
```

You can define separate data files for each available language in a multilingual site. Add the language code as suffix to your data file. For example, `data/blog.en.yml` defines the sidebar menu of the English translation of the blog section. Hinodes uses `data/blog.yml` as fallback (or any other {{< link hugo_data_sources >}}data format supported by Hugo{{< /link >}}).

### Versioning

{{< release version="v0.15.0" >}}

> [!NOTE]
> Release v0.15.0 of Hinode automatically detects the version of the current context. The configuration of the `version` attribute is no longer needed.

You can create versioned files for your menu data by adding a version suffix to the data file. For example, `data/docs-1.0.yml` contains the menu data for the `docs` menu of version `1.0`. Hinode uses `data/docs.yml` as default sidebar navigation data when no versioned file is available. See the [documentation configuration]({{% relref "documentation" %}}) for additional options.

### Customization

The file `assets/scss/components/_sidebar.scss` contains the styling of the sidebar. It refers to a button `$btn-toggle` that is defined in `assets/scss/common/_icons.scss`. It also defines the spacing to be added to the page's main content section when using a fixed navigation bar:

{{< docs name="sidebar" file="assets/scss/components/_sidebar.scss" >}}

## Breadcrumb

Hinode supports optional breadcrumb navigation. The breadcrumb indicates the current page's location within the site's navigational hierarchy. It is automatically populated by Hugo. Enable the breadcrumb in the [basic navigation configuration](#basic-configuration). If enabled, all single pages will add breadcrumb navigation to the top of the page.

### Example

When enabled, the breadcrumb looks like this:

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* breadcrumb path="breadcrumb" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Customization

The breadcrumb is also available as [shortcode]({{% ref "breadcrumb" %}}).

## Table of contents

Single pages can optionally show an {{< link hugo_toc >}}table of contents{{< /link >}} on the right of the screen. The table of contents is automatically populated based on the headings within the page content (two levels deep). The table of contents is hidden if it has less than two items. On smaller screens, a drop-down menu is added to the top of the page. Enable the table of contents in the [basic navigation configuration](#basic-configuration). If enabled, all single pages will show the element, unless disabled in the page's frontmatter.

### Customization

The file `assets/scss/components/_toc.scss` defines the styling of the table of contents element. It adds spacing to align the element to the sidebar, amongst other styling:

{{< docs name="toc" file="assets/scss/components/_toc.scss" >}}


---

---
title: Content management
description: Use Markdown and templates to define the content for your website.
date: 2024-08-14
layout: docs
---

Hinode uses Markdown and templates to define the content for your website. Hugo is used to generate the final static website. The next paragraph provides an overview of Markdown and the key elements added by Hinode. Three different document layouts are introduced next.

## Overview

Markdown is a simple and easy-to-use markup language. It uses formatting elements in plaintext documents to format documents. Using Markdown is different than using a {{< abbr WYSIWYG >}}editor. Such editors apply the formatting styles as you go. Instead, Markdown shows the formatting codes next to the content. Although this may require getting used to, the advantage is that you have full control over your document. The {{< link markdown_guide >}}Markdown guide{{< /link >}} provides a comprehensive overview of the Markdown format. Hugo supports additional content formats next to Markdown. See Hugo's documentation for a full overview of {{< link hugo_content >}}supported content formats{{< /link >}}.

{{% comment %}}<!-- TODO: insert VS Code screenshot -->{{% /comment %}}

### Front matter

> [!IMPORTANT]
> When using a local file, the page's thumbnail should be available as a global site asset. You cannot use a {{< link hugo_page_resources >}}page resource{{< /link >}} as thumbnail, as the thumbnail image is being referenced on other pages too.

Hinode uses so-called front matter to capture the metadata of a document. The front matter usually includes the document title, the creation date, and a summary description. By convention, the front matter is defined at the top of the document. Hugo supports {{< link hugo_frontmatter >}}four types of front matter formats{{< /link >}}. Hinode uses the {{< abbr YAML >}} format by default, denoted by `---` as the opening and closing tags. The following example shows the front matter of the page you are currently reading.

```yml
---
title: Content management
description: Use Markdown and templates to define the content for your website.
date: 2023-02-19
---
```

Hinode supports the following additional front matter parameters.

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Argument            | Description |
|---------------------|-------------|
| icon                | Shorthand notation for an [icon]({{% relref "icon" %}}) to be used on a [card]({{% relref "card" %}}). |
| photoCredits        | {{< release version="v0.18.0" state="deprecated" inline="true" size="sm" >}} Use `thumbnail.author` instead. |
| photoSource         | {{< release version="v0.18.0" state="deprecated" inline="true" size="sm" >}} Use `thumbnail.origin` instead. |
| searchExclude       | {{< release version="0.21.8" inline="true" size="sm" >}} If true, the current page is excluded from the search index. |
| thumbnail           | URL or local path of the thumbnail image, shorthand notation for `thumbnail.url`. When using shorthand notation, the additional thumbnail metadata is unavailable (and will throw an error when specified). |
| thumbnail.url       | URL or local path of the thumbnail image. When set, be sure to clear the shorthand `thumbnail` value. |
| thumbnail.author    | Name of the thumbnail author, added as caption to the thumbnail on single pages. |
| thumbnail.authorURL | URL of the thumbnail author, added as caption link to the thumbnail on single pages. |
| thumbnail.origin    | Name of the thumbnail origin, e.g. Unsplash or Pexels. |
| thumbnail.originURL | URL of the thumbnail origin, added as caption link to the thumbnail on single pages. |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

### Mixed content

> [!CAUTION]
> Mixing Markdown with HTML is considered unsafe. Hinode disables HTML support by default since release v0.19.0. If you trust the input, you can enable this setting in the {{< link hugo_goldmark >}}Goldmark configuration{{< /link >}}, the default Markdown processor of Hugo. If you disable HTML, you can optionally set `purgeHTMLComments` in `params.debugging` to prevent HTML comments from generating a warning by Goldmark.

As explained in the [overview]({{% relref "#overview" %}}), Hinode uses Markdown to format the content of a document. However, you can mix this content with {{< abbr HTML >}} as needed. The final output is rendered to HTML.

### Templates

Hinode uses several templates to prescribe the final output in HTML. Each template can be overridden with a specific {{< link hugo_lookup_order >}}lookup order{{< /link >}}. In the core, Hinode uses the following templates defined in `layouts/_default`:

```html
└── layouts
    ├── _default
    │   ├── baseof.html  // defines the base layout, including the HTML header and body
    │   ├── list.html    // defines the layout for a list page
    │   └── single.html  // defines the layout for a single page
    └── index.html       // defines the layout for the homepage
```

The [layout section]({{% relref "layout" %}}) provides more details about the available templates.

### Shortcodes

Shortcodes are an addition provided by Hugo to simplify the inclusion of common elements, such as images, buttons, and tooltips. The shortcode calls an template that can contain extensive HTML content. This approach separates raw HTML from your plain Markdown content and promotes reuse. Shortcodes can be defined in two ways:

- `{{</* shortcodename parameters */>}}`: a shortcode without inner text.
- `{{</* shortcodename parameters */>}}Inner content{{</* /shortcodename */>}}`: a shortcode with inner text.

Hugo provides more details about the {{< link hugo_shortcodes >}}usage of shortcodes{{< /link >}}. Hinode provides several shortcodes that wrap common Bootstrap elements. Explore the `components` section in the docs navigation for an overview of the available shortcodes. As an example, the following shortcode displays an image with rounded corners and a 21x9 aspect ratio:

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="img/flowers.jpg" ratio="21x9" caption="Figure caption" class="rounded" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Single pages

Single pages define the content for a specific page, such as the [introduction page]({{% relref "introduction" %}}). Hinodes supports three types of single pages, which can be configured in the front matter. The next paragraphs describe each layout type in more detail. Refer to the [layout section]({{% relref "layout" %}}) to see additional configuration options.

### Default layout

By default, single pages, such as a blog page, include the following elements in the body:

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Element            | Description |
|--------------------|-------------|
| Title | The title of the page as set in the page's frontmatter.|
| Metadata | The date of the page, the modification date (if applicable), the read time, and the amount of words on the page.|
| Tags | Links to any tags defined in the page's frontmatter.|
| Description | The description as defined in the page's frontmatter, or as summarized by Hugo if omitted in the frontmatter.|
| Thumbnail | A thumbnail image with figure caption that links to the photo credits (if defined in the frontmatter).|
| Download | {{< release version="v0.21.0" short="true" size="sm" inline="true" >}} a link to a local file that represents a downloadable version of the current article.|
| Navigation links | Links on the bottom of the page that link to the previous and next page within the current section.|
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

The below example illustrates the parameters used in the page's frontmatter:

```yaml
---
author: Mark Dumay
title: Another project
date: 2021-07-15
description: Another project.
tags: ["javascript", "golang"]
thumbnail: 
    url: img/coffee.jpg
    author: Karl Fredrickson
    authorURL: https://unsplash.com/@kfred
    origin: Unsplash
    originURL: https://unsplash.com/photos/TYIzeCiZ_60
download: /media/article.en.pdf
---
```

### Documentation layout

Documentation pages use a more straightforward, simplified layout compared to the default layout. They include the following elements in their body:

- **Title** - the title of the page as set in the page's frontmatter.
- **Description** - the description as defined in the page's frontmatter, or as summarized by Hugo if omitted in the frontmatter.
- **Metadata** - a revision date and link to the latest git commit on the bottom of the page. Enable `enableGitInfo` in the [main configuration]({{% relref "layout#main-configuration" %}}) for the git commit message to work.

Be sure to select the `docs` layout in the page's frontmatter to enable the documentation layout:

```yml
---
layout: docs
---
```

### Minimal layout

Pages with a minimal layout are similar to documentation pages, but do not include a footer at all:

- **Title** - the title of the page as set in the page's frontmatter.
- **Description** - the description as defined in the page's frontmatter, or as summarized by Hugo if omitted in the frontmatter.

Be sure to select the `minimal` layout in the page's frontmatter to enable the documentation layout:

```yml
---
layout: minimal
---
```


---

---
title: Content organization
description: A structured approach to organize and present content.
date: 2023-08-04
layout: docs
---

Hinode uses a structured approach to {{< link hugo_structure >}}organize and present content{{< /link >}}. This results in user-friendly URLs, which are also easy to crawl by search engines. The following paragraphs describe how to organize the content and how to define alternative paths.

## Organization of content

Hinode recognizes three basic types of pages:

- **List pages** provide an overview of single pages within the same section
- **Single pages** define a specific page that get published to a specific permalink
- **Content snippets** provide input for a specific page, but do not have a permalink of their own

All content resides in the `content` folder of the repository. The content for [multilanguage sites]({{% relref "languages" %}}) uses separate subfolders for each language directly below the `content` folder. Usually a list page is defined by having an `_index.md` within its folder. A notable exception is the home page, which is defined in the `content` root folder. The next diagram illustrates a typical initial setup for a Hinode website that supports the English language.

```text
.
└── content
    └── en                        // <- [Language]
        └── _index.md             // <- [Home page]   https://example.com/en
        └── about.md              // <- [Single page] https://example.com/en/about
        └── blog
        |   ├── _index.md         // <- [List page]   https://example.com/en/posts/
        |   └── first-post.md     // <- [Single page] https://example.com/en/posts/first-post/
        └── features
        |   ├── index.md          // <- [bundle]      not published separately
        |   └── my-feature.md     // <- [snippet]     not published separately
        └── projects
            ├── _index.md         // <- [List page]   https://example.com/en/projects/
            └── first-project.md  // <- [Single page] https://example.com/en/projects/first-project/
```

## Defining alternative paths

You can adjust the path or provide an alias of a page in its [frontmatter]({{% relref "layout#default-layout" %}}). For example, the following aliases ensure the [introduction ]({{% relref "introduction" %}}) of the Hinode docs is available on four alternative paths:

```yml
---
title: Introduction
aliases:
  - "/docs/0.9/getting-started/"
  - "/docs/getting-started/"
  - "/getting-started/"
  - "/docs/"
layout: docs
---
```

Similarly, you can link multiple translations of a page and still provide a language-specific path. See the [languages configuration]({{% relref "languages#content-translation" %}}) for more details.

## Configuring content snippets

{{< release version="v0.12.0" >}}

Hinode supports content snippets that are not published anywhere, unlike list pages and single pages. These snippets can be referenced by regular pages instead. A typical example would be an overview of product features. The features themselves can be listed on the homepage, but do not have a permalink of their own. Content snippets can be [listed like a regular section]({{% relref "layout#page-sections" %}}).

Add a file `index.md` to the root of your section that contains your code snippets (please observe the absence of the '_' prefix). Set the parameter `headless` to `true` in file's frontmatter to {{< link hugo_headless >}}make the section headless{{< /link >}}:

```yml
---
headless: true
---
```


---

---
title: Icons
description: Use out-of-the-box Font Awesome icons to style your website.
date: 2024-08-14
layout: docs
---

Hinode provides out-of-the box access to the free icons of {{< link fontawesome >}}Font Awesome{{< /link >}}. The [shortcodes]({{% relref "icon" %}}) `icon`, `fa`, `fab`, and `fas` are available to add these icons using shorthand notation. The Font Awesome icon library provides various {{< link fa_styling >}}styling options{{< /link >}}. The below paragraphs illustrate how to apply the styling options compatible with Markdown, Bootstrap, and the [content security policy]({{% relref "server-headers" %}}).

## Styling basics

The {{< link fa_icons >}}Font Awesome icon library{{< /link >}} provides access to more than 2.000 free and open-source icons. Simply search for a keyword and review the presented options. For example, searching for the keyword `music` and filtering for `free` returns a list of nearly 30 icons. Use one of the following three [shortcodes]({{% relref "icon" %}}) to add an icon to your Markdown content:

- `fa` - regular Font Awesome icon library
- `fab` - brands Font Awesome icon library
- `fas` - solid Font Awesome icon library

Specify the correct icon library and omit the `fa-` prefix from the icon name to insert an icon.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* fas music */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

The icons inherit the current styling options and as such blend in with text inline. For example, apply the [theme color]({{% relref "colors" %}}) `text-primary` to the paragraph containing the icon to change its color. You can also pass the class attribute directly to the shortcode, such as `text-info`.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* fas music */>}}
{.text-primary}

{{</* fas music text-info */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Sizing icons

Font Awesome supports both relative and absolute sizing. The following two section explain how to apply the sizing to an icon.

### Relative sizing

Font Awesome includes a range of t-shirt based sizes that are relative to the browser's default font size of 16px. The icons align to the inline text. The following example illustrative the available relative sizes.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* fas mug-saucer fa-2xs */>}} When my six o’clock alarm buzzes, I require a pot of good java.

{{</* fas mug-saucer fa-xs */>}} When my six o’clock alarm buzzes, I require a pot of good java.

{{</* fas mug-saucer fa-sm */>}} When my six o’clock alarm buzzes, I require a pot of good java.

{{</* fas mug-saucer fa */>}} When my six o’clock alarm buzzes, I require a pot of good java.

{{</* fas mug-saucer fa-lg */>}} When my six o’clock alarm buzzes, I require a pot of good java.

{{</* fas mug-saucer fa-xl */>}} When my six o’clock alarm buzzes, I require a pot of good java.

{{</* fas mug-saucer fa-2xl */>}} When my six o’clock alarm buzzes, I require a pot of good java.
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

The table below illustrates the relative sizing classes and their equivalent relative and absolute font size.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< table class="table-striped w-auto" >}}
| Relative Sizing Class | Font Size | Equivalent in Pixels |
|----------|--------:|-----:|
| `fa-2x`  | 0.625em | 10px |
| `fa-xs`  | 0.75em  | 12px |
| `fa-sm`  | 0.875em | 14px |
| `fa`     | 1em     | 16px |
| `fa-lg`  | 1.25em  | 20px |
| `fa-xl`  | 1.5em   | 24px |
| `fa-2xl` | 2em     | 32px |
{{< /table >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

### Absolute sizing

Font Awesome also supports absolute sizing on a scale of 1x to 10x. The icons do not necessarily align to their surrounding text. The following example illustrative the various absolute sizes.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* fas camera fa-1x */>}}
{{</* fas camera fa-2x */>}}
{{</* fas camera fa-3x */>}}
{{</* fas camera fa-4x */>}}
{{</* fas camera fa-5x */>}}
{{</* fas camera fa-6x */>}}
{{</* fas camera fa-7x */>}}
{{</* fas camera fa-8x */>}}
{{</* fas camera fa-9x */>}}
{{</* fas camera fa-10x */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

The table below illustrates the absolute sizing classes and their equivalent font size.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< table class="table-striped w-auto" >}}
| Absolute Sizing Class | Font Size |
|---------|--------:|
| `fa-1x` | 1em |
| `fa-2x` | 2em |
| `fa-3x` | 3em |
| `fa-4x` | 4em |
| `fa-5x` | 5em |
| `fa-6x` | 6em |
| `fa-7x` | 7em |
| `fa-8x` | 8em |
| `fa-9x` | 9em |
| `fa-10x` | 10em |
{{< /table >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

### Responsive sizing

Hinode supports responsive sizing of icons using so-called containers. Assigning `wrapper` a value will wrap the icon in a HTML `div` element. Hinode assigns `.fa-wrapper` to the class attribute of the wrapper and `fa-fluid` to the icon itself. The icon is now dynamically resized.

> [!NOTE]
Container support is a relatively new CSS feature that is not supported by all browsers yet. See this overview to {{< link caniuse_container >}}check the current browser support{{< /link >}}. Hinode uses a fixed-size icon with a `font-size` of `5rem` as fallback.

The following example demonstrates a centered, responsive icon. The icon keeps its original aspect ratio, so the wrapper may have some whitespace. Use `text-center` to center the icon within the container, and `mx-auto` to center the container itself.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* fas class="rocket bg-body-tertiary" wrapper="col-6 mx-auto text-center" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Fixed width

Add `fa-fw` to the class of the HTML element referencing your icon to apply a fixed width. This ensures icons of varying icon width are properly aligned to each other. The following example illustrates how this works.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* fas person-skating fa-fw bg-body-tertiary */>}} Skating
{.fa-3x}

{{</* fas person-skiing fa-fw bg-body-tertiary */>}} Skiing
{.fa-3x}

{{</* fas person-skiing-nordic fa-fw bg-body-tertiary */>}} Nordic Skiing
{.fa-3x}

{{</* fas person-snowboarding fa-fw bg-body-tertiary */>}} Snowboarding
{.fa-3x}

{{</* fas snowplow fa-fw bg-body-tertiary */>}} Snowplow
{.fa-3x}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Lists

Use the classes `.fa-ul` and `.fa-li` to replace default bullets in unordered lists. The following example illustrates how this works.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}

- {{</* fas class="circle-check" wrapper="fa-li" */>}}List icons can
- {{</* fas class="square-check" wrapper="fa-li" */>}}be used to
- {{</* fas class="spinner fa-pulse" wrapper="fa-li" */>}} replace bullets
- {{</* fa class="square" wrapper="fa-li" */>}} in lists
{.fa-ul}

{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Rotating icons

Use specific classes to rotate the icon with a specific degree. The following example illustrates how this works.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* fas person-snowboarding fa-3x */>}}
{{</* fas person-snowboarding fa-3x fa-rotate-90 */>}}
{{</* fas person-snowboarding fa-3x fa-rotate-180 */>}}
{{</* fas person-snowboarding fa-3x fa-rotate-270 */>}}
{{</* fas person-snowboarding fa-3x fa-flip-horizontal */>}}
{{</* fas person-snowboarding fa-3x fa-flip-vertical */>}}
{{</* fas person-snowboarding fa-3x fa-flip-both */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

The following classes are available:

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< table class="table-striped w-auto" >}}
| Class | Details |
|---------|--------|
| `fa-rotate-90` | Rotates an icon 90° |
| `fa-rotate-180` | Rotates an icon 180° |
| `fa-rotate-270` | Rotates an icon 270° |
| `fa-flip-horizontal` | Mirrors an icon horizontally |
| `fa-flip-vertical` | Mirrors an icon vertically |
| `fa-flip-both` | Mirrors an icon both vertically and horizontally |
{{< /table >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

## Animating icons

Font Awesome supports various animations by simply adding a animation class to the HTML element. The following example illustrates the available basic animations. Add custom styles to your [Sass files]({{% ref "styles" %}}) to apply additional {{< link fa_animation >}}animation utilities{{< /link >}}.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* fas heart fa-3x fa-beat */>}}
{{</* fas triangle-exclamation fa-3x fa-fade */>}}
{{</* fas circle-info fa-3x fa-beat-fade */>}}
{{</* fas basketball fa-3x fa-bounce */>}}
{{</* fas camera-rotate fa-3x fa-flip */>}}
{{</* fas bell fa-3x fa-shake */>}}
{{</* fas arrows-rotate fa-3x fa-spin */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

The following table describes the available basic animation classes.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< table class="table-striped w-auto" >}}
| Class | Details |
|---------|--------|
| `fa-beat` | Scales an icon up or down |
| `fa-fade` | Fades an icon in and out |
| `fa-beat-fade` | Scales and pulses an icon in and out |
| `fa-bounce` | Bounces an icon up and down |
| `fa-flip` | Rotates an icon about the Y axis 180 degrees |
| `fa-shake` | Shakes an icon back and forth |
| `fa-spin` | Roates an icon |
{{< /table >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

## Bordered and pulled icons

Use `fa-border` and `fa-pull-right` or `fa-pull-left` for easy pull quotes or article icons. The following example illustrates a quote.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* icon class="fas quote-left fa-2x fa-pull-left" spacing=false */>}}
Gatsby believed in the green light, the orgastic future that year by year recedes before us.
It eluded us then, but that’s no matter — tomorrow we will run faster, stretch our arms further...
And one fine morning — So we beat on, boats against the current, borne back ceaselessly into the past.
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

The following table describes the available classes.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< table class="table-striped w-auto" >}}
| Class | Details |
|-------|---------|
| `fa-border` | Creates a border with border-radius and padding applied around an icons |
| `fa-pull-left` | Pulls an icon by floating it left and applying a margin-right |
| `fa-pull-right` | Pulls an icon by floating it right and applying a margin-left |
{{< /table >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

## Stacking icons

Use the `fa-stack` class on the parent HTML element of the two icons you want to stack. Then add the `fa-stack-1x` class for the regularly sized icon and add the `fa-stack-2x` class for the larger icon. `fa-inverse` can be added to the icon with the `fa-stack-1x` to help with a knock-out looking effect. Add a [theme color]({{% ref "colors" %}}) such as `text-primary` to change the color of the icon. The following example illustrates the available options.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* fas square fa-stack-2x */>}}
{{</* fab x-twitter fa-stack-1x fa-inverse */>}}
{.fa-stack .fa-2x}

{{</* fas circle fa-stack-2x */>}}
{{</* fas flag fa-stack-1x fa-inverse */>}}
{.fa-stack .fa-2x}

{{</* fas camera fa-stack-1x */>}}
{{</* fas ban fa-stack-2x text-danger */>}}
{.fa-stack .fa-2x}

{{</* fas square fa-stack-2x */>}}
{{</* fas terminal fa-stack-1x fa-inverse */>}}
{.fa-stack .fa-4x}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

The following table describes the available classes.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< table class="table-striped w-auto" >}}
| Class | Details |
|-------|---------|
| `fa-stack`    | Used on a parent HTML element of the two icons to be stacked |
| `fa-stack-1x` | Used on the icon which should be displayed at base size when stacked |
| `fa-stack-2x` | Used on the icon which should be displayed larger when stacked |
| `fa-inverse`  | Inverts the color of the icon displayed at base size when stacked |
{{< /table >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

## Adding custom icons

{{< release version="v0.20.5" >}}

> [!NOTE]
> Hinode removes any embedded `height` and `width` attributes from the icon data to ensure the icon is responsive. The `viewBox` attribute is kept.

You can reference a custom family and icon stored in the local `assets` folder. The {{< link "docs/components/icon" />}} shortcode uses the path `assets/svgs/{family}/{icon}.svg`, replacing `{family}` and `{icon}` with the specified values. You can mix the custom icon with Font Awesome styling directives (such as `fa-4x`, although animations are typically not supported). The following example shows an icon called `activity` of the `custom` family of size `fa-4x`.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* icon custom activity fa-4x */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
title: Images and figures
description: Use the image shortcode to display a responsive image with optional caption.
date: 2024-08-16
layout: docs
---

> [!IMPORTANT]
> Hinode uses render hooks since release {{< release version="v0.26.0" short="true" type="link" >}} to parse markdown images. Be sure to set {{< link "hugo_parser_image" >}}parser.wrapStandAloneImageWithinParagraph{{< /link >}} to `false` to correctly render images and figures.

Hinode uses Hugo's {{< link hugo_image >}}image processing{{< /link >}} to preprocess responsive images on the server side. By taking advantage of so-called {{< link mozilla_image >}}image sets{{< /link >}}, the client's browser can decide which image to download whilst reducing the download size. You also utilize external image processors, see {{< link "/docs/configuration/digital-asset-managers" />}} for more details.

## Images

As an example, the following shortcode displays an image with rounded corners and a 21x9 aspect ratio. The [image shortcode documentation]({{% relref "image" %}}) provides more details.

> [!IMPORTANT]
> Be sure to store your local images in the `assets` folder to take advantage of the image processing features. Images stored in the `static` folder are not processed.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="img/flowers.jpg" ratio="21x9" class="rounded" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

You can also reference remote images by specifying an URL. Hinode downloads the image to the server and stores the processed images in the local `resources` folder (during debugging) or `public` folder (during build).

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="https://picsum.photos/id/56/2880/1920" ratio="1x1" class="rounded" wrapper="mx-auto w-25" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

You can also use native Markdown to include an image since release {{< release version="v0.26.0" short="true" type="link" >}}.

{{< example lang="hugo" >}}
![Flowers](/img/flowers.jpg)
{class="rounded col-6 col-md-3" ratio="4x3" portrait=true wrapper="text-center"}
{{< /example >}}

## Figures

Similar to the [images support]({{% relref "#images" %}}), you can add a caption to display below the image. Add the argument `caption` to include a figure caption.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
{{</* image src="img/coffee.jpg" ratio="21x9" caption="Figure caption" class="rounded" */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

You can also use native Markdown to include a figure since release {{< release version="v0.26.0" short="true" type="link" >}}.

{{< example lang="hugo" >}}
![Flowers](/img/flowers.jpg "Figure caption")
{class="rounded col-6 col-md-3" ratio="4x3" portrait=true wrapper="text-center"}
{{< /example >}}


---

---
title: Links and cross-references
description: Generate internal links and external links using native Markdown links or a Hugo shortcode.
date: 2024-10-25
layout: docs
---

## Internal links

> [!IMPORTANT]
> Since release {{< release version="v0.26.0" short="true" type="link" >}}, Hinode renders all links using a render hook. The support for markdown links requires that any named links use the `{{%/* myshortcode */%}}` notation instead of `{{</* myshortcode */>}}` notation going forward.

Hugo provides the shortcode `ref` to link to another page within the site. The shortcode returns an absolute path. You can provide the document path as input. If you omit the leading `/`, the page is first resolved relative to the current page, then to the remainder of the site. Review {{< link hugo_links >}}Hugo's documentation{{< /link >}} for more examples and advanced options.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
[Tables]({{%/* ref "tables" */%}})

[About]({{%/* ref "credits" */%}})
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Similar to the `ref` shortcode, Hugo provides the shortcode `relref` to return a path relative to the current page.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
[Tables]({{%/* relref "tables" */%}})

[About]({{%/* relref "credits" */%}})
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Cross-references

When using Markdown document types, Hugo generates element IDs for every heading on a page. Spaces are replaced with `-`. For example:

```markdown
## An example reference
```

produces the following HTML:

```html
<h2 id="an-example-reference">An example reference</h2>
```

You can add a cross-reference to the section heading by specifying the generated ID as input for the `ref` and `relref` shortcodes, preceded by a `#`.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="hugo" >}}
[Reference]({{%/* ref "#reference" */%}})

[Reference]({{%/* relref "#reference" */%}})
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## External links

Hugo supports basic Markdown to create links to external websites. The following sections explain the various options.

### Basic links

Hugo supports basic Markdown to create links to external websites. To create a link, enclose the link text in brackets (e.g., `[Duck Duck Go]`) and then follow it immediately with the URL in parentheses (e.g., `(https://duckduckgo.com)`).

{{< example lang="markdown" >}}
My favorite search engine is [Duck Duck Go](https://duckduckgo.com).
{{< /example >}}

### Asset links

Hinode supports validated links to published assets since release {{< release version="v0.26.3" short="true" type="link" >}}. Store the assets as either {{< link hugo_page_resources >}}page resource{{< /link >}} or in the site's `static` folder. Pending on the media type, the browser will open or download the file.

The following example opens an image stored in the `static` folder (photo by {{< link "https://unsplash.com/@christiane_simone_coaching" >}}Christiane S Hartl{{< /link >}} on {{< link "https://unsplash.com/photos/green-frog-on-black-leather-textile-gsqpUyM0DPI" >}}Unsplash{{< /link >}}) in the current window.

{{< example lang="markdown" >}}
[View example image](/img/sample-frog.jpg)
{{< /example>}}

### URLs and email addresses

To quickly turn a URL or email address into a link, enclose it in angle brackets.

{{< example lang="markdown" >}}
<https://www.markdownguide.org>

<fake@example.com>
{{< /example >}}

### Reference-style links

Instead of using parentheses, you can use brackets to link to a predefined address. The following example uses a named reference to link to the website of Font Awesome.

{{< example lang="markdown" >}}
[Font Awesome][fontawesome]

[fontawesome]: https://fontawesome.com
{{< /example >}}

### Managed links

Hinode uses `config/_default/params.toml` to manage links to external addresses in a single place. You can [use the link shortcode to generate a managed link]({{% relref "link" %}}). The following snippet of `config/_default/params.toml` defines the link address for `fontawesome`:

```toml
[links]
    fontawesome = "https://fontawesome.com"
```

You can then use the following statement to generate the link.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example lang="markdown" >}}
{{</* link fontawesome /*/>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

You can [configure the behavior of managed links]({{% relref "layout#extended-configuration" %}}) in the `/config/_default/params.toml` file in the `main.externalLinks` section.

## Shortcode links

You can also use the {{< link "/docs/components/link/" />}} shortcode as convenience.


---

---
title: Tables
description: Enhance out-of-the-box Markdown tables with Bootstrap styling.
date: 2024-09-04
layout: docs
modules: ["simple-datatables"]
---

> [!NOTE]
> Since Hinode {{< release version="v0.26.7" short="true" type="link" >}} you no longer need to include the `.table` attribute with your Markdown table. Hinode uses a render hook to ensure the Markdown table uses Bootstrap's styling automatically. You can still use the `table` shortcode as equivalent - which also adds support for data tables.

Hugo supports Markdown tables natively. Hinode enhances these tables with optional styling features provided by Bootstrap. The following paragraphs illustrate how to use basic tables, how to accent them, how to adjust the borders, and how to make the table more compact.

## Basic tables

Hugo supports tables out-of-the-box with extended Markdown. Use an optional shortcode as wrapper to align the table cells.

### Default alignment

Hugo supports tables out-of-the-box by using the `|` and `-` characters.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
| Italics   | Bold     | Code   |
| --------- | -------- | ------ |
| _italics_ | **bold** | `code` |
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

### Aligned cells and headers

You can align header and cell data to the left, center, or right of a column using the `:` character.

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
| #  | Item        | Left aligned | Center aligned |   Right aligned|
| -- | ----------- |:-------------|:--------------:| --------------:|
| 1. | First item  | some text    | more text      | even more text |
| 2. | Second item | some text    | more text      | even more text |
| 3. | Third item  | some text    | more text      | even more text |
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

## Accented tables

Add optional class attributes to style the table using Bootstrap.

### Striped rows

Use `.table-striped` to add zebra-striping to any table row.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
| #  | Item        |
| -- | ----------- |
| 1. | First item  |
| 2. | Second item |
| 3. | Third item  |
{.table-striped}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

### Striped columns

Use `.table-striped-columns` to add zebra-striping to any table column.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
| #  | Item        | Description            |
| -- | ----------- | ---------------------- |
| 1. | First item  | This is the first row  |
| 2. | Second item | This is the second row |
| 3. | Third item  | This is the third row  |
{.table-striped-columns}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

### Hoverable rows

Add `.table-hover` to enable a hover state on the table rows.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
| #  | Item        |
| -- | ----------- |
| 1. | First item  |
| 2. | Second item |
| 3. | Third item  |
{.table-hover}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

### Colored tables

Add `table-<theme>` to apply [theme colors]({{% ref "colors" %}}) to your table. You can mix them with other classes, such as `.table-striped`.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
| #  | Item        |
| -- | ----------- |
| 1. | First item  |
| 2. | Second item |
| 3. | Third item  |
{.table-success .table-striped}
{{< /example>}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

## Table borders

Adjust the borders of a table to match your style preferences.

### Bordered tables

Add `.table-bordered` for borders on all sides of the table and cells. Add an optional `border-<theme>` class to apply [theme colors]({{% ref "colors" %}}) to the table borders.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
| #  | Item        |
| -- | ----------- |
| 1. | First item  |
| 2. | Second item |
| 3. | Third item  |
{.table-bordered .border-primary}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

### Tables without borders

Add `.table-borderless` for a table without borders.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
| #  | Item        |
| -- | ----------- |
| 1. | First item  |
| 2. | Second item |
| 3. | Third item  |
{.table-borderless}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

## Small tables

Add `.table-sm` to make any table more compact by cutting all cell padding in half.

{{% comment %}}<!-- markdownlint-disable MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
| #  | Item        |
| -- | ----------- |
| 1. | First item  |
| 2. | Second item |
| 3. | Third item  |
{.table-sm}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD058 -->{{% /comment %}}

## Responsive tables

{{< release version="v0.8.0" >}}

> [!IMPORTANT]
> The prefix `table-responsive-` has been dropped to denote a responsive size in release {{< release version="v0.22.0" short="true" type="link" >}}. Instead, use `{sm|md|lg|xl|xxl}` to create responsive tables up to a particular breakpoint.

Embed the markdown table within the {{< link "docs/components/table" />}} shortcode to make the table responsive. Responsive tables scroll horizontally to improve the layout on smaller screens.

### Always responsive

By default, the `table` shortcode is responsive for all viewports.

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
{{</* table */>}}
| #  | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
|----|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| 1. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 2. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 3. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
{{</* /table */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

Use `none` to disable this behavior.

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
{{</* table none */>}}
| #  | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
|----|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| 1. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 2. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 3. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
{{</* /table */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

### Breakpoint specific

Use `{sm|md|lg|xl|xxl}` to create responsive tables up to a particular breakpoint. From that breakpoint and up, the table will behave normally and not scroll horizontally.

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
{{</* table sm */>}}
| #  | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
|----|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| 1. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 2. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 3. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
{{</* /table */>}}

{{</* table md */>}}
| #  | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
|----|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| 1. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 2. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 3. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
{{</* /table */>}}

{{</* table lg */>}}
| #  | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
|----|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| 1. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 2. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 3. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
{{</* /table */>}}

{{</* table xl */>}}
| #  | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
|----|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| 1. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 2. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 3. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
{{</* /table */>}}

{{</* table xxl */>}}
| #  | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
|----|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| 1. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 2. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
| 3. | cell    | cel     | cel     | cel     | cel     | cel     | cel     | cel     | cel     |
{{</* /table */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

## Data tables

{{< release version="v0.24.13" >}}

Include the module `simple-datatables` to add advanced controls to your table. Features include in-line pagination, search, and sorting. {{< link "../configuration/modules" >}}Enable the module{{< /link >}} in the frontmatter of your content page:

```yml
---
modules: ["simple-datatables"]
---
```

As an example, the following shortcode displays a responsive table that is `searchable`, is `sortable`, and enables `paging` with a page size (`pagingOptionPerPage`) of 5.

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
{{< example lang="markdown" >}}
{{</* table sortable="true" paging="true" searchable="true" pagingOptionPerPage=5 */>}}
|  #  | Heading |
|-----|---------|
|  1. | Item 1  |
|  2. | Item 2  |
|  3. | Item 3  |
|  4. | Item 4  |
|  5. | Item 5  |
|  6. | Item 6  |
|  7. | Item 7  |
|  8. | Item 8  |
|  9. | Item 9  |
| 10. | Item 10  |
| 11. | Item 11  |
| 12. | Item 12  |
| 13. | Item 13  |
| 14. | Item 14  |
| 15. | Item 15  |
| 16. | Item 16  |
| 17. | Item 17  |
| 18. | Item 18  |
| 19. | Item 19  |
| 20. | Item 20  |
| 21. | Item 21  |
| 22. | Item 22  |
| 23. | Item 23  |
| 24. | Item 24  |
| 25. | Item 25  |
| 26. | Item 26  |
| 27. | Item 27  |
| 28. | Item 28  |
| 29. | Item 29  |
| 30. | Item 30  |
{{</* /table */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}


---

---
title: Typography
description: Use a mix of Markdown and HTML syntax to style your content.
date: 2024-12-13
layout: docs
---

Hinode uses a mix of basic Markdown syntax enriched with Bootstrap styling for the typography. The following paragraphs illustrate the most common applications. Refer to the Hugo documentation to review the extended description of supported {{< link hugo_content >}}content formats{{< /link >}}. It also contains links to external resource about Markdown.

## Headings

Use the native Markdown character `#` to generate headings for your content. The following input represents six levels of section headings. They are generated as HTML `<h1>`—`<h6>` elements. `<h1>` is the highest section level while `<h6>` is the lowest.

{{% comment %}}<!-- markdownlint-disable MD025 -->{{% /comment %}}
{{< example lang="markdown" >}}

# H1. Heading

## H2. Heading

### H3. Heading

#### H4. Heading

##### H5. Heading

###### H6. Heading

{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD025 -->{{% /comment %}}

Alternatively, you can use `.h1` through `.h6` classes, for when you want to match the font styling of a heading but cannot use the associated HTML element. For example, using a `.h2` class will exclude the section heading from the generated [table of contents]({{% ref "navigation#table-of-contents" %}}).

{{< example >}}
H1
{.h1}

H2
{.h2}

H3
{.h3}

H4
{.h4}

H5
{.h5}

H6
{.h6}
{{< /example >}}

## Display headings

Display a larger, slightly more opinionated heading style by adding the `.display` class.

{{< example >}}
Display 1
{.display-1}

Display 2
{.display-2}

Display 3
{.display-3}

Display 4
{.display-4}

Display 5
{.display-5}

Display 6
{.display-6}
{{< /example >}}

## Lead

Make a paragraph stand out by adding the `.lead` class.

{{< example >}}
This is a lead paragraph. It stands out from regular paragraphs.
{.lead}
{{< /example >}}

## Inline text elements

You can use native Markdown to apply basic styling. Use HTML elements for additional formatting options.

### Native Markdown

Use native Markdown apply basic styling to your text.

{{% comment %}}<!-- markdownlint-disable MD036 MD049 -->{{% /comment %}}
{{< example lang="markdown" >}}
**This is bold text**

_This text is italicized_

~~This was mistaken text~~

**This text is _extremely_ important**

***All this text is important***
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD036 MD049 -->{{% /comment %}}

### Extended Styling

{{< release version="v0.19.0" >}}

Use shortcodes and classes for additional styling options. The following example illustrates highlighting, fine print, subscript, and superscript.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
You can use the mark shortcode to {{</* mark >}}highlight{{< /mark */>}} text.

This line of text is meant to be treated as fine print.
{.small}

H{{</* sub 2 */>}}O is a liquid.

2{{</* sup 10 */>}} is 1024.

This is an {{</* ins >}}underlined text{{< /ins */>}}.

{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

## Emoji

Use shortcodes to insert Emoji into your content. You can use this {{< link markdown_emoji >}}list of emoji{{< /link >}} shortcodes as a reference, although the results may vary across browsers and devices. The following example inserts an inline smiley.

  {{< mark color="light" class="d-none-dark" >}}That is so funny! \:smiley\:{{< /mark >}}
  {{< mark color="dark" class="d-none-light" >}}That is so funny! \:smiley\:{{< /mark >}}

The result looks like this:

{{< example show_markup=false >}}
That is so funny! :smiley:
{{< /example >}}

## Abbreviations

Use the {{< link "docs/components/abbr" >}}abbr shortcode{{< /link>}} for abbreviations and acronyms to show the expanded version on hover. Abbreviations have a default underline and gain a help cursor to provide additional context on hover and to users of assistive technologies.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< example >}}
{{</* abbr HTML */>}}
{{< /example >}}
{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}

## Blockquotes

> [!NOTE]
> Since release {{< release version="v0.25.2" short="true" type="link" >}}, blockquotes no longer require an additional styling directive. You can drop the now obsolete `{.blockquote}` from your input.

The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a `footer` or `cite` element, and optionally with in-line changes such as annotations and abbreviations. Use the `>` Markdown character to generate a blockquote.

### Blockquote without attribution

The following Markdown generates a blockquote without attribution.

{{< example lang="markdown" >}}
> Tiam, ad mint andaepu dandae nostion secatur sequo quae.
> **Note** that you can use _Markdown syntax_ within a blockquote.
{{< /example >}}

### Blockquote with attribution

The following Markdown generates a blockquote with attribution. The citation itself is added to the bottom of the page.

{{< example lang="markdown" >}}
> Don't communicate by sharing memory, share memory by communicating.
>
> — _Rob Pike[^1]_

[^1]: The above quote is excerpted from Rob Pike's [talk](https://www.youtube.com/watch?v=PAAkCSZUG1c) during Gopherfest, November 18, 2015.
{{< /example >}}

### GitHub-style alerts

{{< release version="v0.25.5" >}}

You can add an alert designator to a blockquote to generate a GitHub-style alert.

{{% comment %}}<!-- markdownlint-disable MD028 -->{{% /comment %}}
{{< example lang="markdown" >}}
> [!NOTE]
> Useful information that users should know, even when skimming content.

> [!TIP]
> Helpful advice for doing things better or more easily.

> [!IMPORTANT]
> Key information users need to know to achieve their goal.

> [!WARNING]
> Urgent info that needs immediate user attention to avoid problems.

> [!CAUTION]
> Advises about risks or negative outcomes of certain actions.
{{< /example >}}
{{% comment %}}<!-- markdownlint-enable MD028 -->{{% /comment %}}

## Code Blocks

Use a single backtick `` ` `` character to denote an inline code element. Use triple backticks `` ``` `` to denote the start and end of a code block. Add the language to the opening backticks to specify the syntax. Hugo uses Chroma highlighting to style the syntax of {{< link hugo_chroma >}}supported languages{{< /link >}}. The following example defines an `HTML` code block.

{{< example lang="markdown" >}}

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Example HTML5 Document</title>
  </head>
  <body>
    <p>Test</p>
  </body>
</html>
```

{{< /example >}}

## List Types

Use native Markdown to define ordered lists, unordered lists, and nested lists.

### Ordered List

The following Markdown defines an ordered list of three items. The sequence is automatically determined, so simply add `1.` at the start of each element. The [linting rules]({{% ref "contribute#markdown" %}}) will raise an error if you add the sequence numbering yourself.

{{< example lang="markdown" >}}

1. First item
1. Second item
1. Third item

{{< /example >}}

### Unordered List

Use the `-` character to denote an unordered list.

{{< example lang="markdown" >}}

- List item
- Another item
- And another item

{{< /example >}}

### Nested list

Use indentation and the `-` character to denote a nested list.

{{< example lang="markdown" >}}

- Fruit
  - Apple
  - Orange
  - Banana
- Dairy
  - Milk
  - Cheese

{{< /example >}}

### Task list

Use the `-` character followed by either `[x]` or `[ ]` to indicate a (completed) task.

{{< example lang="markdown" >}}

- [x] Write the press release
- [ ] Update the website
- [ ] Contact the media

{{< /example >}}

## Mathematical formulas

{{< release version="v0.16.0" >}}

Use {{< link katex >}}KaTeX{{< /link >}} to add mathematical formulas to your content pages. You can use server-side math rendering since Hinode release {{< release version="v0.26.0" short="true" type="link" >}}. Add the following configuration to your site configuration (e.g. `hugo.toml`) to configure the required passthrough delimiters:

```toml
[markup.goldmark]
    [markup.goldmark.extensions.passthrough]
        enable = true
    [markup.goldmark.extensions.passthrough.delimiters]
        block = [['\[', '\]'], ['$$', '$$']]
        inline = [['\(', '\)'], ['$', '$']]
```

Alternatively, you can use the {{< link repository_mod_katex >}}mod-katex module{{< /link >}} to include a client-side script and custom style. Be sure to include `katex` in your [module configuration]({{% relref "../configuration/modules#configuring-modules" %}}) and [page frontmatter]({{% relref "../configuration/modules#enabling-optional-modules" %}}) as needed.

The following example displays an inline and block element formula using the configured delimiters `$` and `$$`.

{{< example lang="markdown" >}}
This is an inline $-b \pm \sqrt{b^2 - 4ac} \over 2a$ formula

This is not an inline formula:

$$x = a_0 + \frac{1}{a_1 + \frac{1}{a_2 + \frac{1}{a_3 + a_4}}}$$
$$\forall x \in X, \quad \exists y \leq \epsilon$$
{{< /example >}}

You can also include a codeblock of type `math` to render an inline element wrapped in a codeblock. In this case you should omit any delimiters.

{{< example lang="markdown" >}}

```math
-b \pm \sqrt{b^2 - 4ac} \over 2a
```

{{< /example >}}


---

---
title: Commands
description: Use npm commands to automate the build process and to keep track of dependencies.
date: 2023-08-03
layout: docs
---

Hinode supports {{< link npm >}}Node Package Manager{{< /link >}} to automate the build process and to keep track of dependencies. The `package.json` file in the repository root defines several commands to simplify local development and testing. The following paragraphs describe the main commands.

## Installing the required modules

You will need to install the required Hugo modules before starting a local server. The following command downloads the latest available version of the configured modules recursively, vendors the modules, and does some housekeeping of the module files.

{{< command >}}
npm run mod:update
{{< /command >}}

## Starting a local server

Use the following command from the command prompt to start a local **development server**. The command removes any previous build artifacts in the `public` and `resources` folders. The command invokes the local web server from Hugo, which watches for changes in the key system files and configuration directory. By default the generated site is available at `http://localhost:1313/` and is responsive to changes. This allows for interactive development and testing. When in development mode, the generated assets (such as javascripts and CSS files) are not minified to simplify debugging.

{{< command >}}
npm run start
{{< /command >}}

Use the following command to mimic the site in **production mode**. In this setting, generated assets are minified and compliant with the Content Security Policy. Although Hugo's web server is not meant to be run in a real production environment, it does allow validation of the site in an environment close to production.

{{< command >}}
npm run start:prod
{{< /command >}}

## Generating a web site

Use the following command to generate the static site. The build artifacts are stored in the local `public` folder. You can deploy these files to your **production** server. The build command invokes `mod:update` prior to the build.

{{< command >}}
npm run build
{{< /command >}}

Add the prefix `debug` to generate a site suitable for **debugging**. The build artifacts are not minified to simplify review and testing.

{{< command >}}
npm run build:debug
{{< /command >}}

## Validating linting rules

Use the the following command to analyze the source code and to test for any stylistic errors. The lint command validates three types of files in the `assets` folder and `content` folder:

* Javascript (`assets/*.js`) using {{< link eslint >}}eslint{{< /link >}}.
* CSS and SASS (`assets/scss/**/*.{css,sass,scss,sss,less}`) using {{< link stylelint >}}stylelint{{< /link >}}.
* Markdown (`*.md` and `content/**/*.md`) using {{< link markdownlint >}}markdownlint-cli2{{< /link >}}.

The basic configuration of these linting tools is defined in the repository root.

{{< command >}}
npm run lint
{{< /command >}}

Be sure to adhere to the linting rules before submitting any code changes / Pull Requests to Hinode's repository.

## Upgrading dependencies

Use the following command to test for any available upgrades of used packages. The command runs `npx` to validate the dependencies and to upgrade the dependency versions in `package.json`.

{{< command >}}
npm run upgrade
{{< /command >}}

Be sure to install the upgraded dependencies if needed:

{{< command >}}
npm install
{{< /command >}}


---

---
title: Contribute
description: Contribute to the open-source development of Hinode.
date: 2024-08-14
aliases:
  - "/docs/contribute/"
  - "/contribute/"
layout: docs
---

Hinode is fully open source and welcomes any contribution, either big or small. To streamline the contribution process, please take a moment to review the guidelines outlined in this article.

## Using the issue tracker

The {{< link issue_tracker >}}issue tracker{{< /link >}} on GitHub is the preferred channel for bug reports, feature requests and submitting pull requests.

## Asking for support

Use the {{< link discussions >}}GitHub Discussions{{< /link >}} to ask for {{< link discussions_help >}}support from the Hinode community{{< /link >}}. The discussion forum also includes other topics, such as {{< link discussions_ideas >}}ideas{{< /link >}} and {{< link discussions_showcases >}}showcases{{< /link >}}. We strive for a safe, welcoming, and productive community. The {{< link community_guidelines >}}community guidelines{{< /link >}} provide more context about the expectations, moderation policy, and terms of service.

## Bug reports

A bug is a *demonstrable problem* that is caused by the code in the repository. This may also include issues with the documentation or configuration files. Before filing a bug report, please consider the following guidelines:

- Validate your HTML and Markdown content to ensure your problem isn't caused by a simple error in your own code.
- Use the GitHub {{< link issue_tracker >}}issue search{{< /link >}} — check if the issue has already been reported.
- Check if the issue has been fixed — try to reproduce it using the latest main in the {{< link repository >}}repository{{< /link >}}.
- Isolate the problem — ideally create a reduced test case.
- Use the provided template in the {{< link issue_tracker >}}issue tracker{{< /link >}} to capture the context, evidence and steps on how to reproduce the issue.

## Feature requests

Feature requests are welcome. But take a moment to find out whether your idea fits with the scope and aims of the project. Please use the provided template in the {{< link issue_tracker >}}issue tracker{{< /link >}} to capture the idea and context.

## Pull requests

> [!IMPORTANT]
> By submitting a patch, you agree to allow the project owners to license your work under the terms of the {{< link license >}}MIT license{{< /link >}} (if it includes code changes) and under the terms of the Creative Commons ({{< link cc_by_nc_4_0 >}}CC BY-NC 4.0){{< /link >}} license (if it includes documentation changes).

Good pull requests—patches, improvements, new features—are a fantastic help. They should remain focused in scope and avoid containing unrelated commits.

**Please ask first** before embarking on any **significant** pull request (e.g. implementing features, refactoring code, porting to a different language), otherwise you risk spending a lot of time working on something that the project's developers might not want to merge into the project. For trivial things, or things that don't require a lot of your time, you can go ahead and make a PR.

Please adhere to the [coding guidelines](#coding-guidelines) used throughout the project (indentation, accurate comments, etc.) and any other requirements (such as test coverage).

Adhering to the following process is the best way to get your work included in the project:

1. Fork the project, clone your fork, and configure the remotes:

    ```bash
    git clone https://github.com/<your-username>/hinode.git
    cd hinode
    git remote add upstream https://github.com/gethinode/hinode
    ```

1. If you cloned a while ago, get the latest changes from upstream:

    ```bash
    git checkout main
    git pull upstream main
    ```

1. Create a new topic branch (off the main project development branch) to contain your feature, change, or fix:

    ```bash
    git checkout -b <topic-branch-name>
    ```

1. Commit your changes in logical chunks. Please adhere to these {{< link commit_message >}}git commit message guidelines{{</link >}}. Use Git's {{< link github_rebase >}}interactive rebase{{< /link >}} feature to tidy up your commits before making them public.

1. Locally merge (or rebase) the upstream development branch into your topic branch:

    ```bash
    git pull [--rebase] upstream main
    ```

1. Push your topic branch up to your fork:

    ```bash
    git push origin <topic-branch-name>
    ```

1. Open a {{< link github_pr >}}Pull Request{{< /link >}} with a clear title and description against the main branch.

## Module contributions

Hinode supports Hugo modules to to provide a flexible and extensible modular framework. Please consider the [module development conventions]({{% relref "module-development" %}}) to take full advantage of Hinode's processing pipelines.

## Coding guidelines

In general, run `npm run lint` before committing to ensure your changes follow our coding standards.

### Partials and shortcodes

{{< link "docs/advanced-settings/partial-development" >}}Follow the coding conventions for partial development{{< /link >}}.

### HTML

{{< link html_codeguide >}}Adhere to the Code Guide{{< /link >}}.

- Use tags and elements appropriate for an HTML5 doctype (e.g., self-closing tags).
- Use WAI-ARIA attributes in documentation examples to promote accessibility.

### CSS

{{< link css_codeguide >}}Adhere to the Code Guide{{< /link >}}.

- When feasible, default color palettes should comply with {{< link wcag_contrast >}}WCAG color contrast guidelines{{< /link >}}.

### Javascript

Bundle related client-side javascript in a logically named file. Add the file to the `assets/js` when using Hugo templating. Adjust the eslint configuration as needed to handle necessary exceptions. When adapting someone else's code, please add a link to the original source to give them credit.

- No semicolons (in client-side JS)
- 2 spaces (no tabs)
- strict mode
- "Attractive"

### Markdown

See {{< link markdown_rules >}}markdown rules{{< /link >}} for more details. The following rules are globally disabled:

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| #     | Rule | Remarks |
|-------|---------------------------------------------------------------------------------------------------|---------------------------------|
| MD013 | {{< link markdown_md013 >}}Line length{{< /link >}}                                           | |
| MD024 | {{< link markdown_md024 >}}Multiple headings with the same content{{< /link >}}               | |
| MD026 | {{< link markdown_md026 >}}Trailing punctuation in heading{{< /link >}}                       | |
| MD034 | {{< link markdown_md034 >}}Bare URL used{{< /link >}}                                         | |
| MD051 | {{< link markdown_md051 >}}Link fragments should be valid{{< /link >}}                        | |
| MD053 | {{< link markdown_md053 >}}Link and image reference definitions should be needed{{< /link >}} | Disabled due to false positives |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

## License

By contributing your code, you agree to license your contribution under the {{< link license >}}MIT license{{< /link >}}. By contributing to the documentation, you agree to license your contribution under the Creative Commons ({{< link cc_by_nc_4_0 >}}CC BY-NC 4.0{{< /link >}}) license.


---

---
title: Introduction
description: Get started with Hinode, a clean documentation and blog theme for your Hugo site based on Bootstrap 5.
date: 2024-08-14
aliases:
  - "/docs/getting-started/"
  - "/getting-started/"
  - "/docs/"
layout: docs
---

Hinode is a clean documentation and blog theme for {{< link hugo >}}Hugo{{< /link >}} - an open-source static site generator. Based on the {{< link bootstrap >}}Bootstrap{{< /link >}} framework, the rendered site is fast, secure, and responsive. Hinode uses {{< link flexsearch >}}FlexSearch{{< /link >}} to enable full text search across your site. Finally, the theme provides optional support for {{< link npm >}}Node Package Manager{{< /link >}} (npm) to automate the build process and to keep track of dependencies. More information is available on the [about]({{% relref "credits" %}} "about") page.

## Prerequisites

Hinode is a {{< link hugo_modules >}}Hugo theme that uses modules{{< /link >}} to install and maintain various components. It can be installed using either Hugo or npm. If you would like to take advantage of automation, the npm approach is recommended. Hinode requires the following software to be installed on your local machine:

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
| Software                                                   | Hugo                  | npm                   | Remarks |
|------------------------------------------------------------|-----------------------|-----------------------|---------|
| {{< link golang_download >}}Go binary{{< /link >}}     | {{< fas check >}} | {{< fas check >}} | Required for Hugo modules, including Hinode itself |
| {{< link hugo_download >}}Hugo (extended){{< /link >}} | {{< fas check >}} |                       | Embedded as npm binary |
| {{< link nodejs >}}Node.js{{< /link >}}                |                       | {{< fas check >}} | The installation package includes npm |
| {{< link git_download >}}Git{{< /link >}}              | recommended           | {{< fas check >}} | Recommended for version control |
| {{< link hugo_sass >}}Dart Sass{{< /link >}}           | optional              | optional              | Required when using {{< link "docs/configuration/layout#extended-configuration" >}}Dart Sass transpiler{{< /link >}} |
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

## Installation

The next steps describe the approach how to initialize a new Hinode site using either Hugo or npm.

> [!CAUTION]
> In general, it is **not recommended** to fork the Hinode repository. Unlike the versioned releases, the repository `HEAD` is not guaranteed to be stable. Unless contributing to the development of Hinode, you are encouraged to use one of the installation options described below.

{{< button collapse="collapse-1" outline=true color="secondary" icon="fab windows" order="first" size="sm" class="mb-4" >}}
    Windows installation notes
{{< /button >}}

{{< collapse id="collapse-1" class="p-3 border rounded mt-n4" >}}
  The installation for Windows requires PowerShell v7. Download it from the Microsoft Store as needed. Check your current version with the command `$PSVersionTable`.
{{< /collapse >}}

{{% comment %}}<!-- markdownlint-disable MD005 MD029 MD037 -->{{% /comment %}}
{{< nav type="tabs" id="pills-1" >}}
  {{< nav-item header="Hugo" show="true" >}}

1. **Create a new site**

    {{</* command */>}}
    hugo new site my-hinode-site && cd my-hinode-site
    {{</* /command */>}}

2. **Initialize the module system**

    {{</* command */>}}
    hugo mod init example.com/my-hinode-site
    echo "[[module.imports]]" >> hugo.toml
    echo "path = 'github.com/gethinode/hinode'" >> hugo.toml
    {{</* /command */>}}

3. **Start a development server**

    {{</* command */>}}
    hugo server
    {{</* /command */>}}
  {{< /nav-item >}}
  {{< nav-item header="npm" >}}

1. **Create a new repository**

    Go to {{</* link repository_template /*/>}} and login to GitHub as needed. Next, click the green button `Use this template {{</* fas caret-down */>}}` to initialize a new repository based on the Hinode template.

    **Alternatively**, you can use the {{</* link github_cli >}}GitHub cli{{< /link */>}} to initialize the repository from the command line. Replace `--private` with `--public` if you wish to create a public repository instead.

    {{</* command */>}}
    gh repo create my-hinode-site --private --template="{{</* param "links.repository_template" */>}}"
    {{</* /command */>}}

2. **Configure a local site**

    Assuming your repository is `owner/my-hinode-site`, use the `git` command to clone the repository to your local machine.

    {{</* command */>}}
    git clone https://github.com/owner/my-hinode-site && cd my-hinode-site
    {{</* /command */>}}

    Now install the npm packages and hugo modules.

    {{</* command */>}}
    npm install && npm run mod:update
    {{</* /command */>}}

3. **Start the development server**

    {{</* command */>}}
    npm run start
    {{</* /command */>}}
  {{< /nav-item >}}
{{< /nav >}}
{{% comment %}}<!-- markdownlint-enable MD005 MD029 -->{{% /comment %}}

## Adding content

The {{< link repository >}}main Hinode repository{{< /link >}} contains a folder `exampleSite` with sample content for a blog and a project portfolio. The examples are available in English, French, and Dutch. Review the following items on to how organize and enrich your content.

{{< accordion class="accordion-theme accordion-flush" >}}
  {{< accordion-item header="Adding content" >}}
    Hinode uses Markdown and templates to define the content for your website. See the [content management]({{% relref "content-management" %}}) page for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Organize the content" >}}
    Hinode uses a structured approach to organize and present content. See the [content organization]({{% relref "content-organization" %}}) page for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Enrich Markdown content with Bootstrap styling" >}}
    Hinode uses a mix of basic Markdown syntax enriched with Bootstrap styling for the typography. Review the [typography documentation]({{% relref "typography" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Use Markdown and Hugo shortcodes to generate links and cross-references" >}}
    Generate internal links and external links using a combination of Markdown and Hugo shortcodes. You can optionally manage your external links in a central configuration file. Review the [links documentation]({{% relref "links-and-cross-references" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Add responsive images optimized for multiple screen sizes and devices">}}
    Hinode supports responsive images out-of-the-box. Hinode uses Hugo to preprocess images on the server. By taking advantage of so-called image sets, the client’s browser can decide which image to download whilst reducing the download size. Review the [image documentation]({{% relref "images-and-figures" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Apply Bootstrap styling to your tables" >}}
    Hinode enhances the basic tables available in Markdown with optional styling features provided by Bootstrap. You can customize the accentuation, adjust the borders, and make tables more compact. Review the [tables documentation]({{% relref "tables" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Include Font Awesome icons on the fly" >}}
    Hinode provides out-of-the box access to the free icons of {{</* link fontawesome >}}Font Awesome{{< /link */>}}. The icon library provides various styling options. Review the [icons documentation]({{% relref "../content/icons" %}}) for more details.
  {{< /accordion-item >}}
{{< /accordion >}}

## Quick configuration settings

The main site configuration is available in `./config/_default`. Review the following items to get you started.

{{< accordion class="accordion-theme accordion-flush" >}}
  {{< accordion-item header="Review the layout options" >}}
    Hinode uses a base layout for the home page, list pages, and individual pages. Individual pages can also be configured as documentation page instead of a regular page. Review the [layout documentation]({{% relref "colors" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Adjust the theme colors" >}}
    Hinode uses eight configurable theme colors. You can adjust them in the `style` section of  `/config/_default/params.toml`. Review the [colors documentation]({{% relref "colors" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Set the main font" >}}
    Set the `themeFont` and `themeFontPath` in the `style` section of `/config/_default/params.toml` to adjust the main font. Hinode includes supports for [Emoji]({{% relref "typography#emoji" %}}) by default. Review the [fonts documentation]({{% relref "fonts" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Configure the supported languages">}}
    Configure each supported language in `config/_default/languages.toml`. Set the default behavior in `config/_default/hugo.toml`. Review the [languages documentation]({{% relref "languages" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Define the main menu" >}}
    Define the main menu entries for each language in `config/_default/menus`. For example, the English menu entries are defined in `menus.en.toml`. See the [navigation documentation]({{% relref "navigation" %}}) for more details.
  {{< /accordion-item >}}
{{< /accordion >}}

## Advanced configuration settings

The next topics give an overview of the advanced configuration settings.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< accordion class="accordion-theme accordion-flush" >}}
  {{< accordion-item header="Review the approach to dependency management and virtualization" >}}
    Hinode supports {{</* link npm >}}npm{{< /link */>}} packages to automate various tasks. In addition, it uses Hugo's {{</* link hugo_mounts >}}mounted folders{{< /link */>}} to create a virtual file system. Review the [advanced settings overview]({{% relref "../advanced-settings/overview" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Adjust the build pipeline for Sass files" >}}
    Hinode uses Bootstrap's Sass files to generate the cascading style sheets of the website. The main entrypoint is defined in `assets/scss/app.scss`. See the [styles documentation]({{% relref "styles" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Bundle JavaScript files for deployment">}}
    Hinodes uses npm to include the latest JavaScript files of external packages such as {{</* link bootstrap >}}Bootstrap{{< /link */>}} and {{</* link flexsearch >}}FlexSearch{{< /link */>}}. All local and external files are bundled in a single JavaScript file. See the [scripts documentation]({{% relref "scripts" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Process icon files to apply theme colors" >}}
    Hinode replaces Bootstrap's embedded icons with file-based icons to comply with its security settings. The icon files are parameterized to use the theme colors. See the [icons documentation]({{% relref "../advanced-settings/icons" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Refine header settings to adjust the Content Security Policy" >}}
    Hinode uses rather strict security policies to ensure the site is secure by default. Be sure to include references to external sources in the header configuration to avoid broken links. The settings of the local development server are defined in `config/_default/server.toml`. Similar settings are defined in the `netlify.toml` file provided in the repository's root when deploying to {{</* link netlify >}}Netlify{{< /link */>}}. See the [server documentation]({{% relref "server-headers" %}}) for more details.
  {{< /accordion-item >}}
{{< /accordion >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}


---

---
title: Troubleshooting
description: Review common issues and resolutions.
date: 2023-08-21
layout: docs
---

Review the table below for some common issues and their potential cause. Please file a [bug report]({{% relref "contribute#bug-reports" %}}) if you believe you have encountered an unknown issue.

{{% comment %}}<!-- markdownlint-disable MD036 MD037 -->{{% /comment %}}
{{< accordion class="accordion-theme accordion-flush" >}}
  {{< accordion-item header="The published website is not applying the styles correctly" >}}
    Incorrect styling of your published website may have several causes:

  **The stylesheet refers to the incorrect location**

  Be sure to update the `baseURL` in `config/_default/hugo.toml`.

  **The certificate of your website has expired or is not set up correctly**

  Hinode adds an `integrity` check and `crossorigin` validation to protect against manipulation of the site's stylesheet. Most browsers will refuse to load the stylesheet if the website's certificate is invalid. Ensure your certificate is valid and properly loaded, for example by clicking on the `lock` icon in the address bar of your browser. Check with your hosting provider if the certificate is invalid.

  **The DNS is not updated yet**

  You typically need to update address the records of your DNS provider when using a custom domain. For example, the website {{</* link hinode_demo /*/>}} uses {{</* link cloudflare >}}CloudFlare{{< /link */>}} as DNS provider and {{</* link netlify >}}Netlify{{< /link */>}} as hosting provider. The CloudFlare DNS records includes a `CNAME` record that links `gethinode.com` to the endpoint `gethinode-docs.netlify.app`. It may take some time for all DNS records to have been propagated properly.

  **The browser has cached a previous version of the website**

  Your browser might retain an older copy of your website and its resources in memory. Clear the browser cache if needed and reload your website. Google Chrome provides the option to empty the cache and perform a hard reload for a specific site when using the developer tools. You can add `?nocache=1` to your address in Safari to bypass the cache.
  {{< /accordion-item >}}
  {{< accordion-item header="Links to external images, videos, or iframes are broken" >}}
    Hinode uses a strict content security policy, which may prevent your browser from downloading external resources. See the [server configuration]({{% relref "server-headers" %}}) on how to configure your server headers.
  {{< /accordion-item >}}
  {{< accordion-item header="Included images are not optimized" >}}
    Ensure your images are stored in the `assets` folder instead of the `static` folder. See the documentation about [images and figures]({{% relref "images-and-figures" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Included vector images have incorrect dimensions" >}}
    Add the class value `img-fluid` to your vector image, for example `<img src="/img/logo.svg" class="img-fluid">`.
  {{< /accordion-item >}}
  {{< accordion-item header="My local files are ignored" >}}
    Hinode uses mounts to create a virtual file system. Be sure to include mounts for the base repository and the current repository. See the documentation about [mounted folders]({{% relref "../advanced-settings/overview#mounted-folders" %}}) for more details.
  {{< /accordion-item >}}
  {{< accordion-item header="Enabling purging of styles throws an error" >}}
    Setting `purge = true` in the `style` section of your site parameters instructs Hinode to purge any unused styles from your generated stylesheet. The purger requires several npm packages to be installed, else it will throw an error such as `Cannot find module '@fullhuman/postcss-purgecss'`. You can use the {{</* link repository_template >}}Hinode template{{< /link */>}} as a starting point to set up npm and the required packages. Refer to the {{</* link "guides/optimization" >}}optimization guide{{< /link */>}} for more context.
  {{< /accordion-item >}}
  {{< accordion-item header="Failed to transform css/main.css" >}}
    Setting `build.transpiler = "dartsass"` in the `main` section of your site parameters instructs Hinode to use the Dart Sass transpiler. Unlike the default `libsass` transpiler, the `dartsass` binary needs to be installed separately on your machine. This includes any production servers used for {{</* abbr "CI/CD" */>}} automation and deployment. If Dart Sass is not required, you can revert back to `build.transpiler = "libsass"`. Else follow the {{</* link hugo_sass >}}installation instructions{{< /link */>}} on how to install the binary.
  {{< /accordion-item >}}
{{< /accordion >}}
{{% comment %}}<!-- markdownlint-enable MD036 MD037 -->{{% /comment %}}


---

---
title: Upgrading to Hugo modules
description: Upgrade your existing Hinode site to take advantage of Hugo modules introduced in v0.16.
date: 2023-08-04
layout: docs
---

{{< release version="v0.16.0" >}}

Hinode v0.16 introduced support for {{< link hugo_modules >}}Hugo modules{{< /link >}} to provide a flexible and extensible modular framework. The prior versions of Hinode relied on {{< link npm >}}npm{{< /link >}} to track and update dependencies. Although npm is still supported, it is no longer a prerequisite to use Hinode. The following paragraphs highlight the key changes required to make your existing site compatible with Hugo modules. When done making your revisions, visit the [installation instructions for Hugo or npm]({{% relref "introduction" %}}) to build, serve, or publish your updated site.

## Meeting the new prerequisites

Hugo uses Go under the hood to manage and install modules. The **Go binary** should be installed on your local machine. If you use automation, be sure that Go is available on your build server too. You can {{< link golang_download >}}download Go from the official website{{< /link >}}. The getting started section in the Hinode documentation captures the [revised requirements of Hinode]({{% relref "introduction#prerequisites" %}}).

## Initializing the module system

Use the `hugo mod init` command to create a `go.mod` file in the root of the project folder. Specify a unique URL - such as the repository path on GitHub - for Hugo to keep track of its version and dependencies. The following command is an example:

{{< command >}}
hugo mod init github.com/gethinode/example
(out)go: creating new go.mod: module github.com/gethinode/example
(out)go: to add module requirements and sums:
(out)       go mod tidy
{{< /command >}}

Add the following lines to your main configuration file (e.g. `config/_default/hugo.toml`) to import Hinode as module:

```toml
  [[module.imports]]
    path = "github.com/gethinode/hinode"
```

You can remove the now obsolete mounts highlighted in yellow from the same configuration file:

```toml {linenos=table,hl_lines=["6-34"]}
[module]
  [module.hugoVersion]
    extended = true
    min = "0.81.0"
    max = ""
  [[module.mounts]]
    source = "node_modules/@gethinode/hinode/archetypes"
    target = "archetypes"
  [[module.mounts]]
    source = "node_modules/@gethinode/hinode/assets"
    target = "assets"
  [[module.mounts]]
    source = "node_modules/@gethinode/hinode/i18n"
    target = "i18n"
  [[module.mounts]]
    source = "node_modules/@gethinode/hinode/layouts"
    target = "layouts"
  [[module.mounts]]
    source = "node_modules/@gethinode/hinode/static"
    target = "static"
  [[module.mounts]]
    source = "node_modules/@gethinode/hinode/static/fonts"
    target = "static/fonts"
  [[module.mounts]]
    source = "node_modules/bootstrap/dist/js"
    target = "assets/js/vendor/bootstrap"
    includeFiles = "*.bundle.js"
  [[module.mounts]]
    source = "node_modules/flexsearch/dist"
    target = "assets/js/vendor/flexsearch"
    includeFiles = "*.bundle.js"
  [[module.mounts]]
    source = "node_modules/@fortawesome/fontawesome-free/webfonts"
    target = "static/fonts"
  [[module.mounts]]
    source = "archetypes"
    target = "archetypes"
  [[module.mounts]]
    source = "assets"
    target = "assets"
  [[module.mounts]]
    source = "i18n"
    target = "i18n"
  [[module.mounts]]
    source = "layouts"
    target = "layouts"
  [[module.mounts]]
    source = "static"
    target = "static"
  [[module.mounts]]
    source = "static/fonts"
    target = "static/fonts"
```

## Adjusting the site parameters

Hinodes supports core modules and optional modules. Core modules are fully integrated with the Hinode site, including stylesheets and Javascript bundles. On the other hand, optional modules are included on a page-by-page basis. Add the following configuration to your site's parameters. The full documentation is available in the [module configuration]({{% relref "docs/configuration/modules#configuring-modules" %}}).

```toml
[modules]
    core = ["bootstrap", "flexsearch", "fontawesome"]
    optional = ["leaflet", "katex"]
    excludeSCSS = ["bootstrap"]
    disableTemplate = ["katex"]
```

## Preventing version tracking of vendored files

Add the following line to your `.gitignore` file to prevent git from version tracking your vendored files:

```text
/_vendor
```

## Updating the npm configuration

Update the `package.json` file in your repository root if you plan to continue to use npm.

### Updating the npm scripts

Update the npm scripts to include the installation of Hugo modules. You can replace the existing scripts with the following new and adjusted scripts in your `package.json` file:

```json
  "scripts": {
    "prestart":          "npm run -s mod:vendor",
    "start":             "hugo server --bind=0.0.0.0 --disableFastRender",
    "start:prod":        "hugo server --bind=0.0.0.0 --disableFastRender --printI18nWarnings -e production",
    "prebuild":          "npm run clean:public && npm run -s mod:vendor",
    "build":             "hugo --gc --minify",
    "build:cache":       "npm run -s prebuild && hugo --gc --minify -e ci",
    "build:debug":       "npm run -s mod:update && hugo -e debug --debug",
    "build:preview":     "npm run build -D -F",
    "clean:public":      "rimraf public",
    "clean:install":     "rimraf package-lock.json node_modules",
    "lint":              "npm run -s lint:markdown",
    "lint:scripts":      "eslint assets/js",
    "lint:styles":       "stylelint \"assets/scss/**/*.{css,sass,scss,sss,less}\"",
    "lint:markdown":     "markdownlint-cli2 \"*.md\" \"content/**/*.md\"",
    "lint:markdown-fix": "markdownlint-cli2-fix \"*.md\" \"content/**/*.md\"",
    "mod:clean":         "hugo mod clean",
    "mod:update":        "rimraf _vendor && hugo mod get -u ./... && hugo mod get -u && npm run -s mod:vendor && npm run -s mod:tidy",
    "mod:tidy":          "hugo mod tidy",
    "mod:vendor":        "rimraf _vendor && hugo mod vendor",
    "test":              "npm run -s lint",
    "env":               "hugo env",
    "precheck":          "npm version",
    "check":             "hugo version",
    "upgrade":           "npx npm-check-updates -u && npm run -s mod:update"
  },
```

### Updating the npm dependencies

Several existing development packages are no longer needed, as they are replaced by Hugo modules. Delete the npm packages highlighted in yellow from the `package.json` file (the versions in your file may vary):

```json {linenos=table,hl_lines=[2,4,6,12]}
  "devDependencies": {
    "@fortawesome/fontawesome-free": "^6.4.0",
    "@fullhuman/postcss-purgecss": "^5.0.0",
    "@gethinode/hinode": "^0.15.0",
    "autoprefixer": "^10.4.14",
    "bootstrap": "^5.3.0",
    "eslint": "^8.43.0",
    "eslint-config-standard": "^17.1.0",
    "eslint-plugin-import": "^2.27.5",
    "eslint-plugin-n": "^16.0.1",
    "eslint-plugin-promise": "^6.1.1",
    "flexsearch": "^0.7.31",
    "hugo-bin": "^0.110.1",
    "markdownlint-cli2": "^0.8.1",
    "postcss-cli": "^10.1.0",
    "purgecss-whitelister": "^2.4.0",
    "shx": "^0.3.4",
    "stylelint": "^15.9.0",
    "stylelint-config-standard-scss": "^9.0.0"
  },
```

When done, run `npm i` to update the installation of your npm packages.


---

---
title: Hosting and deployment
description: Deploy your Hinode site to popular hosting providers.
date: 2024-08-14
layout: docs
---

As a static website, your Hinode site can be deployed virtually anywhere. Hugo provides a comprehensive overview of the more popular {{< link hugo_deployment >}}deployment solutions{{< /link >}}. Hinode uses a different build process compared to a default Hugo site. Review the [considerations]({{% relref "#considerations" %}}) for more details. The next paragraphs highlight the specific build and deployment process of Hinode for a few selected hosting providers.

## Considerations

Before deciding on your hosting and deployment approach, review the following considerations.

1. **Include npm in your build process**

   Hinode supports npm to automate the build process. Visit the [Hinode introduction]({{% relref "introduction" %}}) and [commands overview]({{% relref "commands" %}}) for more details.

2. **Configure the build timeout**

   You might encounter timeout errors when you generate a large site that contains many resources (such as images). Adjust the `timeout` in `config/_default/hugo.toml` as needed.

   {{< docs name="timeout" file="config/_default/hugo.toml" >}}

3. **Consider using build automation**

   Many popular Git providers provide the option to automate the build and deployment process ({{ abbr "CI/CD" >}}). You can trigger this process on each release to your main repository branch, or set up a preview during a Pull Request. The examples on this page assume you have a Git repository with GitHub.

4. **Understand the support for custom domain names**

   Most hosting providers provide a subdomain, such as `<username>.github.io`, to access your website by default. Usually you have the ability to use a custom domain instead, although additional services and configuration might be needed.

5. **Decide on multiregion and CDN support**

   Websites that serve a global audience might benefit from a multiregion or edge deployment to increase availability and reduce latency. You can also consider adding a dedicated {{< abbr CDN >}}, which has the ability to reduce the impact of {{< abbr DDoS >}} attacks for example.

6. **Consider using custom HTTP headers**

   Hinode uses custom HTTP headers to enable the [Content Security Policy]({{% relref "server-headers" %}}). The support for custom HTTP headers varies per provider, and might need additional services and configuration.

The table below gives a brief overview of the features supported by a few selected hosting providers. The next paragraphs describe the build and deployment process for each provider in more detail.

{{% comment %}}<!-- markdownlint-disable MD037 MD058 -->{{% /comment %}}
{{< table class="table-striped-columns w-auto" >}}
| Feature            | Azure blob storage | Netlify           |
|--------------------|--------------------|-------------------|
| Automation         | Custom action      | {{</* fas check */>}} |
| Custom domain name | Requires Azure CDN | {{</* fas check */>}} |
| CDN / Edge network | Requires Azure CDN | {{</* fas check */>}} |
| HTTP headers       | Requires Azure CDN | {{</* fas check */>}} |
{{< /table >}}
{{% comment %}}<!-- markdownlint-enable MD037 MD058 -->{{% /comment %}}

## Host on Azure blob storage

Azure supports hosting a static website directly from its blob storage. The service is {{< link az_blob_pricing >}}available for free{{< /link >}} for the first 12 months (conditions apply). The next sections describe how to configure the cloud storage correctly and how to deploy your website from your local computer to Azure.

### Assumptions

- You have a Hinode website you are ready to deploy.
- You do not already have a Azure storage account.

### Preparations

The configuration folder should include a file `config/production/deployment.toml`. If not, copy it from the {{< link repository >}}Hinode main repository{{< /link >}}. The deployment file contains the settings used by the command `hugo deploy`. The panel below shows the default deployment settings for Azure blob storage. A more detailed example is available on the {{< link hugo_config_deploy >}}Hugo website{{< /link >}}.

{{< docs name="az-blob" file="config/production/deployment.toml" show="false" >}}

### Configure your site

Deploy your site to Azure blob storage in six steps.

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/azblob-step1a.png" caption="Step 1a. Create a storage account" >}}
  {{< img src="img/azblob-step1b.png" caption="Step 1b. Define the instance details" >}}
  {{< img src="img/azblob-step1c.png" caption="Step 1c. Confirm the storage account deployment" >}}
  {{< img src="img/azblob-step2.png" caption="Step 2. Enable the static website" >}}
  {{< img src="img/azblob-step3.png" caption="Step 3. Configure environment variables" >}}
{{< /carousel >}}

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< accordion class="accordion-theme accordion-flush" >}}
  {{< accordion-item header="Step 1. Create a storage account" >}}
    If not done so already, sign up for an account on the {{</* link azure >}}Azure website{{< /link */>}}. Log in to the Azure portal and create a storage account. The storage account needs to have a unique name across Azure. Select a region that best fits your needs. Leave all other options to their default value.
  {{< /accordion-item >}}
  {{< accordion-item header="Step 2. Enable the static website" >}}
    Go to the menu section `Data management` and select `Static website`. Set the toggle for `Static website` to `Enabled`. Azure will then create a storage container `$web` within your storage account to host your website. Capture the primary endpoint, for example `https://gethinode.z6.web.core.windows.net/`. Set the `Index document name` to `index.html`. Hit the `Save` button when done.
  {{< /accordion-item >}}
  {{< accordion-item header="Step 3. Configure environment variables" >}}
    Go to the menu section `Security + networking` and select `Access keys`. Capture the storage account name, e.g. `gethinode`. Next, copy either of the two keys to your clipboard. Set the credentials on your local computer:
    {{</* command user="user" host="localhost" */>}}
    export AZURE_STORAGE_ACCOUNT="{account name}"
    export AZURE_STORAGE_KEY="{storage key}"
    {{</* /command */>}}
  {{< /accordion-item >}}
  {{< accordion-item header="Step 4. Build the website locally" >}}
    Run the following command to build your website locally:
    {{</* nav type="tabs" id="pills-1" */>}}
      {{</* nav-item header="Hugo" show="true" */>}}
        {{</* command user="user" host="localhost" */>}}
        hugo mod get -u ./... && hugo mod tidy && hugo --gc --minify
        {{</* /command */>}}
      {{</* /nav-item */>}}
      {{</* nav-item header="npm" */>}}
        {{</* command user="user" host="localhost" */>}}
        npm install && npm run mod:update && npm run build
        {{</* /command */>}}
      {{</* /nav-item */>}}
    {{</* /nav */>}}
  {{< /accordion-item >}}
  {{< accordion-item header="Step 5. Deploy the files" >}}
    Deploy the files to your Azure blob storage using the following command. Add `--dryRun` to review the upload before actually publishing the files.
    {{</* command user="user" host="localhost" */>}}
    hugo deploy
    {{</* /command */>}}
  {{< /accordion-item >}}
  {{< accordion-item header="Step 6. Visit the end point" >}}
    Once the deployment has finished, visit the end point captured in step 2 to test the website in your browser.
  {{< /accordion-item >}}
{{< /accordion >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

You can make your static website available via a custom domain. Visit the {{< link az_blob_domain >}}Azure documentation{{< /link >}} on how to map a custom domain to your blob storage endpoint. The static website does not support configuration of HTTP headers. Use Azure CDN to {{< link az_cdn_rules >}}configure HTTP headers{{< /link >}} for your static website instead. Review the [server configuration]({{% relref "server-headers" %}}) to identify the recommended configuration of the Content Security Policy.

## Host on Netlify

Netlify can host your website with continuous deployment from your Git provider. The starter price plan is free for any public repository and provides 100 GB bandwidth and 300 build minutes each month. Review the next sections how to automatically deploy your site to Netlify on each update to the main branch of your repository.

> [!NOTE]
> The starter plan requires your repository to be public. You will require a paid plan if your repository is set to private.

### Assumptions

- You have an account and repository with GitHub, GitLab, or Bitbucket.
- You have a Hinode website you are ready to deploy.
- You do not already have a Netlify account.

### Preparations

The repository root should include a file `netlify.toml`. If not, copy it from the {{< link repository >}}Hinode main repository{{< /link >}}. The configuration file contains the build settings that Netlify will pick up when connecting to your repository. The panel below shows the default build settings. The key command to observe is `npm run build`, which ensures the site is built properly.

> [!NOTE]
> The default configuration provides basic security headers. Please review the [server configuration]({{% relref "server-headers" %}}) for more details about the Content Security Policy. The cache settings are explained in more detail in the {{< link netlify_cache >}}Netlify blog{{< /link >}}.

{{< docs name="netlify" file="data/netlify.toml" show="true" >}}

The same file also configures several optional plugins. Keep these plugins if you would like to support {{< link "docs/configuration/layout#extended-configuration" >}}Dart Sass{{< /link >}}, use caching, and generate a Lighthouse report upon each build.

{{< docs name="plugins" file="data/netlify.toml" show="true" >}}

### Configure your site

Sign up for Netlify and configure your site in seven steps.

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/netlify-step1.png" caption="Step 1. Sign up for Netlify" >}}
  {{< img src="img/netlify-step2.png" caption="Step 2. Sign in with your Git provider" >}}
  {{< img src="img/netlify-step3.png" caption="Step 3. Authenticate your sign in (2FA)" >}}
  {{< img src="img/netlify-step4.png" caption="Step 4. Add a new site" >}}
  {{< img src="img/netlify-step5.png" caption="Step 5. Connect to your Git provider" >}}
  {{< img src="img/netlify-step6.png" caption="Step 6. Import an existing project" >}}
  {{< img src="img/netlify-step7.png" caption="Step 7. Configure the build settings" >}}
{{< /carousel >}}

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< accordion class="accordion-theme accordion-flush" >}}
  {{< accordion-item header="Step 1. Sign up for Netlify" >}}
    Go to {{</* link netlify >}}netlify.com{{< /link */>}} and click on the button `Sign up`. Select your preferred signup method next. This will likely be a hosted Git provider, although you also have the option to sign up with an email address. The next steps use GitHub, but other Git providers will follow a similar process.
  {{< /accordion-item >}}
  {{< accordion-item header="Step 2. Sign in with your Git provider" >}}
    Enter the credentials for your Git provider and click the button to sign in.
  {{< /accordion-item >}}
  {{< accordion-item header="Step 3. Authenticate your sign in (2FA)" >}}
    Assuming you have enabled two-factor authentication with your Git provider, authenticate the sign in next. This example uses the GitHub Mobile app.
  {{< /accordion-item >}}
  {{< accordion-item header="Step 4. Add a new site" >}}
    Click on the button `Add new site` to set up a new site with Netlify.
  {{< /accordion-item >}}
  {{< accordion-item header="Step 5. Connect to your Git provider" >}}
    Connect to your Git provider to import your existing Hinode repository.
  {{< /accordion-item >}}
  {{< accordion-item header="Step 6. Import an existing project" >}}
    Pick a repository from your Git provider. Ensure Netlify has access to the correct repository.
  {{< /accordion-item >}}
  {{< accordion-item header="Step 7. Configure the build settings" >}}
    Review the basic build settings. Netlify will use the settings provided in the [preparations]({{% relref "#preparations-1" %}}). Click on the button `Deploy site` to start the build and deployment process.
  {{< /accordion-item >}}
{{< /accordion >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

Your site is now ready to be used. Click on the domain settings of your site within the `Site overview` page to provide a domain alias and to edit the site name as needed. The same section also allows the configuration of a custom domain. Be sure to review your [server configuration]({{% relref "server-headers" %}}) if you encounter any rendering issues, such as broken links or garbled stylesheets.


---

---
author: Mark Dumay
title: Automated
date: 2023-08-04
weight: 4
thumbnail: /img/devops-light.svg
colormode: true
---

Hinode supports {{< link hugo_modules >}}Hugo modules{{< /link >}} and mounted folders to create a modern, flexible build system. By taking advantage of {{< link npm >}}npm{{< /link >}} and {{< link github_actions >}}GitHub actions{{< /link >}}, you can ensure your deployed site is always up-to-date.

{{< button relref="hosting-and-deployment" >}}
    Check the deployment options
{{< /button >}}


---

---
author: Mark Dumay
title: Fast
date: 2023-04-24
weight: 2
thumbnail: /img/template-light.png
colormode: true
tilted: true
---

Hinode uses {{< link hugo >}}Hugo{{< /link >}}, a popular open-source generator, to generate a static website. Static websites do not require a database and can be [hosted virtually anywhere]({{% relref "hosting-and-deployment" %}}). Prepare your content in Markdown and take advantage of Hinode's predefined templates to accelerate the development of your site.

{{< button relref="content-management" >}}
    Check the content management
{{< /button >}}


---

---
headless: true
title: Bring your static site to a new level
---


---

---
author: Mark Dumay
title: Multilingual
date: 2023-04-24
weight: 6
thumbnail: /img/multilingual-light.png
colormode: true
tilted: true
---

Hinode supports the creation of websites with multiple languages side by side. By linking several translations of a page to each other, switching between languages is seamless with minimal effort. Hinode uses localization to render dates, numbers, and other elements in a region-specific format.

{{< button relref="layout" >}}
    Check the language configuration
{{< /button >}}


---

---
author: Mark Dumay
title: Optimized
date: 2023-08-04
weight: 3
thumbnail: /img/pagespeed-light.png
colormode: true
tilted: true
---

Hinode uses a structured approach to {{< link hugo_structure >}}organize and present content{{< /link >}}. This results in user-friendly addresses, which are also easy to crawl by search engines. Hinode also generates meaningful metadata for the web pages to improve their page ranking. As such, Hinode scores 100 points for {{< abbr SEO >}} on {{< link pagespeed >}}PageSpeed Insights{{< /link >}}.

{{< button relref="content-organization" >}}
    Check the content organization
{{< /button >}}


---

---
author: Mark Dumay
title: Responsive
date: 2023-08-04
weight: 1
thumbnail: /img/responsive-light.png
colormode: true
---

Hinode takes a mobile-first approach to ensure the site adapts to different devices and screen sizes. It is powered by {{< link bootstrap >}}Bootstrap 5{{< /link >}}, a powerful and popular front-end toolkit for web development.

{{< button relref="layout" >}}
    Check the layout options
{{< /button >}}


---

---
author: Mark Dumay
title: Secure
date: 2023-08-04
weight: 5
thumbnail: /img/observatory-light.png
colormode: true
tilted: true
---

As a static site, Hinode is secure by design. Unlike dynamic sites, Hinode does not use databases or application servers to serve its content. This greatly reduces the risk associated with hosting public sites. In addition, Hinode uses strict security policies by default. This results in an A+ score from {{< link observatory >}}Mozilla Observatory{{< /link >}}.

{{< button relref="server-headers" >}}
    Check the content security policy
{{< /button >}}


---

---
title: Creating versioned documentation
description: Guide on how to create versioned documentation using folders and branch deployments.
date: 2023-08-02
tags: ["guide", "versioning"]
weight: 40
thumbnail: 
    url: img/books.jpg
    author: Chris Lawton
    authorURL: https://unsplash.com/@chrislawton
    origin: Unsplash
    originURL: https://unsplash.com/photos/9T346Ij4kGk
---

## Introduction

Providing up-to-date and accurate documentation is an important aspect of many software products. Hinode supports [sidebar navigation]({{% relref "navigation#sidebar-navigation" %}}) to help your users find the relevant content. However, as your software evolves, you might need to support different versions too. This guides illustrates how you can use Hinode to maintain versioned documentation.

The next paragraphs explain two main strategies. The first strategy is to maintain separate content folders in your repository. The second strategy uses so-called multi-branch deployments to publish a specific repository branch. You will need a [Netlify account]({{% relref "hosting-and-deployment#host-on-netlify" %}}) to be able to test the multi-branch deployment.

> [!NOTE]
> A full-working example of this guide is available on {{< link repository_versioning >}}GitHub{{< /link >}}. Visit {{< link hinode_version_demo />}} for a live demo.

## Step 1 - Preparing the basic content

In the first step, we will create a basic documentation site using the Hinode template. The site will be in English only, with a main section called `Docs`.

### Creating a new site

We will now create a new site using the Hinode template. Follow the **first step** of the guide on how to [set up a new site using the Hinode template]({{% relref "editing#step-1---initializing-the-project" %}}). Give the repository a recognizable name, such as `version-demo`.

### Starting a local server

For the purpose of this guide we will support the English language only. Be sure to create a new branch first, so you can test any changes before publishing them. The remainder of this guide uses the `develop` branch for development and the `main` branch for production. Start a local server to test the site is working as expected. Navigate in your browser to the local address (`http://localhost:1313/` by default) to visually inspect the site.

{{< command user="user" host="localhost" prompt="version-demo $" >}}
npm run start
(out)
(out)Environment: "development"
(out)Serving pages from memory
(out)Web Server is available at http://localhost:1313/ (bind address 0.0.0.0)
(out)Press Ctrl+C to stop
{{< /command >}}

### Adding documentation

Create a new folder `docs` within `content/en` to create a new section. We will create three subfolders within the `docs` section, one for each documentation version:

- `content/en/docs/0.1`
- `content/en/docs/0.2`
- `content/en/docs/latest`

We will now create a simple `about` page for each version. Create a file `about.md` within each version folder. Add the following frontmatter to each file, replacing `{version}` with `0.1`, `0.2`, and `latest`.

```yml
---
title: About (v{version})
description: About my product
date: "2023-06-21"
layout: docs
aliases:
  - "/docs/{version}/"
  - "/docs/" # only add this alias in `content/en/docs/latest/about.md``
---
```

The aliases instruct Hinode to redirect each `docs/{version}` entry to the correct page. The `docs` path redirects to the `latest` about page.

### Supporting redirection

Hugo recognizes the `/docs/` page as a list page by default. To properly map this entry to the latest about page (defined as an alias previously), we will need to explicitly instruct Hugo not to generate a list page. Create a new file `_index.md` within `content/en/docs` with the following content to do so:

```yaml
---
title: Docs
redirect: "/docs/"
_build:
  list: false
  render: false
---
```

## Step 2 - Configuring versioned navigation

As a next step, we will enable navigation for the `Docs` section. We will add an entry in the main navigation bar and enable versioned sidebar navigation. Finally, we will add a dropdown menu to the main navigation to enable switching of versions.

### Enabling navigation

First we will add a main menu entry for the (latest) docs content. Add the following content to `config/_default/menus/menus.en.toml`:

```toml
[[main]]
  name = "Docs"
  url = "/docs/"
  weight = 40
```

Update the `weight` of the tags to `50`:

```toml
[[main]]
  name = "Tags"
  url = "/tags/"
  weight = 50
```

Now create a file `docs.yml` in the `data` folder with the following content to enable sidebar navigation:

```yml
- title: About
```

> [!NOTE]
> You can copy the `docs.yml` file to `docs-0.1.yml` and `docs-0.2.yml` to create versioned sidebar navigation. Hinode uses `data/docs.yml` as default sidebar navigation data when no versioned file is available.

Finally, we will tell Hinode where to find the versioned docs pages. Hinode uses the permalink of the current page to extract the version label, if any. This label is used to generate the correct links for the main navigation and sidebar navigation. Add the following value to `config/_default/params.toml`:

```toml
[docs]
  contentPath = "/docs/"
```

### Configuring the version switcher

We will now configure a drop-down menu in the main navigation to enable switching of the active version. We will add an entry for each release, identified by the labels `v0.1`, `v0.2`, and `latest`. The argument `url` matches the release with the correct content folder.

To improve the layout of the menu, we can tag a specific release as `latest`. We can also group releases by adding a label without an url. The menu is rendered in the order as configured. Add the following content to `config/_default/params.toml`:

```toml
[[docs.releases]]
  label = "Current release"

[[docs.releases]]
  label = "latest"
  url = "/docs/latest/"
  latest = true

[[docs.releases]]
  label = "Previous releases"

[[docs.releases]]
  label = "v0.2"
  url = "/docs/0.2/"

[[docs.releases]]
  label = "v0.1"
  url = "/docs/0.1/"
```

Check if your site is working correctly. You may need to restart your local server for the aliases to work properly. Additionally, you might have to clear your browser cache too.

### Deploying the current branch

We will now deploy and publish the main branch with Netlify. For the deployment to be successful, you will need to specify the `baseURL` in `config/_default/hugo.toml`. The Hinode template defines a default value that you will need to replace. You can use a domain that you own, or use a domain provided by Netlify (such as `{sitename}.netlify.app/`). If you do not know the sitename or domain name yet, you can go ahead with the deployment and come back to this step later - you will need to redeploy the site though.

```toml
baseURL = "https://template.gethinode.com/" # replace this
```

Head over to your repository on Github and submit a Pull Request (PR) to update your main branch. When successful, login to your Netlify account and create a new site. You can follow the [Netlify deployment guidelines]({{% relref "hosting-and-deployment#host-on-netlify" %}}) for a more detailed explanation. Once done, validate that you have a working site in production.

{{< image src="img/versioning-basic.png" mode="true" caption="Initial site with basic versioning" class="border" wrapper="col-sm-12 col-lg-8 mx-auto" >}}

## Step 3 - Using multi-branch deployments

The approach with various version folders in the same repository might be adequate for smaller documentation sites. However, complex documentation sites might have thousands of pages. Ideally, we would use Git to track all of the versioned changes. We can use multi-branch deployments to achieve this goal. The support and configuration of multi-branch deployments varies across hosting providers. The remainder of this guide uses Netlify as provider.

### Creating a new branch

**Create a new branch** called `v0.9` that is derived from your current branch (be sure to commit the current branch first). For demonstration purposes, we will expose the `latest` folder as the specific version `0.9`. Ofcourse, we could simply rename the physical folder and be done with it. However, we would loose the ability to easily track changes to our documentation in the Git repository. Renaming a folder implies that the old folder and content are removed, and a new folder is created. Instead, we will use Hugo's mounting feature to rename and expose the folder on the fly[^1].

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
> [!IMPORTANT]
> {{< link hugo_mounts >}}Mounting a content folder overrides the language-specific settings{{< /link >}}. In our configuration we have set `defaultContentLanguage` to `en` and `defaultContentLanguageInSubdir` to `false`. We will need to manually refine our mounts to achieve the same behavior.

Add the following mount to `config/_default/hugo.toml` to map the `latest` folder to `0.9`. We will keep the remaining content within the `docs` folder as is.

```toml
  [[module.mounts]]
    source = "content/en/docs/latest"
    target = "content/docs/0.9"
    lang = 'en'
  [[module.mounts]]
    source = "content/en"
    target = "content"
    lang = 'en'
    excludeFiles = 'docs/latest/*'
```

Next we will update the title and alias in the frontmatter of `content/en/docs/latest/about.md`:

```yml
title: About (0.9)
aliases:
  - "/docs/0.9/"
  - "/docs/"
```

And finally, we will replace the `label` and `url` for the latest release in `config/_default/params.toml`:

```toml
[[docs.releases]]
  # label = "latest"      # old value
  label = "0.9"           # new value
  # url = "/docs/latest/" # old value
  url = "/docs/0.9/"      # new value
  latest = true
```

### Configuring the multi-branch deployment

We will deploy the `v0.9` branch on a separate subdomain with a so-called multi-branch deployment. By default, Netlify publishes the `main` branch only, along with any previews. We can instruct Netlify to deploy an additional branch, such as `v0.9`. Netlify uses the branch name followed by two hyphens and your internal Netlify subdomain. We will use this pattern as our baseURL in `config/_default/hugo.toml`.

Update the baseURL of `hugo.toml` in your `v0.9` branch, replacing `{branch}` and `{sitename}` with the correct values. Commit the changes to your branch when done.

```toml
baseURL = "https://{branch}--{sitename}.netlify.app/"
```

We will also need to use absolute URLs for our page assets to ensure our references link to the correct server. For this purpose, set the custom parameter `canonifyAssetsURLs` in the `main` section of `config/_default/params.toml` to `true`.

```toml
[main]
    canonifyAssetsURLs = true
```

> [!IMPORTANT]
> In the default state, Hinode uses relative links to include images, scripts, stylesheets, and other files. In this setup, the browser would retrieve these assets from the wrong backend server when using redirection. We therefore explicitly instruct Hugo to use absolute URLs for selected assets with the `canonifyAssetsURLs` setting.

{{< image src="img/versioning-branch.png" caption="Configure Netlify branch deployment" class="border" wrapper="col-sm-12 col-lg-8 mx-auto" >}}

Head over to your Netlify configuration and navigate to the section `Site configuration / Build & deploy / Continuous deployment`. Next, scroll to the section `Branches and deploy contexts` and click the button `Configure`. Select the option `Let me add individual branches` for `Branch deploys`. In the text field, enter `v0.9` as branch name. When done, click `Save`.

> [!CAUTION]
> By default, any changes submitted to the `v0.9` branch are processed and released to production immediately. Set up branch protection rules and automated testing (similar to the `main` branch) as needed.

{{< image src="img/versioning-0-9.png" mode="true" caption="Branch-deployed site for release v0.9" class="border" wrapper="col-sm-12 col-lg-8 mx-auto" >}}

Test if the branch is deployed successfully by navigating to `https://{branch}--{sitename}.netlify.app/`. The default `netlify.toml` file in the repository root has enabled `netlify.app` in the Content Security Policy by default. [Review and adjust the server headers]({{% relref "server-headers" %}}) as needed.

## Step 4 - Updating the main site

Now that we have configured a branch-specific site for `v0.9` of our documentation, it is time to go back to our main documentation site. In the final step of this guide we will set up server-side redirection to link to the newly deployed site. We will finish our configuration by adding a version overview and by configuring a version check.

### Using server-side redirection

Hugo supports {{< link hugo_alias >}}client-side redirection using aliases{{< /link >}}. We have defined these aliases in our about pages. In this approach, the browser receives an instruction to redirect to a new URL when visiting the initial page. We can instruct the server to redirect the URL instead, thus safing an additional roundtrip.

Hinode has defined a template in {{< link repository_redir >}}layouts/index.redir{{< /link >}} to automatically generate server-side redirection rules for Netlify. When you add the status code `200` to such a rule, the {{< link netlify_rewrite >}}redirection becomes a rewrite{{< /link >}}. In a **rewrite**, the URL in the visitor's address bar remains the same, while the content is fetched from a different location behind the scenes. We will use this mechanism to fetch the content from the branch site.

Go back to your **develop branch** and add the below code to your **production configuration** in `config/production/hugo.toml`. The setting `disableAliases` disables all client-side redirection rules. Instead, the `REDIR` output generates all redirection rules for the server, including rewrites.

```toml
disableAliases = true

[outputFormats.REDIR]
mediaType = "text/netlify"
baseName = "_redirects"
isPlainText = true
notAlternative = true

[mediaTypes."text/netlify"]
delimiter = ""

[outputs]
home = ["HTML", "RSS", "REDIR", "netlify", "server"]
```

### Redirecting the versioned docs

Still within the **develop branch**, add the below release configuration to `config/_default/params.toml`, replacing `{sitename}` with the correct value:

```toml
[[docs.releases]]
  label = "v0.9"
  url = "/docs/0.9/"
  redirect = "https://v0-9--{sitename}.netlify.app/docs/0.9/"
```

> [!NOTE]
> In local development mode the link is disabled, as server-side redirection is not supported by Hugo's web server.

The `redirect` value maps the release `0.9` to our branch deployment in production. The `url` points to the mount that we have defined previously.

You can test the redirection rules by building the site locally:

{{< command user="user" host="localhost" prompt="version-demo $" >}}
npm run build
{{< /command >}}

Open the file `public/_redirects` to review the rules. The first rule uses the code `200` to instruct Netlify to set up a rewrite. The other rules are common redirects as defined by the various aliases.

```text
/docs/0.9/* https://v0-9--{sitename}.netlify.app/docs/0.9/docs/0.9/:splat 200
/docs/1.0/ /docs/1.0/about/
/docs/ /docs/1.0/about/
/docs/0.1/ /docs/0.1/about/
/docs/0.2/ /docs/0.2/about/
```

### Adding a version overview

You can add a link to a custom overview page. An example of such a {{< link repository_versioning_overview >}}version overview page is available in the demo repository{{< /link >}}. Add the link to the page in the `overview` setting within the `docs` section of the `config/_default/params.toml`. Do not forget to add the configuration to the `v0.9` branch too, if desired.

```toml
[docs]
  overview = "/docs/versions/"
```

### Defining a version check

You can add an alert to inform your users that they are not looking at the latest version of the available documentation. Specify the latest available version in `latest`. When you set `checkVersion` to `true`, Hinode checks if the current version is equal or newer than the latest version. Hinode shows an alert at the top of the page when the current version is behind. The alert links to the `latestURL`. Do not forget to add the configuration to the `v0.9` branch too, if desired.

```toml
[docs]
  latest = "1.0"
  checkVersion = true
  latestURL = "https://version-demo.gethinode.com/docs/"
```

### Exposing the latest release as 1.0

Similar to the `v0.9` release, you can can expose the latest release as a specific version too. In the **develop branch**, add the following mounts to `config/_default/hugo.toml`:

```toml
  [[module.mounts]]
    source = "content/en/docs/latest"
    target = "content/docs/1.0"
    lang = 'en'
  [[module.mounts]]
    source = "content/en"
    target = "content"
    lang = 'en'
    excludeFiles = 'docs/latest/*'
```

Next, update the `Title` and `aliases` in the frontmatter of `content/en/docs/latest/about.md`:

```yml
title: About (1.0)
aliases:
  - "/docs/1.0/"
  - "/docs/"
```

And finally, we will replace the label and url for the latest release in `config/_default/params.toml`:

```toml
[[docs.releases]]
  # label = "latest"      # old value
  label = "1.0"           # new value
  # url = "/docs/latest/" # old value
  url = "/docs/1.0/"      # new value
  latest = true
```

## Conclusion

In this guide we have configured a version-aware documentation site using two different strategies. The approach using different folders is the most straightforward and might be sufficient for smaller sites. You could consider a multibranch approach when maintaining a complex documentation site. The configuration and deployment of such a site is provider-specific though. In this guide we have used Netlify as an example, which you could adapt to your own needs.

[^1]: We could skip the mounting entirely and use a server-side rewrite instead. However, we would lose the ability to test the site locally.


---

---
author: Mark Dumay
title: Guides
description: Check our guides to get you started.
---


---

---
author: Mark Dumay
title: Automating dependency updates
date: 2023-08-21
description: Guide on how to automate npm and hugo dependencies with GitHub actions.
tags: ["guide", "action"]
weight: 15
thumbnail: 
    url: img/cogs.jpg
    author: Laura Ockel
    authorURL: https://unsplash.com/@viazavier
    origin: Unsplash
    originURL: https://unsplash.com/photos/UQ2Fw_9oApU
---

## Introduction

The Hinode template uses both Hugo modules and npm packages. In this guide we will use GitHub actions to upgrade both types of dependencies automatically, ensuring our repository is always up to date. However, before we enable these automation steps, we will set up branch protection first. This guide assumes you have successfully setup a site based on the Hinode template. See the guide on {{< link "editing" >}}how to create a site with Hinode{{< /link >}} for more information.

> [!NOTE]
> This guide uses branch protection. You will require a paid plan if you have a private repository. See {{< link github_plans >}}GitHub's plans{{< /link >}} for more details.

## Step 1 - Testing the branch for the first time

The {{< link repository_template >}}Hinode template{{< /link >}} includes a GitHub action, or workflow, to automatically test and build the main branch upon each change. You can find the full configuration in `.github/workflows/lint-build.yml`. The workflow references two npm commands, being `test` and `build`. By default, Hinode tests content files (extension `.md`), scripts (extension `.js`), and styles (extension `.scss`). The Hinode docs provide more background about the {{< link "docs/getting-started/contribute#coding-guidelines" >}}coding guidelines{{< /link >}}.

The same `package.json` file also defines a `build` command, which is just a call to the embedded `hugo` binary. The GitHub action `lint-build.yml` calls both the `lint` and `build` commands and is invoked on each push to the `main` repository, or a PR against the same branch. It also includes a `workflow_dispatch` trigger that enables us to run the workflow manually.

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/gh-lint-step01.png" caption="Step 1. Trigger the 'lint & build' action" >}}
  {{< img src="img/gh-lint-step02.png" caption="Step 2. Review the jobs" >}}
  {{< img src="img/gh-lint-step03.png" caption="Step 3. Validate the results" >}}
{{< /carousel >}}

Head over the `Actions` panel of your GitHub repository. It lists two actions, of which we will select `lint & build`. Click on `Run workflow {{< fas caret-down >}}` and `Run workflow` to manually invoke the workflow. GitHub will then show the various jobs running in parallel. The action runs the `npm lint` and `npm build` commands sequentially against a so-called test matrix. The test matrix includes different versions of Node.js to test, but could also include a host Operating System (OS) for example. The main panel shows the terminal output of a runner, which is simply a container running on GitHub's server with the specified host OS and packages. You can click on each of the jobs' steps to view the output - which should look familiar. When all jobs have finished successfully, GitHub will report the entire workflow run as completed.

## Step 2 - Configuring branch protection

Branch protection sets up rules that must be satisfied before a Pull Request can be merged with a specific branch. This should include your production branch (usually `main`), but could also include other branches that you would like to control. Branch protection acts as a safeguard to prevent any changes to break your build. Ofcourse, it is not 100% fool proof, so it would still make sense to do regular testing of any changes before you submit them. However, minor dependency updates and security updates should (in theory) not introduce any breaking changes. If you have a stable repository and (main) branch, it is quite safe to assume that, as long as all your tests are successful, these minor updates can be automatically merged without unexpected impact.

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/gh-branch-protect-step01.png" caption="Step 1. Click on Protect this branch" >}}
  {{< img src="img/gh-branch-protect-step02.png" caption="Step 2. Apply settings" >}}
  {{< img src="img/gh-branch-protect-step03.png" caption="Step 3. Authenticate the changes" >}}
  {{< img src="img/gh-branch-protect-step04.png" caption="Step 4. Confirm branch protection" >}}
{{< /carousel >}}

Navigate to the homescreen of your repository on GitHub. You should see a warning that says your main branch is not protected. Click on the button `Protect this branch` to initiate branch protection. You can set up multiple rules to your liking. The recommended rules to enforce at a minimum are the following:

- Require a pull request before merging
- Require status checks to pass before merging
  - Require branches to be up to date before merging
{.tickmark}

> [!IMPORTANT]
> GitHub does not automatically update your status checks. For example, if you decide to modify your test matrix, you need to manually remove the obsolete labels and add the new labels.

These settings ensure all proposed changes are submitted as part of a PR and prevents any commits directly on the main branch. We can then use each PR request as a trigger to test our codebase and build. We will now select the tests we ran previously in our `lint & build` action. Add all test labels to the second check (`Require status checks to pass before merging`) individually. For example, you can add the `build (18.x)` label as prerequisite, meaning that your site should be compatible with Node.js v18. We are now ready to automate our dependency upgrades.

## Step 3 - Enabling auto-merged npm updates

GitHub provides an action called {{< link dependabot >}}Dependabot{{< /link >}} that helps us to automate the upgrades of our npm dependencies. The Hinode template has enabled Dependabot by default. The configuration can be found in `.github/dependabot.yml`. In the default setting, Dependabot creates a Pull Request for each dependency update. You will need to review these PRs and approve them manually.

With the branch protection in place we can enable `auto-merge`. This setting, which is disabled by default, allows merges to be automated if all preconditions (~branch protection rules) have been met. We can use this feature to automatically merge Dependabot PRs into our main branch. Head over to the `general` section in the repository settings. Within the section, scroll down until you find a setting called `Allow auto-merge`. Select it to apply this setting.

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/gh-auto-merge-step01.png" caption="Step 1. Navigate to 'general' in the repository settings" >}}
  {{< img src="img/gh-auto-merge-step02.png" caption="Step 2. Toggle 'auto-merge'" >}}
{{< /carousel >}}

The template repository includes a workflow created by Nícolas Iensen to {{< link nicolasiensen >}}configure auto-merge for Dependabot PRs{{< /link >}}. It approves any PR that includes a minor or patch upgrade. Major upgrades are not automatically approved and still require manual validation.

## Step 4 - Automating Hugo module upgrades

{{< link dependabot_issue_6860 >}}Dependabot is not compatible with Hugo modules yet{{< /link >}}. Instead, Hinode uses a fork of {{< link create_pr >}}create-pull-request{{< /link>}} from Peter Evans to update the Hugo modules. It calls the npm `mod:update` command on a scheduled interval. It will create a new branch and a Pull Request if it finds any updates. The corresponding action with the title `Update Hugo Dependencies` can be found in `.github/workflows/mod-update.yml`.

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/gh-token-step01.png" caption="Step 1. Navigate to your account settings" >}}
  {{< img src="img/gh-token-step02.png" caption="Step 2. Define a new fine-grained tokens" >}}
  {{< img src="img/gh-token-step03.png" caption="Step 3. Apply R/W access for contents and Pull Requests" >}}
  {{< img src="img/gh-token-step04.png" caption="Step 4. Generate the token" >}}
  {{< img src="img/gh-token-step05.png" caption="Step 5. Navigate to the repository settings" >}}
  {{< img src="img/gh-token-step06.png" caption="Step 6. Create a new action secret" >}}
  {{< img src="img/gh-token-step07.png" caption="Step 7. Define the action secret HUGO_MOD_PR" >}}
{{< /carousel >}}

> [!CAUTION]
> Be careful with using actions from the marketplace, as this introduces a security risk. Rob Bos has written an excellent {{< link devops_journal >}}blog about the risks involved and how you can mitigate this{{< /link >}}.

The `Update Hugo Dependencies` action requires elevated privileges. We will now create a new fine-grained Personal Access Token (PAT) called `HUGO_MOD_PR` to authorize this action to run on our behalf. Set up the token in the `Developer settings` of your **Account settings** on GitHub. The token requires access to your repository with the following permissions:

- Read and Write access to content (code) and pull requests
{.tickmark}

When done, head over to `action secret` in the security section of the **repository configuration**. Create a new Repository token with the name `HUGO_MOD_PR` in your repository configuration and paste the PAT as content. Click on `Add secret` to add it to your repository.

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/gh-mod-step01.png" caption="Step 1. Run the action workflow" >}}
  {{< img src="img/gh-mod-step02.png" caption="Step 2. Review the job output" >}}
  {{< img src="img/gh-mod-step03.png" caption="Step 3. Open the associated PR" >}}
  {{< img src="img/gh-mod-step04.png" caption="Step 4. Enable auto-merge" >}}
  {{< img src="img/gh-mod-step05.png" caption="Step 5. Confirm auto-merge" >}}
  {{< img src="img/gh-mod-step06.png" caption="Step 6. Validate the auto-merge" >}}
  {{< img src="img/gh-mod-step07.png" caption="Step 7. Observe the merged PR" >}}
{{< /carousel >}}

We can now run the `Update Hugo Dependencies` action. Head over to the actions overview and trigger the action manually. You can review the job output. When any modules updates have been found, the action will automatically create a PR on our behalf. Go to the Pull Requests overview and select the corresponding PR. You can now enable auto-merge for this type of PR. When all checks have been met, GitHub will automatically merge the PR with the main branch.

## Conclusion

You have now successfully configured automated updates for your Hinode site. Review the [hosting and deployment options]({{% relref "hosting-and-deployment" %}}) to see various options on how to (automatically) publish your site to a hosting provider.


---

---
title: Customizing the appearance of your site
description: Guide on how to use custom layouts to change the appearance of the homepage, single pages, and list pages.
date: 2024-08-20
tags: ["guide", "customization"]
weight: 60
thumbnail: 
    url: img/sketching.jpg
    author: Firmbee.com
    authorURL: https://unsplash.com/@firmbee
    origin: Unsplash
    originURL: https://unsplash.com/photos/person-writing-on-white-paper-gcsNOsPEXfs
---

## Introduction

Hinode is a Hugo theme focused on blogs and documentation sites. Using the flexibility of Hugo's templates, you can adapt the layout to your needs and liking. In this guide, we will first customize the homepage using the predefined configuration options. Next, we will replace the grid layout with a custom layout that displays a simple list of articles. Finally, we will customize the header of the single page layout by adding an author name.

> [!NOTE]
> A full-working example of this guide is available on {{< link repository_versioning >}}GitHub{{< /link >}}. Visit {{< link hinode_customization_demo />}} for a live demo.

## Step 1 - Preparing the basic content

In the first step, we will create a basic documentation site using the Hinode template. The site will be in English only, with a main section called `Blog`.

### Creating a new site

We will now create a new site using the Hinode template. Follow the **first step** of the guide on how to [set up a new site using the Hinode template]({{% relref "editing#step-1---initializing-the-project" %}}). Give the repository a recognizable name, such as `customization-demo`.

### Starting a local server

For the purpose of this guide we will support the English language only. Be sure to create a new branch first, so you can test any changes before publishing them. The remainder of this guide uses the `develop` branch for development and the `main` branch for production. Start a local server to test the site is working as expected. Navigate in your browser to the local address (`http://localhost:1313/` by default) to visually inspect the site.

{{< command user="user" host="localhost" prompt="demo $" >}}
npm run start
(out)
(out)Environment: "development"
(out)Serving pages from memory
(out)Web Server is available at http://localhost:1313/ (bind address 0.0.0.0)
(out)Press Ctrl+C to stop
{{< /command >}}

### Adding sample content

Create a new folder `blog` within `content` to create a new section. We will now copy a few sample posts from Hinode's example site. Navigate to the folder `exampleSite/content/en/blog` in the main {{< link repository >}}Hinode repository{{< /link >}}. Copy the following posts (drop the `en` subfolder in the target):

| Source (Hinode repository) | Target (`demo`) |
| -------|--------|
| `exampleSite/content/en/blog/_index.md` | `content/blog/_index.md` |
| `exampleSite/content/en/blog/first-post.md` | `content/blog/first-post.md` |
| `exampleSite/content/en/blog/second-post.md` | `content/blog/second-post.md` |
| `exampleSite/content/en/blog/third-post.md` | `content/blog/third-post.md` |
| `exampleSite/content/en/blog/fourth-post.md` | `content/blog/fourth-post.md` |

### Inspecting the default site

Inspect the site in your local browser, restarting the site with `npm run start` as necessary. Your site should look similar to the following screenshot:

{{< image src="img/default-site.png" mode=true wrapper="col-md-6 mx-auto" caption="Default website" >}}

By default, Hinode displays all sections in the root `content` folder on the home page. It will select the most recent three posts and display them as cards. We will change change this layout in the next paragraph.

## Step 2 - Changing the homepage layout

We will now adjust the style of the blog section on the homepage. First, we will explicitly configure the `blog` section. Hugo supports multiple {{< link hugo_config_overview >}}configuration formats{{< /link >}}, such as `JSON`, `toml`, and `yaml`. You can store the configuration directly in the repository root or in a configuration directory. Further more, you can split the configuration by environment, configuration key, and language. The Hinode template defines a predefined configuration that is split by environment and configuration key.

Open the file `config/_default/params.toml`, which is the default configuration of the site parameters for all environments. Go to the `[home]` element and specify the following configuration:

```toml {lineNos=inline lineNoStart=28}
[home]
    sections = ["blog"]
    fullCover = false
    centerHeadline = false
    style = ""
```

We have now instructed Hinode to display the content within `content/blog` on the homepage only (besides the navigation, featured section, and footer). Navigate to `[sections]` elements and add the following settings:

```toml {lineNos=inline lineNoStart=88}
[sections]
    [sections.blog]
        title = "Recent blog posts"
        sort = "date"
        reverse = false
        nested = true
        cols = 4
        color = ""
        padding = "0"
        header = "full"
        footer = "none"
        orientation = "stacked"
        style = "border-0 card-zoom"
        homepage = 4
        separator = true
```

We have now set the section title, included the first four posts sorted by publication date, and configured four columns. On smaller screens, Hinode will automatically adjust the amount of columns. The homepage should now look similar to the following screenshot:

{{< image src="img/adjusted-homepage-light.png" mode=true wrapper="col-md-6 mx-auto" caption="Adjusted homepage" >}}

You can further expand the amount of sections on the homepage by adding entries to `sections = ["blog"]`. Define their configuration in the `[sections]` element.

## Step 3 - Adding a custom list component

Hinode supports {{< link "/docs/configuration/layout#page-sections" >}}three types of page sections{{< /link >}} by default, being a `card` layout, `list` layout, and `nav` layout. We will now add a custom page section called `custom-list`. This custom section will display the publication date and title of the associated articles in a simple table.

### Adding a new list component type

First we will create a new partial template called `custom-list` that renders the custom table. Partial templates allow us to define smaller, context-aware components that we can invoke from list and page templates. We can also pass arguments such as the current page and the section title.

Hinode uses several {{< link "docs/advanced-settings/partial-development/" >}}conventions for partial development{{< /link >}}. You are encouraged to follow these conventions as well. The most important validation is to formally define and validate any partial arguments. Our list component will support three arguments, being `page`, `list`, and `class`. We can borrow their definitions from the file `/data/structures/list.yml` in the Hinode repository. Copy the following definitions to the file `/data/structures/custom-list.yml`.

```yml
comment: >-
  Displays the publication date and title of the associated articles in a simple
  table.
arguments:
  page:
    type:
      - '*hugolib.pageState'
      - '*hugolib.pageForShortcode'
    optional: false
    comment: Required context of the current page.
    group: partial
  list:
    type:
      - 'page.Pages'
      - 'resource.Resources'
    optional: false
    comment: Required array of pages.
    group: partial
  class:
    type: string
    optional: true
    comment: Class attribute of the list element, e.g. “w-50”.
```

> [!TIP]
> You can identify the type of an (internal) Hugo variable by printing its value type with `%T`. For example, the command `warnf "Page type: %T" .Page` would print the value `*hugolib.pageState` for the current `.Page` context (when invoked from a regular page template).

Create a new file in `layouts/partials/assets/custom-list.html`. We will now use Hinode's utility partial `utilities/IsInvalidArgs.html` to validate any arguments passed to our partial. Using this convention, we can validate all variables are of the expected type and value. The utility also confirms all mandatory arguments are available. Copy the following code to your new partial file:

```go-template {lineNos=inline}
{{ $error := false }}

{{/* Validate arguments */}}
{{ if partial "utilities/IsInvalidArgs.html" (dict "structure" "custom-list" "args" . "group" "partial") }}
  {{- errorf "partial [assets/list.html] - Invalid arguments" -}}
  {{ $error = true }}
{{ end }}
```

### Generating the HTML element

With the arguments defined and validated we can now construct the HTML element that generates our table. The following code creates a responsive grid of two columns. The first column display the publication date of the article and the second column displays the article's title and author. By using the `range` function we can iterate over the available articles.

Copy the following code to your partial template in `layouts/partials/assets/custom-list.html`. The code is quite minimalistic. You could further enhance it by adding {{< link hugo_i18n >}}internationalization support{{< /link >}} and pagination. Both features are beyond the scope of this guide.

```go-template {lineNos=inline lineNoStart=9}
{{/* Initialize arguments */}}
{{- $list := .list -}}
{{- $class := .class -}}

{{/* Main code */}}
{{ if not $error }}
  {{- range $index, $item := $list -}}
    <div class="container-fluid p-0">
      <div class="row">
        <div class="col-3 col-md-2">
          {{ partial "utilities/date.html" (dict "date" $item.Date "format" "short") -}}
        </div>
        <div class="col-9 col-md-10">
          <a href="{{ $item.RelPermalink }}">{{ $item.Title }}</a> by {{ $item.Params.author }}
        </div>
      </div>
    </div>
  {{ end -}}
{{ end }}
```

### Modifying the section list component

As a final step we will update the controller that invokes the available list partials. The `layouts/partials/assets/section-list.html` initializes the configuration as defined in {{< link "#step-2---changing-the-homepage-layout" >}}step 2 of this guide{{< /link >}}. Copy the file from the base Hinode repository to your local repository. Line `120` of the partial defines the recognized layout types. We will add the `custom-list` to this definition:

```go-template {lineNos=inline lineNoStart=120 hl_Lines=1}
{{- $supportedLayouts := slice "card" "custom-list" "list" "nav" -}}
{{- if not (in $supportedLayouts $layout) -}}
  {{- errorf "partial [assets/section-list.html] - Invalid value for param 'layout': %s" $layout -}}
{{- end -}}
```

Line `136-141` define the base arguments available to our custom template. You will recognize them from the argument definitions we added to the file `/data/structures/custom-list.yml` earlier.

```go-template {lineNos=inline lineNoStart=136}
{{- $params := (dict 
    "page" $page
    "list" $list
    "class" $style
    )
-}}
```

Insert the following code on line `177` to invoke our custom partial with the three defined arguments:

```go-template {lineNos=inline lineNoStart=177}
{{- else if eq $layout "custom-list" -}}
    {{- $partial = "assets/custom-list.html" -}}
```

### Validating the custom list component

Now is a good time to validate the custom list component. Set the `layout` type to our newly created `custom-list` component in `params.toml`:

```toml
[sections]
    [sections.blog]
        layout = "custom-list"
```

Save your work and review the site in your local browser. Your site should look similar to the following screenshot:

{{< image src="img/custom-list.png" mode=true wrapper="col-md-6 mx-auto" caption="Custom homepage" >}}

## Step 4 - Overriding the single page rendering

In the last step of this guide we will customize the single page template that renders a blog post. After a brief review of the available templates, we will define a custom single page template for our blog posts.

### Understanding the template lookup order

Hugo supports a comprehensive set of templates to generate the final site. For our purpose, we will focus on the core templates required to render an index page or a single page.

#### The base template

The base template in `layouts/_default/baseof.html` defines the outer shell of all generated HTML pages. A basic template would consist of the document type, a header, and a page body. The block `main` is a placeholder that is used by additional templates. The below template is an example provided by the Hugo team.

```go-template
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>{{ .Site.Title }}{{ end }}
  </head>
  <body>
    {{/* Code that all your templates share, like a header */}}
    {{ block "main" . }}
      {{/* The part of the page that begins to differ between templates */}}
    {{ end }}
  </body>
</html>
```

#### The section template

Hugo invokes the section template for directories that contain a list of pages. By definition, the section should include an `_index.md` file. Our `blog` section is a good example. It includes four sample pages and an index file. Typically, section templates iterate over the collection of available pages and provide an overview with pagination support. We have defined a custom iterator in step 3 of the guide. By convention, Hinode uses the name `list.html` for all section templates.

#### The single page template

Hugo invokes a single page template for pages such as the four individual blog posts. By convention, Hinode uses the filename `single.html` for all single page templates. The base template for a single page defines the various responsive page placeholders, such as a sidebar, main content placeholder, and a table of contents placeholder. The main content is split into a header, body, and footer. Refer to the {{< link "docs/configuration/layout/#single-pages" >}}single page layout{{< /link >}} for more details.

Review the following template for the main content placeholder of a single page. The template is defined in `layouts/_default/single/main.html` and contains the following content:

```go-template
{{- $breakpoint := $.Scratch.Get "breakpoint" -}}
{{ if .Site.Params.navigation.breadcrumb }}
  {{ partial "assets/breadcrumb.html" (dict "page" .) }}
{{ end -}}

{{ .Render "single/header" }}

{{- if and .Site.Params.navigation.toc .Params.includeToc | default true -}}
    <div class="d-{{ $breakpoint.current }}-none pb-5">
      {{ partial "assets/toc-dropdown.html" (dict "page" .) }}
    </div>
{{- end -}}
{{ .Render "single/body" }}

{{ .Render "single/footer" }}
```

### Adjusting the single page header

The single page template defined in the previous paragraph invokes `single/header`, `single/body`, and `single/footer` to render the main elements of a single page. The amount of templates and inheritance might appear complex and overwhelming at first sight. However, as we will find out next, this actually allows us to keep the templates {{< abbr DRY >}}. In other words, it helps us to prevent rework whilst staying flexible.

As mentioned earlier, all page templates are maintained in `layouts/_default` folder. Hugo has a flexible lookup order, meaning that we can replace selective elements only. When we add a `type` to the frontmatter of a page, Hugo will test if there is a template available for that specific type. It will use the template(s) in the `layouts/_default` folder as fallback. This mechanism allows us to customize the appearance of selected pages based on their type.

Add the following configuration to the frontmatter of `content/blog/first-post.md`:

```toml
---
type: custom
---
```

Next, copy the following code to `layouts/custom/single/header.html` to include the page author in the (single) page header. Hugo will match the template folder name `custom` with the frontmatter type:

```go-template {hl_Lines=2}
{{ with .Title }}<p class="display-4 mt-5">{{ . }}</p>{{ end }}
{{ with .Params.author }}<div class="border-bottom">By {{ . }}</div>{{ end }}
{{ partial "assets/sharing.html" (dict "page" .) }}
<p class="lead mb-5">{{ .Description }}</p>
```

You can verify this behavior by looking at the other blog posts. You will notice these pages render without an author name.

{{< image src="img/custom-page.png" mode=true wrapper="col-md-6 mx-auto" caption="Custom homepage" >}}

## Conclusion

In this guide we have customized the appearance of a Hinode site. We have adjusted the configuration of the homepage, added a new list view, and modified the appearance of single pages based on their type. The {{< link "docs/configuration/layout/" >}}layout documentation {{< /link >}} provides more context about the available options.


---

---
author: Mark Dumay
title: Creating your first site with Hinode
date: 2023-04-03
lastmod: 2024-08-18
description: Guide on how to set up your site with version control using npm, GitHub and VSCode.
tags: ["guide", "vscode"]
weight: 10
thumbnail: 
    url: img/launch.jpg
    author: SpaceX
    authorURL: https://unsplash.com/@spacex
    origin: Unsplash
    originURL: https://unsplash.com/photos/TV2gg2kZD1o
---

## Introduction

> [!NOTE]
> The commands and code examples within this guide are written with macOS in mind. The commands should be transferrable to Windows and Linux too.

Hinode uses {{< link hugo >}}Hugo{{< /link >}}, a popular open-source generator, to generate a static website. Static websites do not require a database and can be [hosted virtually anywhere]({{% relref "hosting-and-deployment" %}}). In this guide, we will set up a new site using a template from GitHub. We will then edit our Markdown content with Visual Studio Code (VSCode). Lastly, we will submit our changes to the main branch.

This guide requires a GitHub account to host the remote demo repository. Next, Git, Node.js and npm are required for local development and testing. The guide also uses VSCode to edit the content. Click on each of the following links to sign up and install the required software as necessary. The software packages should be compatible with Windows, macOS, and most Linux distributions.

- {{< link github_signup >}}Set up an account with GitHub{{< /link >}}
- {{< link git_download >}}Download and install the Git binary{{< /link >}}
- {{< link golang_download >}}Download and install Go{{< /link >}}
- {{< link nodejs >}}Download and install Node.js{{< /link >}} (it includes npm)
- {{< link vscode_download >}}Download and install VSCode{{< /link >}}

## Step 1 - Initializing the project

As first step we will create a new repository on GitHub using a template. The template uses npm to automate several tasks. We will then connect our local machine to the remote repository and install the required dependencies. Lastly, we will run a local development server to test the newly created site.

### Creating a new Git repository

Hinode comes in two flavors: a {{< link repository_template >}}template{{< /link >}} and a {{< link repository >}}main theme{{< /link >}}. We will use the template as starting point for our new site, as it has several predefined settings that support automation. The main repository provides a regular theme that is compatible with Hugo's module system. It is better suited if you prefer to manually maintain and publish your Hinode site[^1].

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/github-init-step01.png" caption="Step 1. Create a new repository from the template" >}}
  {{< img src="img/github-init-step02.png" caption="Step 2. Enter a repository name" >}}
  {{< img src="img/github-init-step03.png" caption="Step 3. Review the initialized repository" >}}
{{< /carousel >}}

Navigate to the {{< link repository_template >}}template repository{{< /link >}} in your browser and click on the green button `Use this template {{< fas caret-down >}}` to create a new repository. You may need to sign in to GitHub for the button to become available. Provide a meaningful name for your repository, such as `hinode-demo`. The repository's visibility can be either private or public. Public repositories can be seen by anyone, such as open-source projects. Private repositories are only visible to yourself, or to anyone you have granted access. Lastly, click on the green button `Create repository from template` to create your repository.

### Connecting your local machine

We will now connect our local machine to the newly created GitHub repository. Navigate to a folder in the terminal of your local machine, such as `~/development`[^2]. Use the `git clone` command to download and extract your GitHub repository within the current folder. By default, git creates a new subfolder with the name of your repository, e.g. `hinode-demo`. The next command is an example, be sure to replace the {{< mark >}}{USER}{{< /mark >}} name with your own.

{{< command prompt="development $" >}}
git clone https://github.com/{USER}/hinode-demo.git
(out)Cloning into 'hinode-demo'...
(out)remote: Enumerating objects: 41, done.
(out)remote: Counting objects: 100% (41/41), done.
(out)remote: Compressing objects: 100% (34/34), done.
(out)remote: Total 41 (delta 1), reused 28 (delta 1), pack-reused 0
(out)Receiving objects: 100% (41/41), 126.89 KiB | 21.15 MiB/s, done.
(out)Resolving deltas: 100% (1/1), done.
{{< /command >}}

### Installing the packages and dependencies

We will now install the various packages and dependencies used by Hinode. The file `packages.json` in the repository root defines the npm packages and their versions as used by Hinode. First, navigate to the `hinode-demo` folder:

{{< command prompt="development $" >}}
cd hinode-demo
{{< /command >}}

Next, use the command `npm install` to download and install the various packages. npm will store these files in the `hinode-demo/node_modules` folder. The script downloads and installs the latest Hugo binary automatically. In this approach, the Hugo binary is linked exclusively to your repository, minimizing potential version conflicts on your local machine.

{{< command prompt="hinode-demo $" >}}
npm install
(out)
(out)added 537 packages, and audited 538 packages in 6s
(out)
(out)188 packages are looking for funding
(out)  run `npm fund` for details
(out)
(out)found 0 vulnerabilities
{{< /command >}}

Lastly, we will install the Hugo modules used by Hinode. Hinode supports two types of modules. **Core modules** are embedded in the main stylesheet and script bundle, ensuring they are available to all pages across the site. On the other hand, **optional modules** are only included on a page-by-page basis. For example, if your site only requires an interactive map on a few pages, you can include the Leaflet module on those pages only. This helps to reduce the size of your page assets.

Hinode itself is also a module that is used by the Hinode template. This allows us to use the shortcodes and other components provided by Hinode, without having to worry about their implementation. We can use {{< link hugo_modules >}}Hugo's module system{{< /link >}} to update the used modules to their latest version. Run the script `mod:update` to download and install the latest version of the modules.

{{< command prompt="hinode-demo $" >}}
npm run mod:update
(out)
(out)> @gethinode/template@0.11.0 mod:update
(out)> rimraf _vendor && hugo mod get -u ./... && hugo mod get -u && npm run -s mod:vendor && npm run -s mod:tidy
(out)
(out)Update module in /../hinode-guide
{{< /command >}}

The `mod:update` script requires some explanation. The command is defined in `package.json` and references `mod:tidy` and `mod:vendor`:

```json
"mod:update": "rimraf _vendor && hugo mod get -u ./... && hugo mod get -u && npm run -s mod:vendor && npm run -s mod:tidy",
"mod:tidy": "hugo mod tidy",
"mod:vendor": "rimraf _vendor && hugo mod vendor",
```

The update command chains several commands that each need to run successfully (hence the `&&` instructions). Click on each separate command to reveal the context.

{{% comment %}}<!-- markdownlint-disable MD037 -->{{% /comment %}}
{{< accordion class="accordion-theme accordion-flush" >}}
  {{< accordion-item header="rimraf _vendor" >}}
  Hinode requires the modules to be vendored (see `npm run -s mod:vendor`). To avoid synchronization issues, the `_vendor` folder is purged prior to each module update.
  {{< /accordion-item >}}
  {{< accordion-item header="hugo mod get -u ./..." >}}
  Hugo calls `go mod get` behind the scenes to download and install the required modules, taking version requirements into account. The `-u` flag requests Hugo to update the modules to their latest version too. The `./...` argument instructs Hugo to update all modules recursively. This includes the `exampleSite` subfolder, if any.
  {{< /accordion-item >}}
  {{< accordion-item header="hugo mod get -u" >}}
  The previous command seemingly has a bug (see {{</* link hugo_issue_10719>}}#10719{{< /link */>}}), in which it does not update the main `go.mod` file in the repository root when updating any module files in subfolders (such as `exampleSite`). Running `hugo mod get -u` without the recursive argument is a workaround to fix this.
  {{< /accordion-item >}}
  {{< accordion-item header="npm run -s mod:vendor" >}}
  Hugo stores the installed modules in a local cache folder. This cache folder is volatile and can differ per OS, such as macOS, Windows, and Linux distribution. Hinode uses purging to reduce the overhead of stylesheets. The purger requires access to specific files of the main Hinode repository. Vendoring the modules, including the main Hinode module, ensures the various files are available on a known path (usually `./_vendor`). Vendoring is also required when you have a subsite, such as `exampleSite`, or if you would like to reference a specific file from a module (using for example the {{</* link "/docs/components/docs/" >}}docs shortcode{{< /link */>}} ).
  {{< /accordion-item >}}
  {{< accordion-item header="npm run -s mod:tidy" >}}
  The command `hugo mod tidy` removes unused entries in `go.mod` and `go.sum`.
  {{< /accordion-item >}}
{{< /accordion >}}
{{% comment %}}<!-- markdownlint-enable MD037 -->{{% /comment %}}

### Running a local development server

Your site is now ready for testing. Enter the following command to start a local development server:

{{< command prompt="hinode-demo $" >}}
npm run start
(out)
(out)> @gethinode/template@0.11.0 prestart
(out)> npm run -s mod:vendor
(out)
(out)> @gethinode/template@0.11.0 start
(out)> hugo server --bind=0.0.0.0 --disableFastRender --printI18nWarnings
(out)
(out)Watching for changes in /../hinode-demo/{..}
(out)Watching for config changes in [..]
(out)Start building sites ...
(out)hugo v0.117.0+extended darwin/arm64
(out)
(out)
(out)                   | EN  
(out)-------------------+------
(out)  Pages            |   6  
(out)  Paginator pages  |   0  
(out)  Non-page files   |   0  
(out)  Static files     | 104  
(out)  Processed images |  11  
(out)  Aliases          |   0  
(out)  Sitemaps         |   1  
(out)  Cleaned          |   0  
(out)
(out)Built in 1311 ms
(out)Environment: "development"
(out)Serving pages from memory
(out)Web Server is available at http://localhost:1313/ (bind address 0.0.0.0)
(out)Press Ctrl+C to stop
{{< /command >}}

It usually takes less than a minute to build the site and to start the web server in development mode. Before building the site, Hinode cleans several folders. The build itself shows the result of the pages and other assets generated by Hugo. By default, the starter web site supports the English (`EN`) language. Lastly, Hugo mentions the local address on which it is available (usually `http://localhost:1313/`) and indicates the folders it is watching. The latter means that if you make any changes whilst the web server is running, Hugo should pick up those changes and regenerate the applicable assets. Using a feature called live reloading, your web browser will be instructed to refresh the web page accordingly.

## Step 2 - Managing the content

We will now use VSCode to modify the content of our demo site. Start the application and open the `hinode-demo` folder. The explorer view provides an overview of the folders and files of the repository. The key folders are the following:

| Folder    | Description |
|-----------|-------------|
| `assets`  | Contains static files such as images and stylesheets that are processed by Hugo during build. |
| `config`  | Defines the configuration of the site. |
| `content` | Maintains the content and its translations of the site. |
| `layouts` | Defines Hugo shortcodes and partials. |
| `static`  | Specifies static files to be deployed as-is, thus without any processing by Hugo. |

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/vscode-edit-step01.png" caption="Step 1. Open the source code folder in VSCode" >}}
  {{< img src="img/vscode-edit-step02.png" caption="Step 2. Create a new develop branch" >}}
  {{< img src="img/vscode-edit-step03.png" caption="Step 3. Edit the featured section" >}}
{{< /carousel >}}

We will now set up a new branch before we make any changes. It is a good software practice to set up at least one branch for development and testing, instead of working directly on the main branch. Hinode provides several predefined tests that verify if submitted changes in a Pull Request adhere to coding conventions and do not break the build.

Head over to the `Source Control` section of VSCode and click on the button `...` to open the source control menu. Within the menu, navigate to `Branch / Create Branch...`. Provide `develop` as branch name and confirm with {{< kbd enter >}}. The blue status bar on the bottom of VSCode will now display `develop` as selected branch. A repository usually contains a `main` branch that maintains the production code, and one or more development branches. Complex projects with multiple contributors may have multiple active (feature) branches and even nested branches.

Now let us replace the introduction of the featured section of our homepage. Replace the main content in `content/_index.md` (below the last `---` marker) with the following.

```md
This is my first site created with Hinode.
```

When done, head over to the address `http://localhost:1313/` in your web browser to validate the result of the changes.

Our initial page is still rather empty. We will now create a new post and modify the existing about section. Still within the `develop` branch, create a new folder `content/posts`. This is a so-called root section and corresponds with the path `/posts` of your published site. Next, create a new file in `content/posts/first-post.md`. Add the following content:

```yml
---
title: This is my first post
date: 2023-08-15
thumbnail:
    url: /img/sunrise.jpg
    author: Harris Vo
    authorURL: https://unsplash.com/@hoanvokim
    origin: https://unsplash.com/photos/ZX6BPboJrYk
    originName: Unsplash
---

This is my first site created with Hinode. It includes a single blog post.

```

The content contains frontmatter, denoted by `---` markers, and main content. The frontmatter captures the metadata of the page, and usually includes at least a title and a date. The `thumbnail` is a special variable introduced by Hinode that captures the metadata of our page thumbnail. The image itself is mounted from the main Hinode repository into the `assets` folder upon build.

Check back to see the changes in your web browser. If you do not see the new post, you might have to restart the web server. Hit {{< kbd "CTRL-C" >}} and rerun the `npm run start` command. Your page should now look similar to the following screenshot:

{{< image src="img/hinode-demo.png" caption="Demo site with an initial blog post" class="border" wrapper="col-sm-12 col-lg-8 mx-auto" >}}

## Step 3 - Validating the changes

Hinode defines severals tests to validate the code adheres to [coding standards]({{% relref "contribute#coding-guidelines" %}}). Run the following command to run the tests locally. The test should confirm our code is safe to check in.

{{< command prompt="hinode-demo $" >}}
npm run lint
(out)
(out)> @gethinode/template@0.11.0 lint
(out)> npm-run-all lint:**
(out)
(out)> @gethinode/template@0.11.0 lint:scripts
(out)> eslint assets/js --no-error-on-unmatched-pattern
(out)
(out)> @gethinode/template@0.11.0 lint:styles
(out)> stylelint "assets/scss/**/*.{css,sass,scss,sss,less}" --allow-empty-input
(out)
(out)> @gethinode/template@0.11.0 lint:markdown
(out)> markdownlint-cli2 "*.md" "content/**/*.md"
(out)
(out)markdownlint-cli2 v0.8.1 (markdownlint v0.29.0)
(out)Finding: *.md content/**/*.md !node_modules !CHANGELOG.md
(out)Linting: 3 file(s)
(out)Summary: 0 error(s)
{{< /command >}}

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/vscode-commit-step01.png" caption="Step 1. Stage the changes" >}}
  {{< img src="img/vscode-commit-step02.png" caption="Step 2. Publish the branch" >}}
{{< /carousel >}}

Head over to VSCode's Source Control to view the pending changes. Click on the file `_index.md` to open the code inspector. VSCode will then show the differences between the previous version and current version of the file. Content that has been replaced or removed is marked red, and content that has been added or modified is marked green. Verify the change and click on the `+` button to stage the modification of the `_index.md` file. Enter a descriptive commit message such as `Modify about section`. When done, click on the blue `Commit` button to commit the changes to the `develop` branch.

> [!TIP]
> By convention, a commit message should use the imperative mood and should be less than 150 characters in total. Review the blog from Initial Commit to see more {{< link initialcommit >}}best practices and guidelines to write good commit messages{{< /link >}}.

VSCode highlights two additional changes, one being our new post and the other a file called `hugo_stats.json`. This latter file is used by the purger to avoid required styles are removed unintentionally. Check the guide about [optimizing the user experience]({{% relref "optimization" %}}) for an elaborate deep-dive. Stage and commit these two changes too. Lastly, click on the blue button `Publish Branch` to submit the branch and its content to GitHub. For an existing branch you would push the button `Sync Changes` instead.

## Step 4 - Submitting a Pull Request

With your changes committed to the remote develop branch, you can now merge the changes with the main branch. Head over to your repository on GitHub to submit a Pull Request (PR). Click on the green button `New pull request` within the menu `Pull Requests` to do so. Enter a descriptive title for the PR, or confirm the default title suggested by GitHub. Click on the green button to submit the PR, which triggers GitHub to run several checks.

By default, Hinode runs a linting test and builds the web site with the latest stable (`LTS`) versions of Node.js. The linting test is the same test that ran in the [previous step]({{% relref "#step-3---validating-the-changes" %}}). The tests act as a sort of safeguard to prevent changes breaking the main repository. You can confirm the merge when all checks have passed successfully. You can then observe the commit message associated with the `content` folder when you head back to the code of the main repository.

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/github-pr-step01.png" caption="Step 1. Open a pull request" >}}
  {{< img src="img/github-pr-step02.png" caption="Step 2. Enter a descriptive title" >}}
  {{< img src="img/github-pr-step03.png" caption="Step 3. Validate all checks have passed" >}}
  {{< img src="img/github-pr-step04.png" caption="Step 4. Confirm the merge" >}}
  {{< img src="img/github-pr-step05.png" caption="Step 5. Review the merge completion" >}}
  {{< img src="img/github-pr-step06.png" caption="Step 6. Observe the committed changes" >}}
{{< /carousel >}}

## Conclusion

You have now successfully created your initial Hinode site with version control and automated updates. You can look into the guide to {{< link "automation" >}} automate the dependency upgrades using GitHub actions{{< /link >}}. Review the [hosting and deployment options]({{% relref "hosting-and-deployment" %}}) to see various options on how to (automatically) publish your site to a hosting provider.

[^1]: Refer to the [installation instructions]({{% relref "introduction" %}}) if you prefer to install Hinode as a regular Hugo theme.
[^2]: By default macOS synchronizes your `~/Documents` folder with iCloud. Unfortunately this interferes with npm and could lead to all kinds of synchronization issues. You can better select a folder that is **not** synchronized with iCloud and let git handle your version control.


---

---
author: Mark Dumay
title: Developing Hugo modules
date: 2023-07-22
description: Guide on how to develop Hugo modules compatible with Hinode.
tags: ["guide", "module", "katex"]
weight: 25
thumbnail: 
    url: img/puzzle.jpg
    author: Ryoji Iwata
    authorURL: https://unsplash.com/@ryoji__iwata
    origin: Unsplash
    originURL: https://unsplash.com/photos/5siQcvSxCP8
modules: ["katex"]

---

## Introduction

> [!NOTE]
> This guide is primarily aimed at explaining how to develop a Hinode-compatible module. The KaTeX library used in this guide is also available as {{< link repository_mod_katex >}}managed module on GitHub{{< /link >}}. Hugo v0.132.0 introduced (experimental) support for [server-side rendering of KaTeX expressions](https://gohugo.io/functions/transform/tomath/), which might be a better alternative when looking for KaTeX support on your site.

{{< link hugo_modules >}}Hugo modules{{< /link >}} provide a flexible and extensible modular framework. Hinode builds upon this framework by introducing core modules and optional modules to further streamline the build process and to minimize the final site assets. This guide helps to get you started with developing your own Hugo modules. It also explains how to take advantage of Hinode's build pipelines to optimize the generated stylesheet and script assets. As a case example, we will set up a module that wraps the functionality of {{< link katex >}}KaTeX{{< /link >}} - a popular math typesetting library. Be sure to comply with [Hinode's prerequisites]({{% relref "introduction#prerequisites" %}}) first - this guide requires npm. We will also use Visual Studio Code (VSCode) for convenience - {{< link vscode_download >}}download your copy from the official website{{< /link >}}.

{{< example lang="markdown" >}}
This is an inline $-b \pm \sqrt{b^2 - 4ac} \over 2a$ formula

This is not an inline formula:

$$x = a_0 + \frac{1}{a_1 + \frac{1}{a_2 + \frac{1}{a_3 + a_4}}}$$  
$$\forall x \in X, \quad \exists y \leq \epsilon$$
{{< /example >}}

## Step 1 - Deciding upon the sourcing strategy

In this guide, we will develop a module to wrap the functionality of the {{< link katex >}}KaTeX{{< /link >}} library. By wrapping this existing library, our Hugo module abstracts away from the technical details and provides intuitive access from within the Hugo ecosystem. Hugo modules uses Go modules under the hood to download the latest available release on GitHub, or the most recent HEAD of the default branch otherwise.

Hugo modules can include files for each of the following folders: `archetypes`, `assets`, `content`, `data`, `i18n`, `layouts`, and `static`. Hugo uses two different algorithms to merge the filesystems, depending on the file type:

- For `i18n` and `data` files, Hugo merges deeply using the translation ID and data key inside the files.
- For `assets`, `content`, `static`, `layouts` (templates), and `archetypes` files, these are merged on file level. So the left-most file will be chosen.

> [!NOTE]
> You can choose to either fully integrate Hugo modules or to include them on a page-by-page basis. In this guide, we will configure KaTeX as an optional module, assuming we will only need KaTeX on a few pages. See [configuring modules]({{% relref "/docs/configuration/modules#configuring-modules" %}}) for more details.

Our module will wrap the functionality of KaTeX as a module for Hinode. The installation instructions of KaTeX tell us what files are needed to {{< link katex_self_hosted >}}host KaTeX ourselves{{< /link >}}. We will need the file `katex.js`, `katex.css`, and the `fonts` directory. We could also use minified versions, however, Hinode will take care of transpiling, bundling, and minifying the assets later on. For our purposes, we are better suited with the properly formatted files to simplify debugging. We also want to include the {{< link katex_autorender >}}auto-render extension{{< /link >}}. We will create a separate script with the instructions to invoke the function `renderMathInElement` later on.

When we take a look at the {{< link katex_github >}}source code repository of KaTeX on GitHub{{< /link >}}, we can observe that not all required files are maintained within the repository. This is quite common, as many libraries choose to publish their release assets through a package manager (such as {{< link npm >}}npm{{< /link >}}) or {{< abbr CDN >}} instead. The GitHub releases do adhere to a consistent semantic versioning pattern of `vMAJOR.MINOR.PATCH`. Both requirements are needed for Hugo modules to work out-of-the-box - that is, downloading the GitHub release directly.

Even if the first requirement has not been met, we can still use the Hugo module system. We will use {{< link npm >}}npm{{< /link >}} to do some of the heavy-lifting for us. Our module will use npm and several scripts to expose the required files and to ensure these file are kept up-to-date. Now that we have decided on our sourcing strategy, we can head over to the next step to start working on our module.

## Step 2 - Initializing the module template

Hinode maintains a [module template](https://github.com/gethinode/mod-template) to quickly get you started with developing your own modules. Navigate to the repository on GitHub and click on the button `Use this template`. Next, fill in the repository settings such as the name and description, and click on the button `Create repository`. When GitHub has initialized the repository, click on the `<> Code` button and copy the remote git URL (`https`).

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/module-template-step01.png" caption="Step 1. Use the module template" >}}
  {{< img src="img/module-template-step02.png" caption="Step 2. Fill in the repository settings" >}}
  {{< img src="img/module-template-step03.png" caption="Step 3. Copy the remote git URL" >}}
{{< /carousel >}}

Now head over to the terminal of your local machine and initialize a local copy of the GitHub repository (replacing `{OWNER}` and `{REPOSITORY}`, or simply pasting the git URL your had copied earlier). This guide will use `https://github.com/markdumay/mod-katex` throughout the rest of the document.

{{< command >}}
git clone https://github.com/{OWNER}/{REPOSITORY}.git && cd {REPOSITORY}
{{< /command >}}

Open the local repository in VSCode and create a `develop` branch first. Now search for the keyword `gethinode/mod-template` and replace it with `markdumay/mod-katex`, except for the file `package-lock.json` - that gets updated automatically. Likewise, replace the remaining `mod-template` keywords with `mod-katex`. Feel free to adjust the files `package.json` and `README.md` as needed, such as updating the package description. Head over to source control, provide a commit message, and publish the `develop` branch to GitHub.

## Step 3 - Exposing the KaTeX distribution files

We will now add KaTeX as npm package to our local repository. Run the following command from your terminal to add KaTeX as development dependency.

> [!NOTE]
> You can install npm packages as either regular packages or development dependency. We do not need the KaTeX library at run-time, as Hugo compiles a static site. Additionally, we will redistribute the required KaTeX files as part of our site deployment. We can therefore install the KaTeX package as development dependency, listed under `devDependencies` in `package.json`.

{{< command >}}
npm install -D katex
{{< /command >}}

Switch back to VSCode and observe a new directory `node_modules` has been created in the repository root. The directory contains a folder `katex`, in which the subfolder `dist` contains our required files.

We will now create a `postinstall` script to copy the required files to our main repository (by default, `node_modules` are excluded from our git repository -  see `.gitignore` in the repository root). The below extract of `package.json` shows the placeholder script predefined by the module template.

```json
  [...]
  "scripts": {
    [...]
    "postinstall": "echo TODO: add postinstall instructions",
    [...]
  },
  [...]
```

Modify the `postinstall` script to copy the required files to a local `dist` directory:

```json
  [...]
  "scripts": {
    [...]
    "postinstall": "npm run -s copy:css && npm run -s copy:js && npm run -s copy:contrib && npm run -s copy:fonts",
    "copy:css": "cpy node_modules/katex/dist/katex.css dist --rename=katex.scss --flat",
    "copy:js": "cpy node_modules/katex/dist/katex.js dist --flat",
    "copy:contrib": "cpy \"node_modules/katex/dist/contrib/*.js\" \"!node_modules/katex/dist/contrib/*.min.js\"  dist/contrib --flat",
    "copy:fonts": "cpy node_modules/katex/dist/fonts/** dist/fonts --flat",
    [...]
  },
  [...]
```

The line postinstall is split into separate lines for each copy command to improve readability (you could also use {{< link npm_run_all >}}npm-run-all{{< /link >}} to simplify the command even further). Each copy statement uses {{< link npm_cpy >}}cpy{{< /link >}}, a cross-platform copy command. The `--flat` argument instructs `cpy` to flatten the files in the destination directory `dist`. The negation pattern starting with `!` tells `cpy-cli` to skip files that end with `.min.js`.

> [!IMPORTANT]
> We deliberately rename the `katex.css` file to a `katex.scss` file. The default `libsass` library, part of the [styles processing pipeline]({{% relref "styles" %}}), has difficulty processing the file otherwise.

Run `npm install` from the command line to invoke the `postinstall` script automatically. You should now have a folder `dist` in your repository root with the correct files. This npm script works well in a {{< abbr "CI/CD" >}} pipeline too, which prepares us for automation of the dependency upgrades later on in this guide.

{{< command >}}
npm install
(out)> @markdumay/mod-katex@0.0.0 postinstall
(out)> npm run -s copy:css && npm run -s copy:js && npm run -s copy:fonts
{{< /command >}}

We will now expose the various files copied to our local `dist` folder using [Hugo mounts]({{% relref "/docs/advanced-settings/overview#mounted-folders" %}}). The below configuration adheres to Hinode's [conventions for the naming and paths of the exposed files]({{% relref "module-development#conventions" %}}). Also observe that we explicitly add the existing folders `layouts`, `assets`, and `static` as mount point. This is to ensure other mounts are merged with any existing directories, instead of these mounts replacing the local folders. Add this configuration to the `config.toml` file in your repository root.

```toml
[module]
  [module.hugoVersion]
    extended = true
    min = "0.110.0"
    max = ""
  [[module.mounts]]
    source = "dist/katex.js"
    target = "assets/js/modules/katex/katex.js"
  [[module.mounts]]
    source = "dist/contrib/auto-render.js"
    target = "assets/js/modules/katex/katex-autorender.js"
  [[module.mounts]]
    source = "dist"
    target = "assets/scss"
    includeFiles = "katex.scss"
  [[module.mounts]]
    source = "dist/fonts"
    target = "static/fonts"
  [[module.mounts]]
    source = 'layouts'
    target = 'layouts'
  [[module.mounts]]
    source = 'assets'
    target = 'assets'
  [[module.mounts]]
    source = 'static'
    target = 'static'
```

As a final step we will include a basic script to initialize KaTeX when the page loads. An example script is available on the {{< link katex_load >}}KaTeX site{{< /link >}}. Create a file `assets/js/modules/katex/katex-autoload.js` and copy-paste the following script (copied from the KaTeX site for convenience). When done, push the latest changes to your remote git repository.

{{< file path="./_vendor/github.com/gethinode/mod-katex/assets/js/modules/katex/katex-autoload.js" full="false" >}}

## Step 4 - Testing the KaTeX markup

The module template provides a simple website for local testing. Open the file `exampleSite/hugo.toml` and update the configuration:

```toml
[module]
  replacements = 'github.com/markdumay/mod-katex -> ../..'
  [[module.mounts]]
    source = "static"
    target = "static"
  [[module.imports]]
    path = "github.com/markdumay/mod-katex"
  [[module.imports.mounts]]
    source = "dist/katex.scss"
    target = "static/katex.css"
  [[module.imports.mounts]]
    source = "dist/fonts"
    target = "static/fonts"
  [[module.imports.mounts]]
    source = "dist/katex.js"
    target = "static/js/katex.js"
  [[module.imports.mounts]]
    source = "dist/contrib/auto-render.js"
    target = "static/js/auto-render.js"
  [[module.imports.mounts]]
    source = "assets/js/modules/katex/katex-autoload.js"
    target = "static/js/katex-autoload.js"
```

The `replacements` instruction tells Hugo to source the `mod-katex` module from the parent folder instead of the remote repository. This is of great help for local development and testing, as we would otherwise need to synchronize our repositories, submit a PR, and pull the latest version for each revision. The next line instructs our example site to use the `mod-katex` module (now sourced locally) and to adjust the mount points of the `.css` file and `.js` files. In this simple site for testing, we have no need for complex processing or bundling of assets, so we can use static imports instead.

We will now run the `mod:update` script to install the Hugo module(s) and to check for any updates. The `package.json` contains several scripts to help us:

```json
  [...]
  "scripts": {
    [...]
    "mod:update": "hugo mod get -u ./... && npm run -s mod:vendor && npm run -s mod:tidy",
    "mod:vendor": "rimraf _vendor && hugo mod vendor",
    "mod:tidy": "hugo mod tidy && hugo mod tidy -s exampleSite",
    [...]
  },
  [...]
```

- **`hugo mod get -u ./...`**

  Checks for any Hugo module updates recursively (including subfolders such as `exampleSite`)

- **`rimraf _vendor && hugo mod vendor`**

  Stores the module assets in a local vendor directory instead of the system cache. This is required if a module uses other modules itself (so-called transitive dependencies) and ensures our example site has access to them. Another reason to vendor your modules is to aid additional tools, such as the {{< link npm_whitelister >}}Purgecss Whitelister{{< /link >}}. External tools do not have access to Hugo mounts, however, might require access to module files. Vendoring your modules ensures all module data is available on a local, known path.
  
  The `_vendor` directory is deleted to prevent an error when the module does **not** have transitive dependencies. You could remove the vendor approach in this case, however, the current scripts defined by the module template cover both scenarios.

- **`hugo mod tidy && hugo mod tidy -s exampleSite`**

  Do some housekeeping of the `go.mod` and `go.sum` files in both the main repository and `exampleSite` folder. The command `hugo mod tidy` does not have a recursive option, so instead we invoke it the second time with the `-s` argument to point it at the correct subfolder.

Run the command `npm run mod:update` to update the modules recursively.

{{< command >}}
npm run mod:update
(out)
(out)> @markdumay/mod-katex@0.0.0 mod:update
(out)> hugo mod get -u ./... && npm run -s mod:vendor && npm run -s mod:tidy
(out)
(out)Update module in [...]/mod-katex/exampleSite
(out)Update module in [...]/mod-katex
{{< /command >}}

We will now adjust the file `baseof.html` in `exampleSite/layouts/_default` to include our static stylesheet and script on each page by default. Modify lines 7 and 13-15 as follows:

```html {linenos=table,hl_lines=[7,"13-15"]}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0">
  <title>{{ with .Title }}{{ printf "%s | " . }}{{ end }}{{ site.Title }}</title>
  <link rel=stylesheet href="/katex.css">
</head>
<body>
  {{ block "main" . }}

  {{ end }}
<script src="/js/katex.js"></script>
<script src="/js/katex-autoload.js"></script>
<script src="/js/auto-render.js"></script>
</body>
</html>
```

Finally, add some examples to the file `exampleSite/content/_index.md`:

```md
This is an inline $-b \pm \sqrt{b^2 - 4ac} \over 2a$ formula

This is not an inline formula:

$$x = a_0 + \frac{1}{a_1 + \frac{1}{a_2 + \frac{1}{a_3 + a_4}}}$$  
$$\forall x \in X, \quad \exists y \leq \epsilon$$
```

Start a local server for the example site with the following command. Navigate to the address in your local browser and verify the page loads correctly.

{{< command >}}
npm run start
(out)
(out)> @markdumay/mod-katex@0.0.0 prestart
(out)> npm run clean && npm run mod:vendor
(out)
(out)> @markdumay/mod-katex@0.0.0 clean
(out)> rimraf exampleSite/public exampleSite/resources
(out)
(out)> @markdumay/mod-katex@0.0.0 mod:vendor
(out)> rimraf _vendor && hugo mod vendor
(out)
(out)> @markdumay/mod-katex@0.0.0 start
(out)> hugo server -s exampleSite --bind=0.0.0.0 --disableFastRender --printI18nWarnings
(out)
(out)Start building sites ...
(out)Environment: "development"
(out)Serving pages from memory
(out)Web Server is available at http://localhost:1313/ (bind address 0.0.0.0)
(out)Press Ctrl+C to stop
{{< /command >}}

## Conclusion

We have now created a new module that wraps the functionality of KaTeX. You can now easily include the module as core module or optional module in your Hinode site. Visit the [modules]({{% relref "docs/configuration/modules" %}}) section for more instructions. As a next step, you could consider to automate the dependency tracking, merging, and publication of new releases for your module. Your module already inherited several workflows from the module template. Visit the [module development]({{% relref "module-development" %}}) section for more information.


---

---
title: Optimizing the user experience
description: Guide on how to optimize the user experience of your site.
date: 2023-04-03
lastmod: 2024-01-02
tags: ["guide", "optimization"]
weight: 30
thumbnail: 
    url: img/watch.jpg
    author: Saffu
    authorURL: https://unsplash.com/@saffu
    origin: Unsplash
    originURL: https://unsplash.com/photos/E4kKGI4oGaU
---

## Introduction

Hinode includes support for {{< link bootstrap >}}Bootstrap{{< /link >}} and {{< link fontawesome >}}Font Awesome{{< /link >}} by default. Although these packages provide many great features, they do increase the size of your site's assets. This guide illustrates several strategies on how to optimize your Hinode site. We will use the {{< link repository_docs >}}Hinode documentation repository{{< /link >}} as a case example.

A site generated by Hinode consists of many static files, such as fonts, stylesheets, images, and JavaScript files. The {{< link core_web_vitals >}}Core Web Vitals{{< /link >}} are three performance metrics introduced by Google. These metrics are an indication of the real-life user experience of your site. {{< link pagespeed >}}Pagespeed Insights{{< /link >}} uses these metrics to evaluate the performance of your site.

{{< card-group padding="3" class="border-0" >}}
    {{< card thumbnail="/img/web_dev_lcp.svg" alt="Largest Contentful Paint metric" />}}
    {{< card thumbnail="/img/web_dev_fid.svg" alt="First Input Delay metric" />}}
    {{< card thumbnail="/img/web_dev_cls.svg" alt="Cumulative Layout Shift metric" />}}
{{< /card-group >}}

- **Largest Contentful Paint (LCP)**: measures loading performance. To provide a good user experience, LCP should occur within 2.5 seconds of when the page first starts loading.
- **First Input Delay (FID)**: measures interactivity. To provide a good user experience, pages should have a FID of 100 milliseconds or less.
- **Cumulative Layout Shift (CLS)**: measures visual stability. To provide a good user experience, pages should maintain a CLS of 0.1 or less.

Not all files are critical to your user experience. In general, the following static files are considered vital to the rendering of a web page:

- **{{< abbr CSS >}} files**
- **JavaScript files** added in the `<head>` section
- **Fonts** added from either {{< abbr CDN >}} or a local server

Images, media files, and `<script>` tags placed at the bottom of the `<body>` section are treated as non-render blocking resources.

## Step 1 - Setting up the test case

We will now use the Hinode documentation site as a real-life case example. We will use Google Chrome to establish the baseline performance and identify opportunities for improvement. If not done so already, {{< link google_chrome >}}download and install Chrome{{< /link >}} from the official site. Use the following commands to download the latest Hinode docs repository. Be sure to comply with [Hinode's prerequisites]({{% relref "introduction#prerequisites" %}}) first - this guide requires npm.

{{< command >}}
git clone https://github.com/gethinode/docs.git && cd docs
{{< /command >}}

For now, set the `purge` setting to `false` in `config/_default/params.toml`:

```toml
[style]
  purge = false
```

Install the dependencies and start a local web server with the following commands:

{{< command >}}
npm install
npm run start
(out)Web Server is available at http://localhost:1313/ (bind address 0.0.0.0)
(out)Press Ctrl+C to stop
{{< /command >}}

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/chrome-step01.png" caption="Step 1. Open the Developer Tools" >}}
  {{< img src="img/chrome-step02.png" caption="Step 2. Inspect the sources" >}}
  {{< img src="img/chrome-step03.png" caption="Step 3. Review the size of the assets" >}}
{{< /carousel >}}

Start Google Chrome and navigate to the address of the local webserver (usually `http://localhost:1313/`). Next, open the Developer Tools by navigating to `View/Developer/Developer Tools`. The right-hand side of your screen now displays several tools, such as `Sources` and `Network`. Click on the `Sources` tool to review the static files downloaded by Chrome. You can use this tool to inspect the output generated by Hugo. It includes a file called `(index)`, which is your main HTML page. Another element is `main.css`, which maintains the stylesheet. Navigate to the `Network` tool to review the size of the various assets and to study the rendering path of your homepage. Both the `main.css` file and `main.bundle.js` file are about 400KB in size.

## Step 2 - Establishing the baseline performance

Go to the Lighthouse tool to start a performance assessment of your site. The tool might be hidden at first, click on the `>>` icon to expand the menu. Generate a Lighthouse report for a Mobile device and put a tickmark for `Performance`. Click on the button `Analyze page load` to start the evaluation. The Google Lighthouse test evaluates the performance of your site from a user perspective. The Mobile test simulates the rendering your site over a wireless network, and is more demanding than the Desktop test. The performance score will probably be between 60 and 80. The score is derived from several metrics, including the Largest Contentful Paint.

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/lighthouse-step01.png" caption="Step 1. Open the Lighthouse tool" >}}
  {{< img src="img/lighthouse-step02.png" caption="Step 2. Generate a report" >}}
  {{< img src="img/lighthouse-step03.png" caption="Step 3. Evaluate the performance score" >}}
  {{< img src="img/lighthouse-step04.png" caption="Step 4. Review the opportunities for improvement" >}}
{{< /carousel >}}

Scroll below in the Lighthouse evaluation report to study several opportunities and their estimated savings. The opportunities will likely include the following topics:

1. **Enable text compression**

   The current web server serves several assets in plain text. Compressing text-based resources will reduce the download size of those resources.

2. **Eliminate render-blocking resources**

   Hinode includes the `main.bundle.js` file in the page body instead of the header by default, thus keeping this file from the critical rendering path. However, the `main.css` file is render-blocking by default - no matter where included. Reducing the size of this file will improve the page loading performance. One notable exception is the [script to control the site's color mode]({{% relref "scripts#critical-files" %}}), which is considered to be a critical resource.

3. **Reduce unused CSS and JavaScript**

   Both the CSS file and JavaScript file include unused styles and elements. This is largely the result of using general libraries such as Bootstrap and Font Awesome. Removing unnecessary elements will reduce the size of both files.

4. **Minify CSS and JavaScript**

   Lastly, the CSS file and JavaScript file contain formatting to make them more readable. Although formatting your code is a good software development practice and improves maintainability, it is unnecessary for the code in production. Minifying is an approach to remove all formatting - such as new line characters, tabs, and spaces - from the code.

## Step 3 - Applying optimization quick fixes

The Hinode documentation site uses several optimization strategies to reduce the size of the generated assets.

1. **Add responsive images optimized for multiple screen sizes and devices**

   Hinode supports responsive images out-of-the-box. Hinode uses Hugo to preprocess images on the server. By taking advantage of so-called image sets, the client’s browser can decide which image to download whilst reducing the download size. Review the [image documentation]({{% relref "images-and-figures" %}}) for more details.

2. **Serve font files locally**

   Font providers such as {{< link google_fonts >}}Google Fonts{{< /link >}} add font-face definitions for all the character sets a typeface comes with. By serving fonts locally you can define the exact definitions required. See the [fonts documentation]({{% relref "fonts#local-fonts" %}}) for more details.

3. **Minify CSS and JavaScript files in production**

   Hinode starts a local web server in development mode to simplify debugging by default. In production mode, Hinode minifies the CSS and JavaScript files and does not generate any debugging information (such as source maps).

The first two strategies are already taken care off. We will now switch to production mode to evaluate the impact of minification. Stop the current web server with {{< kbd "CTRL-C" >}}. Run the command `npm run start:prod` to start the local web server in production mode.

{{< command >}}
npm run start:prod
(out)Environment: "production"
(out)Web Server is available at http://localhost:1313/ (bind address 0.0.0.0)
(out)Press Ctrl+C to stop
{{< /command >}}

Rerun the Lighthouse test once your site is up and running. The performance score will likely be in the mid eighties and the minification remark will have disappeared.

## Step 4 - Purging unused CSS elements

Although we have increased the site's performance, we still have several remaining areas of improvement. From a build perspective, you can either limit what you put into the build pipeline, or remove unused items from the build output. The Bootstrap documentation explains how to {{< link bs_lean >}}use lean file imports{{< /link >}}, catering for the first strategy. Being a documentation site, the current test case uses all Bootstrap elements. This guide therefore focuses on purging the stylesheets as last step in the build pipeline.

{{% comment %}}<!-- TODO: add build pipeline illustration -->{{% /comment %}}

Hinode uses {{< abbr SCSS >}} files as part of its pipeline to generate the stylesheets for your site. Under the hood, Hinode utilizes {{< link hugo_pipes >}}Hugo's pipe functionality{{< /link >}} to process its SCSS files. We will now set the `purge` setting to `true` in `config/_default/params.toml`:

```toml
[style]
  purge = true
```

Next, we will need to ensure the `writeStats` setting is set to true also:

{{< docs name="build" file="config/_default/hugo.toml" >}}

This Hugo setting generates a file `hugo_stats.json` in the repository root. The file is generated once all content files and static files have been processed by Hugo. It provides a list of HTML elements such as tags, classes, and IDs used by your site.

When purging is enabled, Hinode calls the script `postcss.config.js` in the `config` folder. This script uses several npm packages, including {{< link npm_whitelister >}}purgecss-whitelister{{< /link >}} and {{< link npm_purgecss >}}@fullhuman/postcss-purgecss{{< /link >}}. These packages are already added to your repository's `package.json` file as development dependencies. The below code snippet sets up the `purgecss` package and links it to the generated `hugo_stats.json` file. This instructs purgecss to remove all CSS elements, unless they are referenced in the statistics (meaning they are being used on your site).

```js
const purgecss = require('@fullhuman/postcss-purgecss')({
  content: ['./hugo_stats.json'],
  defaultExtractor: (content) => {
    const els = JSON.parse(content).htmlElements
    return [...(els.tags || []), ...(els.classes || []), ...(els.ids || [])]
  },
  dynamicAttributes: [],
  safelist: []
})
```

If you rerun the Lighthouse test, the size of the `main.css` file will appear to be significantly smaller. Unfortunately, your site will also not look right. The purgecss approach is quite aggressive and has removed too many elements from your stylesheet. We will need to visually inspect the site's pages and put additional elements to the safelist. Additionally, the dark theme also no longer works. We can fix that by passing `data-bs-theme` to the argument `dynamicAttributes`. Visually inspecting the page rendering and putting elements to the safelist is a manual exercise. Hinode therefore disables the purge setting by default. Nevertheless, the result can be quite rewarding. Click on the panel below to reveal the full script.

> [!IMPORTANT]
> External tools do no have access to Hugo mounts. You will need to specify the original paths of the files you want to safelist. When using modules, be sure to vendor your modules.

{{< docs name="purge" file="./config/postcss.config.js" show="false" >}}

## Step 5 - Assessing the site in production

As you might recall, the Lighthouse assessment also recommends to enable text compression to reduce the download size of text-based resources. Hugo's web server is meant for local development and is not capable of compressing these assets. We will need to publish our site to a server capable of text compression to evaluate the impact of this setting.

> [!IMPORTANT]
> Please ensure the file `hugo_stats.json` is checked in to your repository (e.g. not listed in `.gitignore`). Netlify will not process the artifact during its build process otherwise.

The actual deployment of our site is beyond the scope of this guide. Instead, we will review the live Hinode documentation site. You can review the documentation on how to [host your site on Netlify]({{% relref "hosting-and-deployment#host-on-netlify" %}}), which is the web server behind the Hinode documentation site.

{{< carousel class="col-sm-12 col-lg-8 mx-auto" >}}
  {{< img src="img/lighthouse-prod-step01.png" caption="Step 1. Inspect the downloaded assets" >}}
  {{< img src="img/lighthouse-prod-step02.png" caption="Step 2. Validate the encoding" >}}
  {{< img src="img/lighthouse-prod-step03.png" caption="Step 3. Evaluate the performance score" >}}
{{< /carousel >}}

Visit the site `https://gethinode.com` in Chrome and open up the Development tools. Click on the `Network` tool and click on the `main.css` file. The response header will show `br` for the value `content-encoding`. This shows the file is served with Brotli encoding, which is one of the compression methods available, next to Gzip and Deflate. Siteground has an insightful blog article {{< link siteground_compression >}}explaining the different compression methods{{< /link >}}. Run a Lighthouse test on the live site to assess the mobile performance score. It will probably be in the range 90 - 100.

## Conclusion

Your site is now significantly more lean and responsive. In this guide we have improved the mobile performance score from average to good. The blog article from LogRocket provides more {{< link logrocket_optimization >}}tips and tricks on how to further optimize your site{{< /link >}}.


---

---
author: Mark Dumay
title: Bootstrap
date: 2023-05-15
weight: 20
icon: fab bootstrap
---

{{< link bootstrap >}}Bootstrap{{< /link >}} is a popular, open-source web development framework. Using a mobile-first approach, it provides several functions and components to simplify the creation of responsive websites.

{{< button relref="layout" outline="true" >}}
    Check the grid system
{{< /button >}}


---

---
author: Mark Dumay
title: Font Awesome
date: 2023-08-02
weight: 30
icon: fa font-awesome
---

{{< link fontawesome >}}Font Awesome{{< /link >}} is a popular icon library and toolkit, used on over 200 million sites. The free version provides access to more than 2,000 icons. The toolkit also provides various styling and animation options out of the box.

{{< button relref="docs/content/icons" outline="true" >}}
    Explore the icons
{{< /button >}}


---

---
author: Mark Dumay
title: Hugo
date: 2024-02-05
weight: 10
icon: fab markdown
---

{{< link hugo >}}Hugo{{< /link >}} is a static website generator written in the {{< link golang >}}Go language{{< /link >}}. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with {{< link markdown_guide >}}Markdown content{{< /link >}} and templates and renders them into a full HTML website.

{{< button relref="introduction" outline="true" >}}
    Get started
{{< /button >}}


---

---
headless: true
title: Embrace the power of open source
---

{{< fab github fa-10x text-secondary >}}
{ .text-center }

Hinode is open source and maintains its codebase in {{< link repository >}}GitHub{{< /link >}}. It builds upon several open-source packages, such as {{< link hugo >}}Hugo{{< /link >}}, {{< link bootstrap >}}Bootstrap{{< /link >}}, and {{< link fontawesome >}}Font Awesome{{< /link >}}. Want to make Hinode even better? Hinode welcomes any contribution, either big or small.
{ .fs-5 .muted .col-12 .col-md-6 .mx-auto .text-center}

{{< button relref="contribute" wrapper="text-center mb-5">}}Contribute to Hinode{{< /button >}}


---

---
author: Mark Dumay
title: Releases
date: 2023-08-14
description: A chronological overview of key releases since the initial launch of Hinode.
---

The timeline below captures the significant changes since the initial release of Hinode in April, 2022. Visit GitHub for a {{< link repository_releases >}}full overview of all Hinode releases{{< /link >}}, including features, bug fixes, and dependency upgrades.

{{< timeline data="releases" class="mt-5">}}


---

---
author: Mark Dumay
title: Business
date: 2023-04-16
weight: 30
thumbnail: 
    url: img/business-1x1.jpg
    author: LinkedIn Sales Solutions
    authorURL: https://unsplash.com/@linkedinsalesnavigator
    origin: Unsplash
    originURL: https://unsplash.com/photos/QgYvORVDdd8
---

As a business you know how important search engine optimization is for people to discover and access your online content. Your site should be fast, well-structured, and responsive across devices.

Hinode provides a modern, responsive landing page that scales with your business. It is secure by default and optimized for search engines out-of-the-box. That is why businesses choose Hinode for their site.


---

---
author: Mark Dumay
title: Creators
date: 2023-04-16
weight: 10
thumbnail: 
    url: img/creator-1x1.jpg
    author: Ali Kazal
    authorURL: https://unsplash.com/@lureofadventure
    origin: Unsplash
    originURL: https://unsplash.com/photos/mpPfqvh04Fc
---

As a content creator you value your independence. You like to take control of your online and offline presence. You want to focus on growing your audience, without limitations.

Hinode gives you the tools to publish your blog in the way that you want. You have full ownership and control of your content. That is why content creators choose Hinode.


---

---
author: Mark Dumay
title: Developers
date: 2023-04-16
weight: 20
thumbnail: 
    url: img/developer-1x1.jpg
    author: Christina Morillo
    authorURL: https://www.pexels.com/@divinetechygirl/
    origin: Pexels
    originURL: https://www.pexels.com/photo/woman-in-black-coat-browsing-on-laptop-computer-1181293/
---

As a developer you want to showcase your project portfolio and publish your software documentation with ease. You know from experience that code examples greatly help to get your users up to speed.

Hinode is built with the frameworks and tools you're familiar with, such as npm, GitHub, and Bootstrap. Predefined components let you add code examples and commands on the fly. That is why developers choose Hinode for their site.


---

---
headless: true
title: Discover how Hinode can help you
---
